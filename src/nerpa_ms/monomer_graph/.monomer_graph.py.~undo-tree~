(undo-tree-save-format-version . 1)
"b21c39b4470e8bca852a46646522d907196a28c0"
[nil nil nil nil (25898 55652 105169 575000) 0 nil]
([nil nil ((#("        self.core_nodes = {} if core_nodes is None else core_nodes
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t) 29 31 (fontified t face font-lock-keyword-face) 31 43 (fontified t) 43 45 (fontified t face font-lock-keyword-face) 45 46 (fontified t) 46 50 (fontified t face font-lock-constant-face) 50 51 (fontified t) 51 55 (fontified t face font-lock-keyword-face) 55 67 (fontified t)) . 790) (t 25871 511 292513 664000)) nil (25898 55652 105168 465000) 0 nil])
([nil nil ((791 . 799) (791 . 792)) nil (25898 55652 105167 384000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -795) (undo-tree-id0 . -4) 799) nil (25898 55652 105164 852000) 0 nil])
([nil nil ((795 . 813)) nil (25898 55652 105139 159000) 0 nil])
([nil nil ((813 . 832)) nil (25898 55652 105138 492000) 0 nil])
([nil nil ((832 . 841)) nil (25898 55652 105137 783000) 0 nil])
([nil nil ((841 . 853)) nil (25898 55652 105136 624000) 0 nil])
([nil nil ((853 . 874)) nil (25898 55652 105135 73000) 0 nil])
([nil nil ((874 . 877)) nil (25898 55652 105130 77000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -878) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) 882 (878 . 882) (878 . 879) 899 (t 25898 55652 106572 493000)) nil (25898 55694 859686 903000) 0 nil])
([nil nil ((56 . 57) (t 25898 55694 863516 744000)) nil (25899 64887 173654 430000) 0 nil])
([nil nil ((57 . 62)) nil (25899 64887 173652 991000) 0 nil])
([nil nil ((62 . 83)) nil (25899 64887 173648 625000) 0 nil])
([nil nil ((57 . 62) (t 25899 64887 177064 694000)) nil (25899 64888 907539 346000) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . -72) 71 (t 25899 64888 909104 312000)) nil (25899 64897 652691 567000) 0 nil])
([nil nil ((#("Dict, " 0 6 (fontified t)) . 81)) nil (25899 64897 652690 582000) 0 nil])
([nil nil ((58 . 62) (58 . 59) 66) nil (25899 64897 652689 898000) 0 nil])
([nil nil ((62 . 66)) nil (25899 64897 652688 965000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -64) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("," 0 1 (fontified t)) . -65) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 66) nil (25899 64897 652685 457000) 0 nil])
([nil nil ((64 . 66)) nil (25899 64897 652631 885000) 0 nil])
([nil nil ((76 . 81) (t 25899 64897 653304 208000) 75) nil (25899 64908 979667 431000) 0 nil])
([nil nil ((81 . 90)) nil (25899 64908 979663 171000) 0 nil])
([nil nil ((104 . 108) (#(" " 0 1 (fontified nil)) . 103) (undo-tree-id63 . -1) (104 . 105) (t 25899 64908 981562 899000)) nil (25899 64920 665779 692000) 0 nil])
([nil nil ((116 . 119) (114 . 115)) nil (25899 64920 665769 530000) 0 nil])
([nil nil ((119 . 125)) nil (25899 64920 665764 627000) 0 nil])
([nil nil ((#("Any, Iterable, Union" 0 20 (fontified t)) . 125) (undo-tree-id64 . 20) (undo-tree-id65 . -20) (undo-tree-id66 . -20) (undo-tree-id67 . -20) (undo-tree-id68 . -20) (undo-tree-id69 . -20) (undo-tree-id70 . -20) (undo-tree-id71 . -20) (undo-tree-id72 . -20) (undo-tree-id73 . -20) (undo-tree-id74 . -20) (undo-tree-id75 . -20) (undo-tree-id76 . -20) (undo-tree-id77 . -20) (undo-tree-id78 . -20) (undo-tree-id79 . -20) (undo-tree-id80 . -3) (undo-tree-id81 . -1) (undo-tree-id82 . -20) (t 25899 64920 669829 482000)) nil (25899 64922 337577 512000) 0 nil])
([nil nil ((#("my_types" 0 8 (fontified t)) . 131) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -8) (t 25899 64922 341867 592000)) nil (25899 64943 791978 466000) 0 nil])
([nil nil ((131 . 138)) nil (25899 64943 791972 218000) 0 nil])
([nil nil ((135 . 140) (#("par" 0 3 (fontified t)) . -135) (undo-tree-id83 . -3) 138) nil (25899 64943 791970 302000) 0 nil])
([nil nil ((140 . 148)) nil (25899 64943 791963 21000) 0 nil])
([nil nil ((148 . 154)) nil (25899 64943 791958 358000) 0 nil])
([nil nil ((201 . 202) (t 25899 64943 794355 955000)) nil (25899 64948 93528 264000) 0 nil])
([nil nil ((202 . 207)) nil (25899 64948 93523 97000) 0 nil])
([nil nil ((162 . 163) (t 25899 64948 98453 810000)) nil (25899 64952 727539 501000) 0 nil])
([nil nil ((163 . 168)) nil (25899 64952 727534 504000) 0 nil])
([nil nil ((164 . 168) (164 . 165) 168 (t 25899 64952 730559 76000)) nil (25899 65002 386759 989000) 0 nil])
([nil nil ((168 . 175)) nil (25899 65002 386758 759000) 0 nil])
([nil nil ((175 . 180)) nil (25899 65002 386758 285000) 0 nil])
([nil nil ((180 . 189)) nil (25899 65002 386757 617000) 0 nil])
([nil nil ((189 . 194)) nil (25899 65002 386756 976000) 0 nil])
([nil nil ((194 . 195)) nil (25899 65002 386755 844000) 0 nil])
([nil nil ((195 . 208)) nil (25899 65002 386754 526000) 0 nil])
([nil nil ((208 . 209)) nil (25899 65002 386749 455000) 0 nil])
([nil nil ((232 . 233) (t 25899 65002 391684 725000)) nil (25899 65004 190235 482000) 0 nil])
([nil nil ((#(", AtomId, AtomInfo, AtomicEdgeInfo" 0 34 (fontified t)) . 284) (t 25899 65004 195725 520000)) nil (25899 65017 323934 440000) 0 nil])
([nil nil ((#("BindingSiteType" 0 15 (fontified t)) . 269) (undo-tree-id93 . -14)) nil (25899 65017 323933 716000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -256) (undo-tree-id92 . -4) 260 (256 . 260) (256 . 257) 268) nil (25899 65017 323931 566000) 0 nil])
([nil nil ((nil rear-nonsticky nil 270 . 271) (nil fontified nil 256 . 271) (256 . 271)) nil (25899 65017 323923 277000) 0 nil])
([nil nil ((256 . 260) 270) nil (25899 65017 323922 89000) 0 nil])
([nil nil ((275 . 276)) nil (25899 65017 323917 482000) 0 nil])
([nil nil ((288 . 289) (#("," 0 1 (fontified t)) . 288) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (t 25899 65017 328022 288000)) nil (25899 65019 7907 874000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 289) (undo-tree-id104 . -1) (t 25899 65019 12060 319000)) nil (25899 65023 47158 970000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-variable-name-face fontified t)) . 540) (t 25899 65023 52151 536000)) nil (25899 65057 645364 750000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 540)) nil (25899 65057 645359 462000) 0 nil])
([nil nil ((#("    # not quite like that now it is possible to add an AMINO bond with arity other than 1
" 0 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 12 (face font-lock-comment-face fontified t) 12 23 (face font-lock-comment-face fontified t) 23 46 (face font-lock-comment-face fontified t) 46 52 (face font-lock-comment-face fontified t) 52 90 (face font-lock-comment-face fontified t)) . 657) (undo-tree-id105 . -79) (undo-tree-id106 . -89) (t 25899 65057 648931 391000)) nil (25899 65279 913188 410000) 0 nil])
([nil nil ((nil rear-nonsticky nil 862 . 863) (859 . 949)) nil (25899 65279 913174 259000) 0 nil])
([nil nil ((#(", core_nodes=None" 0 13 (fontified t) 13 17 (face font-lock-constant-face fontified t)) . 704) (t 25899 65279 917895 458000)) nil (25899 65295 140232 590000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1638) (t 25899 65295 142233 30000)) nil (25899 65344 30423 376000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 1638)) nil (25899 65344 30421 382000) 0 nil])
([nil nil ((1638 . 1639)) nil (25899 65344 30417 547000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 1647) (undo-tree-id108 . -1) (t 25899 65344 35315 415000)) nil (25899 65347 873550 38000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1647) (undo-tree-id107 . -1)) nil (25899 65347 873546 3000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1780) (t 25899 65347 879400 406000)) nil (25899 65371 788328 589000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 1780)) nil (25899 65371 788326 898000) 0 nil])
([nil nil ((1780 . 1781)) nil (25899 65371 788322 738000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 1794) (undo-tree-id109 . -1) (t 25899 65371 791928 755000)) nil (25899 65374 88307 850000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1794)) nil (25899 65374 88297 14000) 0 nil])
([nil nil ((1695 . 1703) (t 25899 65374 91979 545000)) nil (25899 65383 887536 489000) 0 nil])
([nil nil ((1712 . 1713) (t 25899 65383 892195 898000)) nil (25899 65385 993978 775000) 0 nil])
([nil nil ((291 . 292) 301 (t 25899 65386 242 424000)) nil (25899 65418 679393 874000) 0 nil])
([nil nil ((291 . 312)) nil (25899 65418 679392 768000) 0 nil])
([nil nil ((312 . 314)) nil (25899 65418 679392 117000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -310) (undo-tree-id110 . -1) (#("o" 0 1 (fontified t)) . -311) (undo-tree-id111 . -1) (#("r" 0 1 (fontified t)) . -312) (undo-tree-id112 . -1) (#("i" 0 1 (fontified t)) . -313) (undo-tree-id113 . -1) 314) nil (25899 65418 679390 62000) 0 nil])
([nil nil ((310 . 313)) nil (25899 65418 679378 93000) 0 nil])
([nil nil ((313 . 334)) nil (25899 65418 679373 748000) 0 nil])
([nil nil ((#("        monomer_graph.core_nodes = set()
" 0 8 (fontified t) 8 32 (face font-lock-variable-name-face fontified t) 32 35 (fontified t) 35 38 (face font-lock-builtin-face fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 40 (face (rainbow-delimiters-depth-1-face) fontified t) 40 41 (fontified t)) . 1858) (undo-tree-id114 . -39) 1897 (t 25899 65418 680963 188000)) nil (25899 65434 950048 658000) 0 nil])
([nil nil ((2326 . 2327) (2301 . 2326) (#("bind" 0 4 (fontified t)) . -2301) (undo-tree-id116 . -1) (undo-tree-id117 . -4) 2305 (2301 . 2305) (t 25899 65434 953321 685000)) nil (25899 65519 220135 727000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2332)) nil (25899 65519 220133 140000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 2332)) nil (25899 65519 220132 755000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 2332)) nil (25899 65519 220132 421000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2332)) nil (25899 65519 220131 648000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 2332)) nil (25899 65519 220131 180000) 0 nil])
([nil nil ((2332 . 2339)) nil (25899 65519 220130 764000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2352)) nil (25899 65519 220130 270000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 2352)) nil (25899 65519 220129 697000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 2352)) nil (25899 65519 220129 237000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 2352)) nil (25899 65519 220128 583000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2352)) nil (25899 65519 220128 27000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 2352)) nil (25899 65519 220127 535000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 2352)) nil (25899 65519 220126 701000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2352)) nil (25899 65519 220126 1000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 2352)) nil (25899 65519 220125 455000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 2352)) nil (25899 65519 220125 31000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 2352)) nil (25899 65519 220124 671000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2352)) nil (25899 65519 220123 964000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 2352)) nil (25899 65519 220123 160000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2352)) nil (25899 65519 220122 604000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2352)) nil (25899 65519 220122 38000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 2352)) nil (25899 65519 220121 642000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2352)) nil (25899 65519 220121 78000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2352)) nil (25899 65519 220120 296000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 2352)) nil (25899 65519 220119 722000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2352)) nil (25899 65519 220119 16000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 2352)) nil (25899 65519 220118 424000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2352)) nil (25899 65519 220117 966000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 2352)) nil (25899 65519 220117 446000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2352)) nil (25899 65519 220116 977000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 2352)) nil (25899 65519 220116 21000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2352)) nil (25899 65519 220115 606000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . 2352)) nil (25899 65519 220115 46000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 2352)) nil (25899 65519 220114 557000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2352)) nil (25899 65519 220114 2000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 2352)) nil (25899 65519 220113 568000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2352)) nil (25899 65519 220112 841000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 2352)) nil (25899 65519 220112 170000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-keyword-face fontified t)) . 2352)) nil (25899 65519 220111 488000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 2352)) nil (25899 65519 220110 825000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-builtin-face fontified t)) . 2352)) nil (25899 65519 220110 139000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2352)) nil (25899 65519 220109 360000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 2352)) nil (25899 65519 220108 184000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2352)) nil (25899 65519 220107 379000) 0 nil])
([nil nil ((2371 . 2377)) nil (25899 65519 220106 708000) 0 nil])
([nil nil ((2371 . 2396) (#("bindin" 0 6 (fontified t)) . -2371) (undo-tree-id115 . -6) 2377) nil (25899 65519 220104 840000) 0 nil])
([nil nil ((2396 . 2397)) nil (25899 65519 220092 478000) 0 nil])
([nil nil ((2408 . 2409) (t 25899 65519 223174 835000)) nil (25899 65525 368777 552000) 0 nil])
([nil nil ((#(".binding_sites_fingerprint()" 0 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2409) (undo-tree-id118 . 28) (undo-tree-id119 . -28)) nil (25899 65525 368774 246000) 0 nil])
([nil nil ((276 . 281) (t 25899 65525 375309 908000) 275) nil (25900 4 446760 427000) 0 nil])
([nil nil ((281 . 288)) nil (25900 4 446759 120000) 0 nil])
([nil nil ((288 . 291)) nil (25900 4 446758 71000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -288) (undo-tree-id120 . -1) (#("s" 0 1 (fontified t)) . -289) (undo-tree-id121 . -1) (#("i" 0 1 (fontified t)) . -290) (undo-tree-id122 . -1) 291) nil (25900 4 446755 140000) 0 nil])
([nil nil ((288 . 305)) nil (25900 4 446737 480000) 0 nil])
([nil nil ((293 . 294) (t 25900 4 451640 798000)) nil (25900 20 375810 920000) 0 nil])
([nil nil ((300 . 301) (t 25900 20 379990 211000)) nil (25900 29 338069 485000) 0 nil])
([nil nil ((#("        G = copy.deepcopy(self) if create_new_graph else self
" 0 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 30 (face font-lock-keyword-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t) 32 34 (face font-lock-keyword-face fontified t) 34 52 (fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 61 (face font-lock-keyword-face fontified t) 61 62 (fontified t)) . 2441) (undo-tree-id125 . -23) 2464 (t 25900 29 344186 778000)) nil (25900 95 509861 559000) 0 nil])
([nil nil ((#("G.nodes[monomer_idx]['monomer']" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t) 8 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 28 (face font-lock-string-face fontified t) 28 30 (face font-lock-string-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2511) (undo-tree-id123 . -31) (undo-tree-id124 . -1)) nil (25900 95 509858 332000) 0 nil])
([nil nil ((2511 . 2532)) nil (25900 95 509835 993000) 0 nil])
([nil nil ((2532 . 2536)) nil (25900 95 509826 706000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 2853) (t 25900 95 513636 112000)) nil (25900 140 74905 484000) 0 nil])
([nil nil ((2853 . 2857)) nil (25900 140 74900 574000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2159) (t 25900 140 78610 764000)) nil (25900 149 401987 172000) 0 nil])
([nil nil ((#("create_new_graph=True" 0 2 (fontified t) 2 17 (fontified t) 17 21 (face font-lock-constant-face fontified t)) . 2187)) nil (25900 149 401985 582000) 0 nil])
([nil nil ((#("                           " 0 27 (fontified nil)) . 2159) (#("
" 0 1 (fontified t)) . -2159) 2139) nil (25900 149 401979 800000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2267) (undo-tree-id178 . -8) (undo-tree-id179 . -8) 2275 (2267 . 2275) (2267 . 2268) 2314 (t 25900 149 406814 639000)) nil (25900 240 990055 192000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2282 . 2283) (nil fontified nil 2267 . 2283) (2267 . 2283)) nil (25900 240 989976 201000) 0 nil])
([nil nil ((2267 . 2275) 2282) nil (25900 240 989975 287000) 0 nil])
([nil nil ((#("        # TODO: assert monomers_compatible(G.nodes[monomer_idx]['monomer'], new_monomer)
" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 21 (face font-lock-comment-face fontified t) 21 89 (face font-lock-comment-face fontified t)) . 2178) (undo-tree-id128 . -89) (undo-tree-id129 . -89) (undo-tree-id130 . -89) (undo-tree-id131 . -23) (undo-tree-id132 . -79) (undo-tree-id133 . -88) (undo-tree-id134 . -23) (undo-tree-id135 . -23) (undo-tree-id136 . -23) (undo-tree-id137 . -23) (undo-tree-id138 . -23) (undo-tree-id139 . -23) (undo-tree-id140 . -23) (undo-tree-id141 . -23) (undo-tree-id142 . -23) (undo-tree-id143 . -23) (undo-tree-id144 . -23) (undo-tree-id145 . -23) (undo-tree-id146 . -23) (undo-tree-id147 . -23) (undo-tree-id148 . -23) (undo-tree-id149 . -23) (undo-tree-id150 . -23) (undo-tree-id151 . -23) (undo-tree-id152 . -23) (undo-tree-id153 . -23) (undo-tree-id154 . -23) (undo-tree-id155 . -23) (undo-tree-id156 . -23) (undo-tree-id157 . -23) (undo-tree-id158 . -23) (undo-tree-id159 . -23) (undo-tree-id160 . -23) (undo-tree-id161 . -23) (undo-tree-id162 . -23) (undo-tree-id163 . -23) (undo-tree-id164 . -23) (undo-tree-id165 . -23) (undo-tree-id166 . -23) (undo-tree-id167 . -23) (undo-tree-id168 . -23) (undo-tree-id169 . -23) (undo-tree-id170 . -23) (undo-tree-id171 . -23) (undo-tree-id172 . -23) (undo-tree-id173 . -23) (undo-tree-id174 . -23) (undo-tree-id175 . -23) (undo-tree-id176 . -23) (undo-tree-id177 . -23) 2201) nil (25900 240 989973 396000) 0 nil])
([nil nil ((2229 . 2242) (#("l" 0 1 (fontified t)) . -2229) (undo-tree-id126 . -1) (#("f" 0 1 (fontified t)) . -2230) (undo-tree-id127 . -1) 2231 (2226 . 2231) (2216 . 2226) (2202 . 2216)) nil (25900 240 989951 630000) 0 nil])
([nil nil ((2231 . 2239)) nil (25900 240 989939 443000) 0 nil])
([nil nil ((2250 . 2252) (t 25900 240 996814 60000)) nil (25900 247 101840 722000) 0 nil])
([nil nil ((2252 . 2301)) nil (25900 247 101838 984000) 0 nil])
([nil nil ((2301 . 2313)) nil (25900 247 101833 339000) 0 nil])
([nil nil ((2313 . 2320) (t 25900 247 108947 355000)) nil (25900 251 471734 331000) 0 nil])
([nil nil ((2320 . 2327)) nil (25900 251 471728 243000) 0 nil])
([nil nil ((#("        assert binding_sites_fingerprint(self.monomer[monomer_idx]) == \\
            binding_sites_fingerprint(new_monomer)
        binding_site_map = dict()  # old to new
        old_monomer = self.monomer[monomer_idx]
        for bs_type in new_monomer.binding_sites:
            for old_atom_idx, new_atom_idx in zip(old_monomer.binding_sites[bs_type],
                                                  new_monomer.binding_sites[bs_type]):
                binding_site_map[old_atom_idx] = new_atom_idx
" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t) 41 45 (face font-lock-keyword-face fontified t) 45 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 59 (fontified t) 59 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-2-face) fontified t) 66 67 (face (rainbow-delimiters-depth-1-face) fontified t) 67 72 (fontified t) 72 73 (fontified t) 73 85 (fontified t) 85 110 (fontified t) 110 111 (face (rainbow-delimiters-depth-1-face) fontified t) 111 117 (fontified t) 117 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-1-face) fontified t) 123 124 (fontified t) 124 132 (fontified t) 132 148 (face font-lock-variable-name-face fontified t) 148 151 (fontified t) 151 155 (face font-lock-builtin-face fontified t) 155 156 (face (rainbow-delimiters-depth-1-face) fontified t) 156 157 (face (rainbow-delimiters-depth-1-face) fontified t) 157 159 (fontified t) 159 161 (face font-lock-comment-delimiter-face fontified t) 161 171 (face font-lock-comment-face fontified t) 171 172 (face font-lock-comment-face fontified t) 172 180 (fontified t) 180 191 (face font-lock-variable-name-face fontified t) 191 194 (fontified t) 194 198 (face font-lock-keyword-face fontified t) 198 206 (fontified t) 206 207 (face (rainbow-delimiters-depth-1-face) fontified t) 207 218 (fontified t) 218 219 (face (rainbow-delimiters-depth-1-face) fontified t) 219 220 (fontified t) 220 228 (fontified t) 228 231 (face font-lock-keyword-face fontified t) 231 240 (fontified t) 240 242 (face font-lock-keyword-face fontified t) 242 282 (fontified t) 282 285 (face font-lock-keyword-face fontified t) 285 313 (fontified t) 313 315 (face font-lock-keyword-face fontified t) 315 316 (fontified t) 316 319 (face font-lock-builtin-face fontified t) 319 320 (face (rainbow-delimiters-depth-1-face) fontified t) 320 332 (fontified t) 332 344 (fontified t) 344 345 (fontified t) 345 346 (face (rainbow-delimiters-depth-2-face) fontified t) 346 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-2-face) fontified t) 354 356 (fontified t) 356 411 (fontified t) 411 421 (fontified t) 421 431 (fontified t) 431 432 (face (rainbow-delimiters-depth-2-face) fontified t) 432 439 (fontified t) 439 440 (face (rainbow-delimiters-depth-2-face) fontified t) 440 441 (face (rainbow-delimiters-depth-1-face) fontified t) 441 443 (fontified t) 443 459 (fontified t) 459 475 (face font-lock-variable-name-face fontified t) 475 476 (face (rainbow-delimiters-depth-1-face) fontified t) 476 488 (fontified t) 488 489 (face (rainbow-delimiters-depth-1-face) fontified t) 489 500 (fontified t) 500 504 (fontified t) 504 505 (fontified t)) . 2328) (undo-tree-id180 . -504) (undo-tree-id181 . -85) (undo-tree-id182 . -71) (undo-tree-id183 . -504) (undo-tree-id184 . -147) (undo-tree-id185 . -71) (undo-tree-id186 . -504) (undo-tree-id187 . -71) (undo-tree-id188 . -71) (undo-tree-id189 . -71) (undo-tree-id190 . -504) 2832 (t 25900 251 473042 519000)) nil (25900 623 38000 380000) 0 nil])
([nil nil ((#("    binding_sites_fingerprint,
" 0 4 (fontified t) 4 30 (fontified t) 30 31 (fontified t)) . 277) (undo-tree-id201 . -29) (undo-tree-id202 . -29) (t 25900 623 41607 878000)) nil (25900 656 699731 936000) 0 nil])
([nil nil ((276 . 281) 256) nil (25900 656 699730 370000) 0 nil])
([nil nil ((281 . 285)) nil (25900 656 699729 675000) 0 nil])
([nil nil ((281 . 298) (#("get_" 0 4 (fontified t)) . -281) (undo-tree-id191 . -4) (undo-tree-id192 . 4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) 285) nil (25900 656 699727 827000) 0 nil])
([nil nil ((298 . 303)) nil (25900 656 699711 13000) 0 nil])
([nil nil ((#("    # TODO: consider all possible variants
" 0 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 43 (face font-lock-comment-face fontified t)) . 1981) (undo-tree-id203 . -25) (undo-tree-id204 . -25) (undo-tree-id205 . -25) (undo-tree-id206 . -25) (undo-tree-id207 . -25) (undo-tree-id208 . -25) (undo-tree-id209 . -25) (undo-tree-id210 . -25) (undo-tree-id211 . -25) (undo-tree-id212 . -25) (undo-tree-id213 . -25) (undo-tree-id214 . -25) (undo-tree-id215 . -25) (undo-tree-id216 . -25) (undo-tree-id217 . -25) (undo-tree-id218 . -25) (undo-tree-id219 . -25) (undo-tree-id220 . -25) (undo-tree-id221 . -25) (undo-tree-id222 . -25) (undo-tree-id223 . -25) (undo-tree-id224 . -25) (undo-tree-id225 . -25) (undo-tree-id226 . -25) (undo-tree-id227 . -25) (undo-tree-id228 . -25) (undo-tree-id229 . -25) (undo-tree-id230 . -25) (undo-tree-id231 . -25) (undo-tree-id232 . -25) (undo-tree-id233 . -25) (undo-tree-id234 . -25) (undo-tree-id235 . -25) (undo-tree-id236 . -25) (undo-tree-id237 . -25) (undo-tree-id238 . -25) (undo-tree-id239 . -25) (undo-tree-id240 . -25) (undo-tree-id241 . -25) (undo-tree-id242 . -25) (undo-tree-id243 . -25) (undo-tree-id244 . -25) (undo-tree-id245 . -25) (undo-tree-id246 . -25) (undo-tree-id247 . -25) (undo-tree-id248 . -25) (undo-tree-id249 . -25) (undo-tree-id250 . -25) (undo-tree-id251 . -25) (undo-tree-id252 . -25) (undo-tree-id253 . -25) (undo-tree-id254 . -25) 2006 (t 25900 656 702373 795000)) nil (25900 673 802739 937000) 0 nil])
([nil nil ((2174 . 2175)) nil (25900 673 802701 259000) 0 nil])
([nil nil ((2255 . 2256) 2250 (t 25900 673 806762 277000)) nil (25900 714 337699 438000) 0 nil])
([nil nil ((#("        new_monomer_idx = max(self.nodes) + 1
" 0 8 (fontified t) 8 23 (face font-lock-variable-name-face fontified t) 23 26 (fontified t) 26 29 (face font-lock-builtin-face fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 34 (face font-lock-keyword-face fontified t) 34 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t) 41 46 (fontified t)) . 2284) (undo-tree-id255 . -44) (undo-tree-id256 . -44) (undo-tree-id257 . -44) (undo-tree-id258 . -44) (undo-tree-id259 . -44) (undo-tree-id260 . -44) (undo-tree-id261 . -44) (undo-tree-id262 . -44) (undo-tree-id263 . -44) (undo-tree-id264 . -44) (undo-tree-id265 . -44) (undo-tree-id266 . -44) (undo-tree-id267 . -44) (undo-tree-id268 . -44) (undo-tree-id269 . -44) (undo-tree-id270 . -44) (undo-tree-id271 . -44) (undo-tree-id272 . -44) (undo-tree-id273 . -44) (undo-tree-id274 . -44) (undo-tree-id275 . -44) (undo-tree-id276 . -44) (undo-tree-id277 . -44) (undo-tree-id278 . -44) (undo-tree-id279 . -44) (undo-tree-id280 . -44) (undo-tree-id281 . -44) (undo-tree-id282 . -44) (undo-tree-id283 . -44) (undo-tree-id284 . -44) (undo-tree-id285 . -44) (undo-tree-id286 . -44) (undo-tree-id287 . -44) (undo-tree-id288 . -44) (undo-tree-id289 . -44) (undo-tree-id290 . -44) (undo-tree-id291 . -44) (undo-tree-id292 . -44) (undo-tree-id293 . -44) (undo-tree-id294 . -44) (undo-tree-id295 . -44) (undo-tree-id296 . -44) (undo-tree-id297 . -44) (undo-tree-id298 . -44) (undo-tree-id299 . -44) 2328) nil (25900 714 337694 907000) 0 nil])
([nil nil (2300) nil (25900 747 188851 158000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2292) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("e" 0 1 (fontified t)) . -2293) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) 2294 (2292 . 2294) (t 25900 714 343681 185000)) nil (25900 747 188849 400000) 0 nil])
([nil nil ((2284 . 2292) (2284 . 2285) 2291) nil (25900 747 188832 322000) 0 nil])
([nil nil ((2292 . 2302)) nil (25900 747 188831 539000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -2300) (undo-tree-id300 . -1) (#("e" 0 1 (fontified t)) . -2301) (undo-tree-id301 . -1) 2302) nil (25900 747 188830 40000) 0 nil])
([nil nil ((2300 . 2317)) nil (25900 747 188819 685000) 0 nil])
([nil nil ((2317 . 2331)) nil (25900 747 188815 400000) 0 nil])
([nil nil ((#("        G.add_node(new_monomer_idx, monomer=new_monomer)
" 0 7 (fontified t) 7 14 (fontified t) 14 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 21 (fontified t) 21 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t) 56 57 (fontified t)) . 2332) (undo-tree-id338 . -46) 2378 (t 25900 747 196424 159000)) nil (25900 756 602185 920000) 0 nil])
([nil nil ((2292 . 2293) (t 25900 756 608636 748000)) nil (25900 772 191904 570000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 2377) (t 25900 772 192988 487000)) nil (25900 776 930536 956000) 0 nil])
([nil nil ((2377 . 2381)) nil (25900 776 930532 973000) 0 nil])
([nil nil ((#("            try:
" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 17 (fontified t)) . 2477) (undo-tree-id372 . -15) 2492 (t 25900 776 933095 409000)) nil (25900 910 370990 852000) 0 nil])
([nil nil ((#("            except KeyError:
                raise
" 0 1 (fontified t) 1 12 (fontified t) 12 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 45 (fontified t) 45 50 (face font-lock-keyword-face fontified t) 50 51 (fontified t)) . 2568) (undo-tree-id366 . -44) (undo-tree-id367 . -15) (undo-tree-id368 . -44) (undo-tree-id369 . -44) (undo-tree-id370 . -15) (undo-tree-id371 . -44) 2612) nil (25900 910 370989 564000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2489) (undo-tree-id364 . -3) (undo-tree-id365 . -3) 2492) nil (25900 910 370987 37000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2518)) nil (25900 910 370985 129000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2518)) nil (25900 910 370984 759000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . 2518)) nil (25900 910 370984 323000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2518)) nil (25900 910 370983 781000) 0 nil])
([nil nil ((#("            G.add_edges_from([(other_monomer_idx, new_monomer_idx, edge_attr)])
" 0 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t) 31 34 (fontified t) 34 37 (fontified t) 37 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-3-face) fontified t) 77 78 (face (rainbow-delimiters-depth-2-face) fontified t) 78 79 (face (rainbow-delimiters-depth-1-face) fontified t) 79 80 (fontified t)) . 2560) (undo-tree-id362 . 80) (undo-tree-id363 . -39) 2599) nil (25900 910 370982 936000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 2292)) nil (25900 910 370981 435000) 0 nil])
([nil nil ((#("        G.remove_node(monomer_idx)
" 0 15 (fontified t) 15 16 (fontified t) 16 18 (fontified t) 18 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-1-face) fontified t) 22 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t)) . 2560) (undo-tree-id361 . -8) 2568) nil (25900 910 370980 606000) 0 nil])
([nil nil ((#("        return G
" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 16 (fontified t) 16 17 (fontified t)) . 2560) (undo-tree-id339 . -13) (undo-tree-id340 . -15) (undo-tree-id341 . -16) (undo-tree-id342 . -13) (undo-tree-id343 . -13) (undo-tree-id344 . -13) (undo-tree-id345 . -13) (undo-tree-id346 . -13) (undo-tree-id347 . -13) (undo-tree-id348 . -13) (undo-tree-id349 . -13) (undo-tree-id350 . -13) (undo-tree-id351 . -13) (undo-tree-id352 . -13) (undo-tree-id353 . -13) (undo-tree-id354 . -13) (undo-tree-id355 . -13) (undo-tree-id356 . -13) (undo-tree-id357 . -13) (undo-tree-id358 . -13) (undo-tree-id359 . -13) (undo-tree-id360 . -13) 2573) nil (25900 910 370978 368000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2560)) nil (25900 910 370957 137000) 0 nil])
([nil nil ((#("create_new_graph=False" 0 17 (fontified t) 17 22 (face font-lock-constant-face fontified t)) . 2659) (t 25900 910 376094 635000)) nil (25900 1012 564760 126000) 0 nil])
([nil nil ((#("                       " 0 23 (fontified nil)) . 2635) (undo-tree-id458 . -23) (undo-tree-id459 . -23) (undo-tree-id460 . -23) (undo-tree-id461 . -23) (undo-tree-id462 . -23) (undo-tree-id463 . -23) (undo-tree-id464 . -23) (undo-tree-id465 . -23) (undo-tree-id466 . -23) (undo-tree-id467 . -23) (undo-tree-id468 . -23) (undo-tree-id469 . -23) (undo-tree-id470 . -23) (undo-tree-id471 . -23) (undo-tree-id472 . -23) (undo-tree-id473 . -23) (undo-tree-id474 . -23) (undo-tree-id475 . -23) (undo-tree-id476 . -23) (undo-tree-id477 . -23) (undo-tree-id478 . -23) (undo-tree-id479 . -23) (undo-tree-id480 . -23) (undo-tree-id481 . -23) (undo-tree-id482 . -23) (undo-tree-id483 . -23) (undo-tree-id484 . -23) (undo-tree-id485 . -23) (undo-tree-id486 . -23) (undo-tree-id487 . -23) (undo-tree-id488 . -23) (undo-tree-id489 . -23) (undo-tree-id490 . -23) (undo-tree-id491 . -23) (undo-tree-id492 . -23) (undo-tree-id493 . -23) (undo-tree-id494 . -23) (undo-tree-id495 . -23) (undo-tree-id496 . -23) (undo-tree-id497 . -23) (undo-tree-id498 . -23) (undo-tree-id499 . -23) (undo-tree-id500 . -23) (undo-tree-id501 . -23) (undo-tree-id502 . -23) (undo-tree-id503 . -23) (undo-tree-id504 . -23) (undo-tree-id505 . -23) (undo-tree-id506 . -23) (undo-tree-id507 . -23) (#("
" 0 1 (fontified t)) . -2635) 2612) nil (25900 1012 564757 528000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2634) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1)) nil (25900 1012 564732 135000) 0 nil])
([nil nil ((#("        G = copy.deepcopy(self) if create_new_graph else self
" 0 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 30 (face font-lock-keyword-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t) 32 34 (face font-lock-keyword-face fontified t) 34 52 (fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 61 (face font-lock-keyword-face fontified t) 61 62 (fontified t)) . 2723) (undo-tree-id508 . -45) (undo-tree-id509 . -35) (undo-tree-id510 . -61) (undo-tree-id511 . -45) (undo-tree-id512 . -45) (undo-tree-id513 . -45) (undo-tree-id514 . -45) (undo-tree-id515 . -45) (undo-tree-id516 . -45) (undo-tree-id517 . -45) (undo-tree-id518 . -45) (undo-tree-id519 . -45) (undo-tree-id520 . -45) (undo-tree-id521 . -45) (undo-tree-id522 . -45) (undo-tree-id523 . -45) (undo-tree-id524 . -45) (undo-tree-id525 . -45) (undo-tree-id526 . -45) (undo-tree-id527 . -45) (undo-tree-id528 . -45) (undo-tree-id529 . -35) (undo-tree-id530 . -51) (undo-tree-id531 . -45) (undo-tree-id532 . -45) (undo-tree-id533 . -45) (undo-tree-id534 . -45) (undo-tree-id535 . -45) (undo-tree-id536 . -45) (undo-tree-id537 . -45) (undo-tree-id538 . -45) (undo-tree-id539 . -45) (undo-tree-id540 . -45) (undo-tree-id541 . -45) (undo-tree-id542 . -45) (undo-tree-id543 . -45) (undo-tree-id544 . -45) (undo-tree-id545 . -45) (undo-tree-id546 . -45) (undo-tree-id547 . -45) 2768 (t 25900 1012 570379 409000)) nil (25900 1040 930494 847000) 0 nil])
([nil nil ((2673 . 2681)) nil (25900 1040 930466 244000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2681) (undo-tree-id553 . 1) (t 25900 1040 935012 11000)) nil (25900 1048 655562 245000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 2681) (undo-tree-id552 . 1)) nil (25900 1048 655559 929000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 2681) (undo-tree-id551 . 1)) nil (25900 1048 655558 933000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2681) (undo-tree-id550 . 1)) nil (25900 1048 655557 848000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 2681) (undo-tree-id549 . 1)) nil (25900 1048 655556 542000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2681) (undo-tree-id548 . 1)) nil (25900 1048 655554 820000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 2692)) nil (25900 1048 655546 430000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2692)) nil (25900 1048 655545 954000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 2692)) nil (25900 1048 655545 516000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 2692)) nil (25900 1048 655544 916000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 2692)) nil (25900 1048 655544 484000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2692)) nil (25900 1048 655543 982000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 2692)) nil (25900 1048 655543 11000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 2692)) nil (25900 1048 655542 341000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2692)) nil (25900 1048 655541 809000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 2692)) nil (25900 1048 655541 254000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 2692)) nil (25900 1048 655540 417000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 2692)) nil (25900 1048 655538 792000) 0 nil])
([nil nil ((2692 . 2693)) nil (25900 1048 655533 634000) 0 nil])
([nil nil ((#("is_degree_2_amino()" 0 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2694) (t 25900 1048 659184 171000)) nil (25900 1060 53614 943000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2686 . 2687) (nil fontified nil 2668 . 2687) (2668 . 2687)) nil (25900 1060 53614 264000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) rear-nonsticky t fontified t)) . 2686) (undo-tree-id573 . -1)) nil (25900 1060 53612 918000) 0 nil])
([nil nil ((2711 . 2712) (#("." 0 1 (fontified t)) . 2711) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1)) nil (25900 1060 53608 107000) 0 nil])
([nil nil ((303 . 308) (t 25900 1060 55438 96000) 302) nil (25900 1068 228160 942000) 0 nil])
([nil nil ((308 . 312)) nil (25900 1068 228160 134000) 0 nil])
([nil nil ((308 . 325) (#("is_d" 0 4 (fontified t)) . -308) (undo-tree-id574 . -4) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -2) (undo-tree-id584 . -2) (undo-tree-id585 . -2) (undo-tree-id586 . -2) (undo-tree-id587 . -2) (undo-tree-id588 . -2) (undo-tree-id589 . -2) (undo-tree-id590 . -2) (undo-tree-id591 . 4) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) (undo-tree-id596 . -3) (undo-tree-id597 . -3) (undo-tree-id598 . -3) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3) (undo-tree-id602 . -3) (undo-tree-id603 . -3) (undo-tree-id604 . -3) (undo-tree-id605 . -3) (undo-tree-id606 . -3) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (undo-tree-id610 . -4) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (undo-tree-id617 . -4) (undo-tree-id618 . -4) (undo-tree-id619 . -4) (undo-tree-id620 . -4) (undo-tree-id621 . -4) (undo-tree-id622 . -4) 312) nil (25900 1068 228157 215000) 0 nil])
([nil nil ((325 . 326)) nil (25900 1068 228128 266000) 0 nil])
([nil nil ((#("        try:
" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 2736) (undo-tree-id785 . -11) 2747 (t 25900 1068 231620 212000)) nil (25900 1092 182068 746000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2744) (undo-tree-id783 . -3) (undo-tree-id784 . -3) 2747) nil (25900 1092 182067 265000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2877) 2845) nil (25900 1092 182063 185000) 0 nil])
([nil nil ((#("        except ValueError:
            pass
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 25 (face font-lock-type-face fontified t) 25 27 (fontified t) 27 34 (fontified t) 34 35 (fontified t) 35 39 (fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t)) . 2937) (undo-tree-id773 . -43) (undo-tree-id774 . -25) (undo-tree-id775 . -43) (undo-tree-id776 . -43) (undo-tree-id777 . -9) (undo-tree-id778 . -26) (undo-tree-id779 . -8) (undo-tree-id780 . -43) (undo-tree-id781 . -25) (undo-tree-id782 . -43) 2980) nil (25900 1092 182061 418000) 0 nil])
([nil nil ((2937 . 2945) (2937 . 2938) 2953) nil (25900 1092 182056 248000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2941) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) 2945) nil (25900 1092 182053 709000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2937) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -4) (undo-tree-id627 . -4) (undo-tree-id628 . -4) (undo-tree-id629 . -4) (undo-tree-id630 . -4) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -4) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -4) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -4) (undo-tree-id640 . -4) (undo-tree-id641 . -4) (undo-tree-id642 . -4) (undo-tree-id643 . -4) (undo-tree-id644 . -4) (undo-tree-id645 . -4) (undo-tree-id646 . -4) (undo-tree-id647 . -4) (undo-tree-id648 . -4) (undo-tree-id649 . -4) (undo-tree-id650 . -4) (undo-tree-id651 . -4) (undo-tree-id652 . -4) (undo-tree-id653 . -4) (undo-tree-id654 . -4) (undo-tree-id655 . -4) (undo-tree-id656 . -4) (undo-tree-id657 . -4) (undo-tree-id658 . -4) (undo-tree-id659 . -4) (undo-tree-id660 . -4) (undo-tree-id661 . -4) (undo-tree-id662 . -4) (undo-tree-id663 . -4) (undo-tree-id664 . -4) (undo-tree-id665 . -4) (undo-tree-id666 . -4) (undo-tree-id667 . -4) (undo-tree-id668 . -4) (undo-tree-id669 . -4) (undo-tree-id670 . -4) (undo-tree-id671 . -4) (undo-tree-id672 . -4) (undo-tree-id673 . -4) (undo-tree-id674 . -4) (undo-tree-id675 . -4) (undo-tree-id676 . -4) (undo-tree-id677 . -4) (undo-tree-id678 . -4) (undo-tree-id679 . -4) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -4) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (undo-tree-id685 . -4) (undo-tree-id686 . -4) (undo-tree-id687 . -4) (undo-tree-id688 . -4) (undo-tree-id689 . -4) (undo-tree-id690 . -4) (undo-tree-id691 . -4) (undo-tree-id692 . -4) (undo-tree-id693 . -4) (undo-tree-id694 . -4) (undo-tree-id695 . -4) (undo-tree-id696 . -4) (undo-tree-id697 . -4) (undo-tree-id698 . -4) (undo-tree-id699 . -4) (undo-tree-id700 . -4) (undo-tree-id701 . -4) (undo-tree-id702 . -4) (undo-tree-id703 . -4) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -4) (undo-tree-id709 . -4) (undo-tree-id710 . -4) (undo-tree-id711 . -4) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (undo-tree-id715 . -4) (undo-tree-id716 . -4) (undo-tree-id717 . -4) (undo-tree-id718 . -4) (undo-tree-id719 . -4) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) 2941) nil (25900 1092 182000 850000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 2946) (t 25900 1092 188153 549000)) nil (25900 1119 1534 874000) 0 nil])
([nil nil ((2946 . 2951)) nil (25900 1119 1530 724000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2950) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (t 25900 1119 8750 182000)) nil (25900 1123 176485 922000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 2984)) nil (25900 1123 176468 316000) 0 nil])
([nil nil ((2984 . 2986)) nil (25900 1123 176467 595000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2985) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) 2986) nil (25900 1123 176465 292000) 0 nil])
([nil nil ((2985 . 2988)) nil (25900 1123 176445 200000) 0 nil])
([nil nil ((#("
        return G
" 0 9 (fontified t) 9 15 (face font-lock-keyword-face fontified t) 15 18 (fontified t)) . 3054) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) 3055 (t 25900 1123 184843 37000)) nil (25900 2128 657992 122000) 0 nil])
([nil nil ((#("                       new_monomer_idx: Union[MonomerId, None]=None,
" 0 12 (fontified t) 12 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 57 (fontified t) 57 61 (face font-lock-constant-face fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 63 (fontified t) 63 67 (face font-lock-constant-face fontified t) 67 69 (fontified t)) . 3161) (undo-tree-id863 . -23) 3184 (t 25900 2128 663011 553000)) nil (25900 2153 944534 348000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 3159)) nil (25900 2153 944532 745000) 0 nil])
([nil nil ((3159 . 3160) (#("                       " 0 23 (fontified nil)) . 3159) (undo-tree-id862 . -23) (#("
" 0 1 (fontified t)) . -3159) 3158) nil (25900 2153 944531 465000) 0 nil])
([nil nil ((#(" create_new_graph=True" 0 1 (fontified t) 1 18 (fontified t) 18 22 (face font-lock-constant-face fontified t)) . 3159) (undo-tree-id826 . -20) (undo-tree-id827 . -20) (undo-tree-id828 . -20) (undo-tree-id829 . -20) (undo-tree-id830 . -20) (undo-tree-id831 . -20) (undo-tree-id832 . -20) (undo-tree-id833 . -20) (undo-tree-id834 . -20) (undo-tree-id835 . -20) (undo-tree-id836 . -20) (undo-tree-id837 . -20) (undo-tree-id838 . -20) (undo-tree-id839 . -20) (undo-tree-id840 . -20) (undo-tree-id841 . -20) (undo-tree-id842 . -20) (undo-tree-id843 . -20) (undo-tree-id844 . -20) (undo-tree-id845 . -20) (undo-tree-id846 . -20) (undo-tree-id847 . -20) (undo-tree-id848 . -20) (undo-tree-id849 . -20) (undo-tree-id850 . -20) (undo-tree-id851 . -20) (undo-tree-id852 . -20) (undo-tree-id853 . -20) (undo-tree-id854 . -20) (undo-tree-id855 . -20) (undo-tree-id856 . -20) (undo-tree-id857 . -20) (undo-tree-id858 . -20) (undo-tree-id859 . -20) (undo-tree-id860 . -17) (undo-tree-id861 . -18)) nil (25900 2153 944526 417000) 0 nil])
([nil nil ((#(" -> MonomerGraph" 0 16 (fontified t)) . 2136) (undo-tree-id864 . -2) (undo-tree-id865 . -2) (undo-tree-id866 . -2) (undo-tree-id867 . -2) (undo-tree-id868 . -2) (undo-tree-id869 . -2) (undo-tree-id870 . -2) (t 25900 2153 951566 595000)) nil (25900 2161 956322 805000) 0 nil])
([nil nil ((#(" -> MonomerGraph" 0 15 (fontified t) 15 16 (fontified t)) . 2642) (t 25900 2161 959742 349000)) nil (25900 2165 926216 108000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 3139) (t 25900 2165 931829 522000)) nil (25900 2175 671966 38000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3139)) nil (25900 2175 671965 129000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 3139)) nil (25900 2175 671964 541000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 3139)) nil (25900 2175 671963 989000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 3139)) nil (25900 2175 671962 949000) 0 nil])
([nil nil (3139) nil (25900 2175 671961 397000) 0 nil])
([nil nil ((3139 . 3141)) nil (25900 2175 671956 746000) 0 nil])
([nil nil ((3142 . 3158) (t 25900 2175 680043 453000)) nil (25900 2187 211642 623000) 0 nil])
([nil nil ((3158 . 3179)) nil (25900 2187 211641 861000) 0 nil])
([nil nil ((3179 . 3180)) nil (25900 2187 211641 325000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-comment-face fontified t)) . -3179) (undo-tree-id871 . -1) 3180) nil (25900 2187 211639 878000) 0 nil])
([nil nil ((3179 . 3183)) nil (25900 2187 211627 498000) 0 nil])
([nil nil ((3229 . 3232) (t 25900 2187 216296 616000)) nil (25900 2206 749582 273000) 0 nil])
([nil nil ((3229 . 3246) (#("is_" 0 3 (fontified t)) . -3229) (undo-tree-id872 . -1) (undo-tree-id873 . -3) (undo-tree-id874 . 3) (undo-tree-id875 . -3) (undo-tree-id876 . -3) (undo-tree-id877 . -3) (undo-tree-id878 . -3) (undo-tree-id879 . -3) (undo-tree-id880 . -3) (undo-tree-id881 . -3) (undo-tree-id882 . -3) (undo-tree-id883 . -3) (undo-tree-id884 . -3) (undo-tree-id885 . -3) (undo-tree-id886 . -3) (undo-tree-id887 . -3) (undo-tree-id888 . -3) (undo-tree-id889 . -3) (undo-tree-id890 . -3) (undo-tree-id891 . -3) (undo-tree-id892 . -3) (undo-tree-id893 . -3) (undo-tree-id894 . -3) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -3) (undo-tree-id898 . -3) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -3) (undo-tree-id902 . -3) (undo-tree-id903 . -3) (undo-tree-id904 . -3) (undo-tree-id905 . -3) (undo-tree-id906 . -3) (undo-tree-id907 . -3) (undo-tree-id908 . -3) (undo-tree-id909 . -3) (undo-tree-id910 . -3) (undo-tree-id911 . -3) (undo-tree-id912 . -3) (undo-tree-id913 . -3) (undo-tree-id914 . -3) (undo-tree-id915 . -3) (undo-tree-id916 . -3) (undo-tree-id917 . -3) (undo-tree-id918 . -3) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) (undo-tree-id922 . -3) (undo-tree-id923 . -3) (undo-tree-id924 . -3) (undo-tree-id925 . -3) (undo-tree-id926 . -3) (undo-tree-id927 . -3) (undo-tree-id928 . -3) (undo-tree-id929 . -3) (undo-tree-id930 . -3) (undo-tree-id931 . -3) (undo-tree-id932 . -3) 3232) nil (25900 2206 749576 585000) 0 nil])
([nil nil ((#("is_degree_2_amino" 0 17 (fontified t)) . 3229) (undo-tree-id935 . -17) (undo-tree-id936 . -9) (undo-tree-id937 . -17) (undo-tree-id938 . -17) (undo-tree-id939 . -17) (undo-tree-id940 . -17) (undo-tree-id941 . -17) (undo-tree-id942 . -17) (undo-tree-id943 . -17) (undo-tree-id944 . -17) (undo-tree-id945 . -17) (undo-tree-id946 . -17) (undo-tree-id947 . -17) (undo-tree-id948 . -17) (undo-tree-id949 . -17) (undo-tree-id950 . -17) (undo-tree-id951 . -17) (undo-tree-id952 . -17) (undo-tree-id953 . -17) (undo-tree-id954 . -17) (undo-tree-id955 . -17) (undo-tree-id956 . -17) (undo-tree-id957 . -17) (undo-tree-id958 . -17) (undo-tree-id959 . -17) (undo-tree-id960 . -17) (undo-tree-id961 . -17) (undo-tree-id962 . -16) (undo-tree-id963 . -16) (undo-tree-id964 . -16) (undo-tree-id965 . -16) (undo-tree-id966 . -16) (undo-tree-id967 . -16) (undo-tree-id968 . -16) (undo-tree-id969 . -16) (undo-tree-id970 . -16) (undo-tree-id971 . -16) (undo-tree-id972 . -16) (undo-tree-id973 . -16) (undo-tree-id974 . -16) (undo-tree-id975 . -16) (undo-tree-id976 . -16) (undo-tree-id977 . -16) (undo-tree-id978 . -16) (undo-tree-id979 . -16) (undo-tree-id980 . -16) (undo-tree-id981 . -16) (undo-tree-id982 . -16) (undo-tree-id983 . -16) (undo-tree-id984 . -16) (undo-tree-id985 . -16) (undo-tree-id986 . -16) (undo-tree-id987 . -16) (undo-tree-id988 . -16) (undo-tree-id989 . -16) (undo-tree-id990 . -16) (undo-tree-id991 . -16) (undo-tree-id992 . -16) (undo-tree-id993 . -16) (undo-tree-id994 . -16) (undo-tree-id995 . -16) (undo-tree-id996 . -16) (undo-tree-id997 . -16) (undo-tree-id998 . -16) (undo-tree-id999 . -16) (undo-tree-id1000 . -16) (undo-tree-id1001 . -16) (undo-tree-id1002 . -16) (undo-tree-id1003 . -16) (undo-tree-id1004 . -16) (undo-tree-id1005 . -16) (undo-tree-id1006 . -17) (undo-tree-id1007 . -16) (undo-tree-id1008 . -16) (undo-tree-id1009 . -16) (undo-tree-id1010 . -16) (undo-tree-id1011 . -16) (undo-tree-id1012 . -16) (undo-tree-id1013 . -16) (undo-tree-id1014 . -16) (undo-tree-id1015 . -16) (undo-tree-id1016 . -16) (undo-tree-id1017 . -16) (undo-tree-id1018 . -16) (undo-tree-id1019 . -16) (undo-tree-id1020 . -16) (undo-tree-id1021 . -16) (undo-tree-id1022 . -16) (undo-tree-id1023 . -16) (undo-tree-id1024 . -16) (undo-tree-id1025 . -16) (undo-tree-id1026 . -16) (undo-tree-id1027 . -16) (undo-tree-id1028 . -16) (undo-tree-id1029 . -16) (undo-tree-id1030 . -16) (undo-tree-id1031 . -16) (undo-tree-id1032 . -16) (undo-tree-id1033 . -16) (undo-tree-id1034 . -16) (undo-tree-id1035 . -16) (undo-tree-id1036 . -16) (undo-tree-id1037 . -16) (undo-tree-id1038 . -16) (undo-tree-id1039 . -16) (undo-tree-id1040 . -16) (undo-tree-id1041 . -16) (undo-tree-id1042 . -16) (undo-tree-id1043 . -16) (undo-tree-id1044 . -16) (undo-tree-id1045 . -16) (undo-tree-id1046 . -16) (undo-tree-id1047 . -16) (undo-tree-id1048 . -16) (undo-tree-id1049 . -9) (undo-tree-id1050 . -9) (undo-tree-id1051 . -9) (undo-tree-id1052 . -9) (undo-tree-id1053 . -9) (undo-tree-id1054 . -9) (undo-tree-id1055 . -9) (undo-tree-id1056 . -9) (undo-tree-id1057 . -9) (undo-tree-id1058 . -9) 3238 (t 25900 2206 756725 402000)) nil (25900 2212 809646 865000) 0 nil])
([nil nil ((3229 . 3231)) nil (25900 2212 809433 960000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -3229) (undo-tree-id933 . -1) (#("w" 0 1 (fontified t)) . -3230) (undo-tree-id934 . -1) 3231) nil (25900 2212 809432 377000) 0 nil])
([nil nil ((3229 . 3240)) nil (25900 2212 809419 779000) 0 nil])
([nil nil ((#("new_monomer" 0 11 (fontified t)) . 3199) (t 25900 2212 816858 378000)) nil (25900 2217 529546 605000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3199)) nil (25900 2217 529540 685000) 0 nil])
([nil nil ((#("        G = copy.deepcopy(self) if create_new_graph else self
" 0 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 30 (face font-lock-keyword-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t) 32 34 (face font-lock-keyword-face fontified t) 34 52 (fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 61 (face font-lock-keyword-face fontified t) 61 62 (fontified t)) . 3325) (undo-tree-id1059 . -11) 3336 (t 25900 2217 532961 860000)) nil (25900 2262 594680 972000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 3296)) nil (25900 2262 594671 725000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 3296)) nil (25900 2262 594671 164000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3296)) nil (25900 2262 594670 366000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 3296)) nil (25900 2262 594669 694000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 3306)) nil (25900 2262 594669 208000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 3306)) nil (25900 2262 594668 703000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3306)) nil (25900 2262 594668 90000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 3306)) nil (25900 2269 212474 811000) 0 nil])
([nil nil ((#(" if new_monomer_idx is None else new_monomer_idx" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 27 (face font-lock-constant-face fontified t) 27 28 (fontified t) 28 30 (face font-lock-keyword-face fontified t) 30 32 (face font-lock-keyword-face fontified t) 32 48 (fontified t)) . 3520) (undo-tree-id1060 . -4) (undo-tree-id1061 . -48) (undo-tree-id1062 . -48) (undo-tree-id1063 . -33) (undo-tree-id1064 . -48) (undo-tree-id1065 . -43) (undo-tree-id1066 . -48)) nil (25900 2314 620429 386000) 0 nil] [nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 3332)) ((3332 . 3333)) (25900 2268 983387 39000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3587) (t 25900 2287 754502 482000)) nil (25900 2334 959187 947000) 0 nil] [nil nil ((#("max(G.nodes) + 1" 0 3 (face font-lock-builtin-face fontified t) 3 4 (face (rainbow-delimiters-depth-1-face) fontified t) 4 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 16 (fontified t)) . 3504) (undo-tree-id1152 . -15) (t 25900 2287 754502 482000)) ((3504 . 3520)) (25900 2313 382644 802000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 3332)) ((3332 . 3333)) (25900 2268 752002 626000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3587)) nil (25900 2334 959187 120000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3539 . 3540) (nil fontified nil 3524 . 3540) (3524 . 3540)) ((#("max(G.nodes) + 1" 0 3 (face font-lock-builtin-face fontified nil) 3 4 (face (rainbow-delimiters-depth-2-face) fontified nil) 4 11 (fontified nil) 11 12 (face (rainbow-delimiters-depth-2-face) fontified nil) 12 15 (fontified nil) 15 16 (rear-nonsticky nil fontified nil)) . 3524) (undo-tree-id1153 . -15) (undo-tree-id1154 . -16) (undo-tree-id1155 . -4) (undo-tree-id1156 . -16) (undo-tree-id1157 . -16) (undo-tree-id1158 . -16) (undo-tree-id1159 . -16) (undo-tree-id1160 . -16) (undo-tree-id1161 . -16) (undo-tree-id1162 . -16) (undo-tree-id1163 . -16) (undo-tree-id1164 . -16) (undo-tree-id1165 . -16) (undo-tree-id1166 . -16) (undo-tree-id1167 . -16) (undo-tree-id1168 . -16) (undo-tree-id1169 . -16) (undo-tree-id1170 . -16) (undo-tree-id1171 . -16) (undo-tree-id1172 . -16) (undo-tree-id1173 . -16) (undo-tree-id1174 . -16) (undo-tree-id1175 . -16) (undo-tree-id1176 . -16) (undo-tree-id1177 . -16) (undo-tree-id1178 . -16) (undo-tree-id1179 . -16) (undo-tree-id1180 . -16) (undo-tree-id1181 . -16) (undo-tree-id1182 . -16) (undo-tree-id1183 . -16) (undo-tree-id1184 . -16) (undo-tree-id1185 . -16) (undo-tree-id1186 . -16) (undo-tree-id1187 . -16) (undo-tree-id1188 . -16) (undo-tree-id1189 . -16) (undo-tree-id1190 . -16) (undo-tree-id1191 . -16) (undo-tree-id1192 . -16) (undo-tree-id1193 . -16) (undo-tree-id1194 . -16) (undo-tree-id1195 . -16) (undo-tree-id1196 . -16) (undo-tree-id1197 . -16) (undo-tree-id1198 . -16) (undo-tree-id1199 . -16) (undo-tree-id1200 . -16) (undo-tree-id1201 . -16) (undo-tree-id1202 . -16) (undo-tree-id1203 . -16) (undo-tree-id1204 . -16) (undo-tree-id1205 . -16) (undo-tree-id1206 . -16) (undo-tree-id1207 . -16) (undo-tree-id1208 . -16) (undo-tree-id1209 . -16) (undo-tree-id1210 . -16) (undo-tree-id1211 . -16) (undo-tree-id1212 . -16) (undo-tree-id1213 . -16) (undo-tree-id1214 . -16) (undo-tree-id1215 . -16) (undo-tree-id1216 . -16) (undo-tree-id1217 . -16) (undo-tree-id1218 . -16) (undo-tree-id1219 . -16) (undo-tree-id1220 . -16) (undo-tree-id1221 . -16) (undo-tree-id1222 . -16) (undo-tree-id1223 . -16) (undo-tree-id1224 . -16) (undo-tree-id1225 . -16) (undo-tree-id1226 . -16) (undo-tree-id1227 . -16) (undo-tree-id1228 . -16) (undo-tree-id1229 . -16) (undo-tree-id1230 . -16) (undo-tree-id1231 . -16) (undo-tree-id1232 . -16) (undo-tree-id1233 . -16) (undo-tree-id1234 . -16) (undo-tree-id1235 . -16) (undo-tree-id1236 . -16) (undo-tree-id1237 . -16) (nil rear-nonsticky t 3539 . 3540)) (25900 2313 90306 884000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3332)) ((3332 . 3333)) (25900 2268 388526 166000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3587)) nil (25900 2334 959186 418000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3540)) ((3540 . 3541)) (25900 2312 876819 343000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 3332)) ((3332 . 3333)) (25900 2268 36728 483000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3587)) nil (25900 2334 959185 595000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3540)) ((3540 . 3541)) (25900 2312 661355 473000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 3411)) ((3411 . 3412)) (25900 2267 732348 905000) 0 nil])
([nil nil ((#("        mon1_idx, mon2_idx = e
" 0 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 18 (fontified t) 18 23 (face font-lock-variable-name-face fontified t) 23 26 (face font-lock-variable-name-face fontified t) 26 31 (fontified t)) . 3285) (undo-tree-id1238 . -15) 3300) nil (25900 2334 959184 704000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . 3540)) ((3540 . 3541)) (25900 2312 453439 183000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 3411)) ((3411 . 3412)) (25900 2267 439870 720000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 3498)) nil (25900 2334 959177 647000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 3540)) ((3540 . 3541)) (25900 2312 265447 233000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3411)) ((3411 . 3412)) (25900 2266 991712 18000) 0 nil])
([nil nil ((3498 . 3502)) nil (25900 2334 959174 44000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 3540)) ((3540 . 3541)) (25900 2312 68385 744000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 3411)) ((3411 . 3412) (t 25900 2262 597950 603000)) (25900 2262 594656 956000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 3477) (t 25900 2334 963497 695000)) nil (25900 2340 277866 220000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3540)) ((3540 . 3541)) (25900 2311 829484 484000) 0 nil])
nil
([nil nil ((3477 . 3481)) nil (25900 2340 277862 243000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 3540)) ((3540 . 3541)) (25900 2311 517262 235000) 0 nil])
([nil nil ((3597 . 3605) (t 25900 2340 283584 128000)) nil (25900 2365 835445 432000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3540)) ((3540 . 3541)) (25900 2311 84750 267000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3605) (undo-tree-id1321 . 1)) nil (25900 2365 835444 862000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 3540) (undo-tree-id1151 . -1)) ((3540 . 3541)) (25900 2310 474529 203000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3605) (undo-tree-id1320 . 1)) nil (25900 2365 835444 55000) 0 nil])
([nil nil ((#("        new_index = 
" 0 8 (fontified t) 8 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 21 (fontified t)) . 3484) (undo-tree-id1067 . -19) (undo-tree-id1068 . -19) (undo-tree-id1069 . -19) (undo-tree-id1070 . -19) (undo-tree-id1071 . -19) (undo-tree-id1072 . -19) (undo-tree-id1073 . -19) (undo-tree-id1074 . -19) (undo-tree-id1075 . -19) (undo-tree-id1076 . -8) (undo-tree-id1077 . -20) (undo-tree-id1078 . -8) (undo-tree-id1079 . -8) (undo-tree-id1080 . -8) (undo-tree-id1081 . -20) (undo-tree-id1082 . -20) (undo-tree-id1083 . -8) (undo-tree-id1084 . -20) (undo-tree-id1085 . -20) (undo-tree-id1086 . -8) (undo-tree-id1087 . -20) (undo-tree-id1088 . -8) (undo-tree-id1089 . -8) (undo-tree-id1090 . -8) (undo-tree-id1091 . -20) (undo-tree-id1092 . -20) (undo-tree-id1093 . -8) (undo-tree-id1094 . -20) (undo-tree-id1095 . -8) (undo-tree-id1096 . -8) (undo-tree-id1097 . -20) (undo-tree-id1098 . -8) (undo-tree-id1099 . -8) (undo-tree-id1100 . -8) (undo-tree-id1101 . -8) (undo-tree-id1102 . -20) (undo-tree-id1103 . -8) (undo-tree-id1104 . -8) (undo-tree-id1105 . -20) (undo-tree-id1106 . -8) (undo-tree-id1107 . -20) (undo-tree-id1108 . -8) (undo-tree-id1109 . -8) (undo-tree-id1110 . -8) (undo-tree-id1111 . -8) (undo-tree-id1112 . -20) (undo-tree-id1113 . -20) (undo-tree-id1114 . -20) (undo-tree-id1115 . -8) (undo-tree-id1116 . -20) (undo-tree-id1117 . -8) (undo-tree-id1118 . -8) (undo-tree-id1119 . -8) (undo-tree-id1120 . -20) (undo-tree-id1121 . -20) (undo-tree-id1122 . -8) (undo-tree-id1123 . -20) (undo-tree-id1124 . -8) (undo-tree-id1125 . -8) (undo-tree-id1126 . -20) (undo-tree-id1127 . -8) (undo-tree-id1128 . -8) (undo-tree-id1129 . -20) (undo-tree-id1130 . -21) (undo-tree-id1131 . -19) (undo-tree-id1132 . -20) (undo-tree-id1133 . -19) (undo-tree-id1134 . -19) (undo-tree-id1135 . -19) (undo-tree-id1136 . -19) (undo-tree-id1137 . -19) (undo-tree-id1138 . -19) (undo-tree-id1139 . -19) (undo-tree-id1140 . -19) (undo-tree-id1141 . -19) (undo-tree-id1142 . -19) (undo-tree-id1143 . -19) (undo-tree-id1144 . -19) (undo-tree-id1145 . -19) (undo-tree-id1146 . -19) (undo-tree-id1147 . -19) (undo-tree-id1148 . -19) (undo-tree-id1149 . -19) (undo-tree-id1150 . -19) 3503) ((3484 . 3505)) (25900 2310 474106 96000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 3605) (undo-tree-id1319 . 1)) nil (25900 2365 835443 125000) 0 nil])
nil
([nil nil ((#("e" 0 1 (fontified t)) . 3605) (undo-tree-id1318 . 1)) nil (25900 2365 835442 124000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 3605) (undo-tree-id1316 . 1) (undo-tree-id1317 . -1)) nil (25900 2365 835440 936000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3604) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1)) nil (25900 2365 835437 426000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3604) (undo-tree-id1245 . 1)) nil (25900 2365 835324 907000) 0 nil])
([nil nil ((3604 . 3605)) nil (25900 2365 835323 845000) 0 nil])
([nil nil ((3616 . 3617)) nil (25900 2365 835322 796000) 0 nil])
([nil nil ((#("]['monomer']" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t) 1 2 (face (rainbow-delimiters-unmatched-face) fontified t) 2 11 (face font-lock-string-face fontified t) 11 12 (face (rainbow-delimiters-unmatched-face) fontified t)) . 3617) (undo-tree-id1239 . 12) (undo-tree-id1240 . -1) (undo-tree-id1241 . -12) (undo-tree-id1242 . -12) (undo-tree-id1243 . -12) (undo-tree-id1244 . -1)) nil (25900 2365 835318 725000) 0 nil])
([nil nil ((3595 . 3599) (t 25900 2365 840003 147000)) nil (25900 2372 90125 523000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 3599) (undo-tree-id1322 . 1)) nil (25900 2372 90121 241000) 0 nil])
([nil nil ((#("omer" 0 4 (fontified t)) . 3611) (t 25900 2372 96106 652000)) nil (25900 2376 948417 54000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3653) (t 25900 2376 956187 311000)) nil (25900 2405 676196 564000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3653)) nil (25900 2405 676196 57000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3653)) nil (25900 2405 676195 550000) 0 nil])
([nil nil ((3650 . 3654) (#("monr1_idx" 0 9 (fontified t)) . 3650) (undo-tree-id1323 . -3) (undo-tree-id1324 . -2) (undo-tree-id1325 . -3) (undo-tree-id1326 . -3) (undo-tree-id1327 . -3) (undo-tree-id1328 . -3) (undo-tree-id1329 . -3) (undo-tree-id1330 . -3) (undo-tree-id1331 . -3) (undo-tree-id1332 . -3) (undo-tree-id1333 . -3) (undo-tree-id1334 . -3) (undo-tree-id1335 . -3) (undo-tree-id1336 . -3) (undo-tree-id1337 . -3) (undo-tree-id1338 . -3) (undo-tree-id1339 . -3) (undo-tree-id1340 . -3) (undo-tree-id1341 . -3) (undo-tree-id1342 . -3) (undo-tree-id1343 . -3) (undo-tree-id1344 . -3) (undo-tree-id1345 . -3) (undo-tree-id1346 . -3) (undo-tree-id1347 . -3) (undo-tree-id1348 . -3) (undo-tree-id1349 . -3) (undo-tree-id1350 . -3) (undo-tree-id1351 . -3) (undo-tree-id1352 . -3) (undo-tree-id1353 . -3) (undo-tree-id1354 . -3) (undo-tree-id1355 . -3) (undo-tree-id1356 . -3) (undo-tree-id1357 . -3) (undo-tree-id1358 . -3) (undo-tree-id1359 . -3) (undo-tree-id1360 . -3) (undo-tree-id1361 . -3) (undo-tree-id1362 . -3) (undo-tree-id1363 . -3) (undo-tree-id1364 . -3) (undo-tree-id1365 . -3) (undo-tree-id1366 . -3) (undo-tree-id1367 . -3) (undo-tree-id1368 . -3) (undo-tree-id1369 . -3) (undo-tree-id1370 . -3) (undo-tree-id1371 . -3) (undo-tree-id1372 . -3) (undo-tree-id1373 . -3) (undo-tree-id1374 . -3) (undo-tree-id1375 . -3) (undo-tree-id1376 . -3) (undo-tree-id1377 . -3) (undo-tree-id1378 . -3) (undo-tree-id1379 . -3) (undo-tree-id1380 . -3) (undo-tree-id1381 . -3) (undo-tree-id1382 . -3) (undo-tree-id1383 . -3) (undo-tree-id1384 . -3) (undo-tree-id1385 . -3) (undo-tree-id1386 . -3) (undo-tree-id1387 . -3) (undo-tree-id1388 . -3) (undo-tree-id1389 . -3) (undo-tree-id1390 . -3) (undo-tree-id1391 . -3) (undo-tree-id1392 . -3) (undo-tree-id1393 . -3) (undo-tree-id1394 . -3) (undo-tree-id1395 . -3) (undo-tree-id1396 . -3) (undo-tree-id1397 . -3) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) (undo-tree-id1401 . -3) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -3) (undo-tree-id1406 . -3) (undo-tree-id1407 . -9) (undo-tree-id1408 . -3) (undo-tree-id1409 . -3) (undo-tree-id1410 . -3) (undo-tree-id1411 . -3) (undo-tree-id1412 . -3) (undo-tree-id1413 . -3) (undo-tree-id1414 . -3) (undo-tree-id1415 . -2) (undo-tree-id1416 . -2) (undo-tree-id1417 . -2) (undo-tree-id1418 . -2) (undo-tree-id1419 . -2) (undo-tree-id1420 . -2) (undo-tree-id1421 . -2) (undo-tree-id1422 . -2) (undo-tree-id1423 . -2) (undo-tree-id1424 . -2) (undo-tree-id1425 . -2) (undo-tree-id1426 . -2) (undo-tree-id1427 . -2) (undo-tree-id1428 . -2) (undo-tree-id1429 . -2) (undo-tree-id1430 . -2) (undo-tree-id1431 . -2) (undo-tree-id1432 . -2) (undo-tree-id1433 . -2) (undo-tree-id1434 . -2) (undo-tree-id1435 . -2) (undo-tree-id1436 . -2) (undo-tree-id1437 . -2) (undo-tree-id1438 . -2) (undo-tree-id1439 . -2) (undo-tree-id1440 . -2) (undo-tree-id1441 . -2) (undo-tree-id1442 . -2) (undo-tree-id1443 . -2) (undo-tree-id1444 . -2) (undo-tree-id1445 . -2) (undo-tree-id1446 . -2) (undo-tree-id1447 . -2) (undo-tree-id1448 . -2) (undo-tree-id1449 . -2) (undo-tree-id1450 . -2) (undo-tree-id1451 . -2) 3652) nil (25900 2405 676191 940000) 0 nil])
([nil nil ((#("monomer2_idx" 0 12 (fontified t)) . 3656)) nil (25900 2405 676130 878000) 0 nil])
([nil nil ((3656 . 3660)) nil (25900 2405 676126 637000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 3646) (t 25900 2405 684668 405000)) nil (25900 2548 862206 555000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 3646)) nil (25900 2548 862206 95000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . 3646)) nil (25900 2548 862205 690000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3646)) nil (25900 2548 862205 302000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3646)) nil (25900 2548 862204 815000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3646)) nil (25900 2548 862204 363000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 3646)) nil (25900 2548 862203 964000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 3646)) nil (25900 2548 862203 550000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 3646)) nil (25900 2548 862203 149000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3646)) nil (25900 2548 862202 676000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3646)) nil (25900 2548 862202 337000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3646)) nil (25900 2548 862201 905000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 3646)) nil (25900 2548 862201 456000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 3646)) nil (25900 2548 862200 965000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 3646) (undo-tree-id1465 . 1)) nil (25900 2548 862200 522000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3646) (undo-tree-id1464 . 1)) nil (25900 2548 862199 820000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 3646) (undo-tree-id1463 . 1)) nil (25900 2551 121090 604000) 0 nil])
([nil nil ((3646 . 3653)) nil (25900 2559 31026 124000) 0 nil] [nil nil ((#("m" 0 1 (fontified t)) . 3646) (undo-tree-id1462 . 1)) ((3646 . 3647)) (25900 2550 737321 76000) 0 nil])
([nil nil ((3652 . 3655)) nil (25900 2559 31025 439000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3646) (undo-tree-id1461 . 1)) ((3646 . 3647)) (25900 2550 545135 96000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -3652) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (#("e" 0 1 (fontified t)) . -3653) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -3654) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) 3655) nil (25900 2559 31019 795000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3646) (undo-tree-id1460 . 1)) ((3646 . 3647)) (25900 2550 366722 271000) 0 nil])
([nil nil ((3652 . 3655)) nil (25900 2559 30832 160000) 0 nil])
([nil nil ((#("o" 0 1 (fontified nil)) . 3646) (undo-tree-id1459 . 1)) ((3646 . 3647)) (25900 2550 181898 683000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 3644) (t 25900 2559 35347 306000)) nil (25900 2562 176043 213000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3646) (undo-tree-id1458 . 1)) ((3646 . 3647)) (25900 2550 18623 977000) 0 nil])
([nil nil ((3644 . 3648)) nil (25900 2562 176039 445000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3646) (undo-tree-id1457 . 1)) ((3646 . 3647)) (25900 2549 845347 854000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3680) (t 25900 2562 183404 32000)) nil (25900 2569 377041 364000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3646) (undo-tree-id1456 . 1)) ((3646 . 3647)) (25900 2549 681685 481000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3680)) nil (25900 2569 377039 551000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 3646) (undo-tree-id1455 . 1)) ((3646 . 3647)) (25900 2549 497768 264000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3680)) nil (25900 2569 377038 74000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 3646) (undo-tree-id1454 . 1)) ((3646 . 3647)) (25900 2549 340748 543000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3680)) nil (25900 2569 377032 482000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3646) (undo-tree-id1453 . 1)) ((3646 . 3647)) (25900 2548 862399 494000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 3588) (t 25900 2569 383534 12000)) nil (25900 2583 551944 613000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 3646) (undo-tree-id1452 . 1)) ((3646 . 3647)) (25900 2548 862184 638000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 3588)) nil (25900 2583 551943 911000) 0 nil])
nil
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3588)) nil (25900 2583 551943 373000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 3588)) nil (25900 2583 551942 745000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 3628)) nil (25900 2583 551942 267000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 3628)) nil (25900 2583 551941 721000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3628)) nil (25900 2583 551940 615000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 3628)) nil (25900 2583 551935 623000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3723) (t 25900 2583 559790 874000)) nil (25900 2590 295924 988000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3723)) nil (25900 2590 295924 193000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3723)) nil (25900 2590 295923 208000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3723)) nil (25900 2590 295918 665000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 4189) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (t 25900 2590 303913 500000)) nil (25900 2617 755436 963000) 0 nil])
([nil nil ((4189 . 4197)) nil (25900 2617 755435 548000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -4194) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (#("n" 0 1 (fontified t)) . -4195) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (#("d" 0 1 (fontified t)) . -4196) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) 4197) nil (25900 2617 755429 381000) 0 nil])
([nil nil ((4194 . 4195)) nil (25900 2617 755237 358000) 0 nil])
([nil nil ((4189 . 4198) (#("new_in" 0 6 (fontified t)) . -4189) (undo-tree-id1597 . -6) (undo-tree-id1598 . -5) (undo-tree-id1599 . -5) (undo-tree-id1600 . -5) (undo-tree-id1601 . -5) (undo-tree-id1602 . -5) (undo-tree-id1603 . -5) (undo-tree-id1604 . -5) (undo-tree-id1605 . -5) (undo-tree-id1606 . -5) (undo-tree-id1607 . -5) (undo-tree-id1608 . -5) (undo-tree-id1609 . -5) (undo-tree-id1610 . -5) (undo-tree-id1611 . -5) (undo-tree-id1612 . -5) (undo-tree-id1613 . -5) (undo-tree-id1614 . -5) (undo-tree-id1615 . -5) (undo-tree-id1616 . -5) (undo-tree-id1617 . -5) (undo-tree-id1618 . -5) (undo-tree-id1619 . -5) (undo-tree-id1620 . -5) (undo-tree-id1621 . -5) (undo-tree-id1622 . -5) (undo-tree-id1623 . -5) (undo-tree-id1624 . -5) (undo-tree-id1625 . -5) (undo-tree-id1626 . -5) (undo-tree-id1627 . -5) (undo-tree-id1628 . -5) (undo-tree-id1629 . -5) (undo-tree-id1630 . -5) (undo-tree-id1631 . -5) (undo-tree-id1632 . -5) (undo-tree-id1633 . -5) (undo-tree-id1634 . -5) (undo-tree-id1635 . -5) (undo-tree-id1636 . -5) (undo-tree-id1637 . -5) (undo-tree-id1638 . -5) (undo-tree-id1639 . -5) (undo-tree-id1640 . -5) (undo-tree-id1641 . -5) (undo-tree-id1642 . -5) (undo-tree-id1643 . -5) (undo-tree-id1644 . -5) (undo-tree-id1645 . -5) (undo-tree-id1646 . -5) (undo-tree-id1647 . -5) (undo-tree-id1648 . -5) (undo-tree-id1649 . -5) (undo-tree-id1650 . -5) (undo-tree-id1651 . -5) (undo-tree-id1652 . -5) (undo-tree-id1653 . -5) (undo-tree-id1654 . -5) (undo-tree-id1655 . -5) (undo-tree-id1656 . -5) (undo-tree-id1657 . -5) (undo-tree-id1658 . -5) (undo-tree-id1659 . -5) (undo-tree-id1660 . -5) (undo-tree-id1661 . -5) (undo-tree-id1662 . -5) (undo-tree-id1663 . -5) (undo-tree-id1664 . -5) (undo-tree-id1665 . -5) (undo-tree-id1666 . -5) (undo-tree-id1667 . -5) (undo-tree-id1668 . -5) (undo-tree-id1669 . -5) (undo-tree-id1670 . -5) (undo-tree-id1671 . -5) (undo-tree-id1672 . -5) (undo-tree-id1673 . -5) (undo-tree-id1674 . -5) (undo-tree-id1675 . -5) (undo-tree-id1676 . -5) (undo-tree-id1677 . -5) (undo-tree-id1678 . -5) (undo-tree-id1679 . -5) (undo-tree-id1680 . -5) (undo-tree-id1681 . -5) (undo-tree-id1682 . -5) (undo-tree-id1683 . -5) (undo-tree-id1684 . -5) (undo-tree-id1685 . -5) (undo-tree-id1686 . -5) (undo-tree-id1687 . -5) (undo-tree-id1688 . -5) (undo-tree-id1689 . -5) (undo-tree-id1690 . -5) (undo-tree-id1691 . -5) (undo-tree-id1692 . -5) (undo-tree-id1693 . -5) (undo-tree-id1694 . -5) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -5) (undo-tree-id1698 . -5) (undo-tree-id1699 . -5) (undo-tree-id1700 . -5) (undo-tree-id1701 . -5) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (undo-tree-id1704 . 6) (undo-tree-id1705 . -6) (undo-tree-id1706 . -6) (undo-tree-id1707 . -6) (undo-tree-id1708 . -6) (undo-tree-id1709 . -6) (undo-tree-id1710 . -6) (undo-tree-id1711 . -6) (undo-tree-id1712 . -6) (undo-tree-id1713 . -6) (undo-tree-id1714 . -6) (undo-tree-id1715 . -6) (undo-tree-id1716 . -6) (undo-tree-id1717 . -6) (undo-tree-id1718 . -6) (undo-tree-id1719 . -6) (undo-tree-id1720 . -6) 4195) nil (25900 2617 755226 248000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 4156) (t 25900 2617 764415 576000)) nil (25900 2622 89366 404000) 0 nil])
([nil nil ((4156 . 4160)) nil (25900 2622 89360 810000) 0 nil])
([nil nil ((3559 . 3566) (t 25900 2622 96495 178000)) nil (25900 2683 814928 149000) 0 nil])
([nil nil ((3592 . 3599) (t 25900 2683 817640 356000)) nil (25900 2715 981565 79000) 0 nil])
([nil nil ((3639 . 3646) (t 25900 2715 986244 902000)) nil (25900 2721 985920 672000) 0 nil])
([nil nil ((3730 . 3744) (3711 . 3730) (3699 . 3711) (3699 . 3700) 3717 (t 25900 2721 990358 283000)) nil (25900 2759 304156 82000) 0 nil])
([nil nil ((3734 . 3735) (#("c" 0 1 (fontified t)) . 3734)) nil (25900 2759 304154 955000) 0 nil])
([nil nil ((#("BindingSiteType.AMINO_C in mon.binding_sites:" 0 4 (fontified t) 4 24 (fontified t) 24 26 (face font-lock-keyword-face fontified t) 26 45 (fontified t)) . 3760)) nil (25900 2759 304154 226000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3788 . 3789) (nil fontified nil 3744 . 3789) (3744 . 3789) 3743) nil (25900 2759 304153 624000) 0 nil])
([nil nil ((#(":" 0 1 (rear-nonsticky t fontified t)) . 3788) (undo-tree-id1943 . -1)) nil (25900 2759 304152 265000) 0 nil])
([nil nil ((3788 . 3790)) nil (25900 2759 304146 165000) 0 nil])
([nil nil ((3790 . 3807)) nil (25900 2759 304145 748000) 0 nil])
([nil nil ((3807 . 3812)) nil (25900 2759 304144 991000) 0 nil])
([nil nil ((3812 . 3826)) nil (25900 2759 304140 907000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-variable-name-face fontified t)) . 3466) (t 25900 2759 311066 710000)) nil (25900 2910 62196 554000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3467)) nil (25900 2910 62196 126000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3514)) nil (25900 2910 62195 669000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -3515) (undo-tree-id1945 . -1) 3516 (3514 . 3516)) nil (25900 2910 62195 34000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3518)) nil (25900 2910 62193 140000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3519)) nil (25900 2910 62192 511000) 0 nil])
([nil nil ((3740 . 3759) (#("n" 0 1 (fontified t)) . -3740) (undo-tree-id1944 . -1) 3741 (3740 . 3741)) nil (25900 2910 62191 730000) 0 nil])
([nil nil ((3736 . 3738)) nil (25900 2910 62185 267000) 0 nil])
([nil nil ((3739 . 3755) (#(" " 0 1 (fontified nil)) . 3739) (3738 . 3739)) nil (25900 2910 62180 567000) 0 nil])
([nil nil ((3777 . 3782) (t 25900 2910 65985 165000)) nil (25900 2923 140192 944000) 0 nil])
([nil nil ((3782 . 3789)) nil (25900 2923 140192 253000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -3788) (undo-tree-id1946 . -1) 3789) nil (25900 2923 140190 522000) 0 nil])
([nil nil ((3788 . 3795)) nil (25900 2923 140178 319000) 0 nil])
([nil nil ((3818 . 3819) (t 25900 2923 146242 154000)) nil (25900 2925 853605 58000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3819) (undo-tree-id1969 . 1) (t 25900 2925 858295 504000)) nil (25900 2972 483851 890000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-keyword-face fontified t)) . 3819) (undo-tree-id1968 . 1)) nil (25900 2972 483850 170000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3819) (undo-tree-id1967 . 1)) nil (25900 2972 483848 641000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3819) (undo-tree-id1966 . 1)) nil (25900 2972 483847 461000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3819) (undo-tree-id1965 . 1)) nil (25900 2972 483845 915000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3819) (undo-tree-id1964 . 1)) nil (25900 2972 483844 625000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3819) (undo-tree-id1963 . 1)) nil (25900 2972 483843 130000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3819) (undo-tree-id1962 . 1)) nil (25900 2972 483841 831000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 3819) (undo-tree-id1961 . 1)) nil (25900 2972 483840 70000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 3819) (undo-tree-id1960 . 1)) nil (25900 2972 483838 165000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3819) (undo-tree-id1959 . 1)) nil (25900 2972 483836 699000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 3819) (undo-tree-id1958 . 1)) nil (25900 2972 483833 24000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 3819) (undo-tree-id1957 . 1)) nil (25900 2972 483831 795000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3819) (undo-tree-id1956 . 1)) nil (25900 2972 483830 645000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 3819) (undo-tree-id1955 . 1)) nil (25900 2972 483829 195000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 3819) (undo-tree-id1954 . 1)) nil (25900 2972 483827 433000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 3819) (undo-tree-id1953 . 1)) nil (25900 2972 483825 897000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 3819) (undo-tree-id1952 . 1)) nil (25900 2972 483824 600000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 3819) (undo-tree-id1951 . 1)) nil (25900 2972 483823 436000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3819) (undo-tree-id1950 . 1)) nil (25900 2972 483822 275000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 3819) (undo-tree-id1948 . 1) (undo-tree-id1949 . -1)) nil (25900 2972 483820 949000) 0 nil])
([nil nil ((3777 . 3783)) nil (25900 2972 483818 77000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -3782) (undo-tree-id1947 . -1) 3783) nil (25900 2972 483815 882000) 0 nil])
([nil nil ((3782 . 3784)) nil (25900 2972 483803 676000) 0 nil])
([nil nil ((3686 . 3693) (t 25900 2972 491216 319000)) nil (25900 3002 960690 360000) 0 nil])
([nil nil ((#("            if 
" 0 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 16 (fontified t)) . 3872) (undo-tree-id2045 . -14) 3886 (t 25900 3002 967821 472000)) nil (25900 3020 121067 126000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3884) (undo-tree-id2042 . -2) (undo-tree-id2043 . -2) (undo-tree-id2044 . -4) 3886) nil (25900 3020 121065 829000) 0 nil])
([nil nil ((3872 . 3884) (3872 . 3873) 3884) nil (25900 3020 121063 402000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3880) (undo-tree-id2028 . -4) (undo-tree-id2029 . -4) (undo-tree-id2030 . -4) (undo-tree-id2031 . -4) (undo-tree-id2032 . -4) (undo-tree-id2033 . -4) (undo-tree-id2034 . -4) (undo-tree-id2035 . -4) (undo-tree-id2036 . -4) (undo-tree-id2037 . -4) (undo-tree-id2038 . -4) (undo-tree-id2039 . -4) (undo-tree-id2040 . -4) (undo-tree-id2041 . -4) 3884) nil (25900 3020 121062 247000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3876) (undo-tree-id2004 . -4) (undo-tree-id2005 . -4) (undo-tree-id2006 . -4) (undo-tree-id2007 . -4) (undo-tree-id2008 . -4) (undo-tree-id2009 . -4) (undo-tree-id2010 . -4) (undo-tree-id2011 . -4) (undo-tree-id2012 . -4) (undo-tree-id2013 . -4) (undo-tree-id2014 . -4) (undo-tree-id2015 . -4) (undo-tree-id2016 . -4) (undo-tree-id2017 . -4) (undo-tree-id2018 . -4) (undo-tree-id2019 . -4) (undo-tree-id2020 . -4) (undo-tree-id2021 . -4) (undo-tree-id2022 . -4) (undo-tree-id2023 . -4) (undo-tree-id2024 . -4) (undo-tree-id2025 . -4) (undo-tree-id2026 . -4) (undo-tree-id2027 . -4) 3880) nil (25900 3020 121056 257000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3872) (undo-tree-id1970 . -4) (undo-tree-id1971 . -4) (undo-tree-id1972 . -4) (undo-tree-id1973 . -4) (undo-tree-id1974 . -4) (undo-tree-id1975 . -4) (undo-tree-id1976 . -4) (undo-tree-id1977 . -4) (undo-tree-id1978 . -4) (undo-tree-id1979 . -4) (undo-tree-id1980 . -4) (undo-tree-id1981 . -4) (undo-tree-id1982 . -4) (undo-tree-id1983 . -4) (undo-tree-id1984 . -4) (undo-tree-id1985 . -4) (undo-tree-id1986 . -4) (undo-tree-id1987 . -4) (undo-tree-id1988 . -4) (undo-tree-id1989 . -4) (undo-tree-id1990 . -4) (undo-tree-id1991 . -4) (undo-tree-id1992 . -4) (undo-tree-id1993 . -4) (undo-tree-id1994 . -4) (undo-tree-id1995 . -4) (undo-tree-id1996 . -4) (undo-tree-id1997 . -4) (undo-tree-id1998 . -4) (undo-tree-id1999 . -4) (undo-tree-id2000 . -4) (undo-tree-id2001 . -4) (undo-tree-id2002 . -4) (undo-tree-id2003 . -4) 3876) nil (25900 3020 121021 152000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 3891) (t 25900 3020 128163 322000)) nil (25900 3031 136699 311000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3891)) nil (25900 3031 136698 548000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3891)) nil (25900 3031 136697 917000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 3891)) nil (25900 3031 136696 444000) 0 nil])
([nil nil ((3891 . 3895)) nil (25900 3031 136692 790000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3901) (t 25900 3031 144383 175000)) nil (25900 3184 597306 860000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3902)) nil (25900 3184 597306 96000) 0 nil])
([nil nil ((3905 . 3912)) nil (25900 3184 597305 521000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3915)) nil (25900 3184 597304 880000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3915)) nil (25900 3184 597304 280000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3915)) nil (25900 3184 597303 731000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3915)) nil (25900 3184 597302 575000) 0 nil])
([nil nil ((3895 . 3898)) nil (25900 3184 597301 522000) 0 nil])
([nil nil ((3898 . 3901)) nil (25900 3184 597296 800000) 0 nil])
([nil nil ((3902 . 3903) (t 25900 3184 603474 955000)) nil (25900 3185 683280 867000) 0 nil])
([nil nil ((3912 . 3942) (#(" " 0 1 (fontified nil)) . 3911) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (3912 . 3913) (t 25900 3185 683496 887000)) nil (25900 3188 427037 426000) 0 nil])
([nil nil ((3903 . 3904) (t 25900 3188 431552 704000)) nil (25900 3190 234085 207000) 0 nil])
([nil nil ((3943 . 3944) (t 25900 3190 239589 433000)) nil (25900 3194 54022 781000) 0 nil])
([nil nil ((3960 . 3991) (#(" " 0 1 (fontified nil)) . 3960) (3959 . 3960)) nil (25900 3194 54017 260000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 3895) (t 25900 3194 59667 60000)) nil (25900 3237 868158 72000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 3895)) nil (25900 3237 868157 56000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . 3895)) nil (25900 3237 868156 327000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3895)) nil (25900 3237 868155 611000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3895)) nil (25900 3237 868154 886000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3895)) nil (25900 3237 868153 983000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 3896)) nil (25900 3237 868153 101000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 3896)) nil (25900 3237 868152 290000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3928)) nil (25900 3237 868151 358000) 0 nil])
([nil nil ((3904 . 3905) (#("                       " 0 23 (fontified nil)) . 3904) (#("
" 0 1 (fontified t)) . -3904) 3901) nil (25900 3237 868150 145000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3944) 3967) nil (25900 3237 868148 814000) 0 nil])
([nil nil ((#("                            " 0 11 (fontified t) 11 28 (fontified t)) . -4032) 4030) nil (25900 3237 868147 626000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3966)) nil (25900 3237 868146 428000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3967)) nil (25900 3237 868145 371000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3977)) nil (25900 3237 868144 603000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 3977)) nil (25900 3237 868143 819000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3977)) nil (25900 3237 868142 978000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3977)) nil (25900 3237 868141 791000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 3978)) nil (25900 3237 868140 739000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 3978)) nil (25900 3237 868139 591000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 3978)) nil (25900 3237 868138 583000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 3978)) nil (25900 3237 868137 421000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 3978)) nil (25900 3237 868136 153000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3978)) nil (25900 3237 868134 145000) 0 nil])
([nil nil ((3978 . 3982)) nil (25900 3237 868129 935000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4027) (t 25900 3237 876559 313000)) nil (25900 3250 164023 175000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 4027)) nil (25900 3250 164022 482000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4027)) nil (25900 3250 164021 913000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 4027)) nil (25900 3250 164021 298000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4036)) nil (25900 3250 164020 771000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 4036)) nil (25900 3250 164020 242000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4036)) nil (25900 3250 164019 687000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 4036)) nil (25900 3250 164018 673000) 0 nil])
([nil nil ((4024 . 4030)) nil (25900 3250 164017 757000) 0 nil])
([nil nil ((4030 . 4031)) nil (25900 3250 164014 177000) 0 nil])
([nil nil ((4050 . 4051) (4040 . 4050) (#("neighb" 0 6 (fontified t)) . -4040) (undo-tree-id2059 . -1) (undo-tree-id2060 . -6) 4046 (4040 . 4046) (t 25900 3250 172810 294000)) nil (25900 3257 77362 159000) 0 nil])
([nil nil ((#("mon" 0 3 (fontified t)) . 4051) (undo-tree-id2058 . 3)) nil (25900 3257 77359 848000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 4051) (undo-tree-id2057 . 1)) nil (25900 3257 77355 520000) 0 nil])
([nil nil ((4056 . 4057) (t 25900 3257 80951 414000)) nil (25900 3272 123211 732000) 0 nil])
([nil nil ((4057 . 4081)) nil (25900 3272 123210 391000) 0 nil])
([nil nil ((4081 . 4100)) nil (25900 3272 123209 312000) 0 nil])
([nil nil ((4100 . 4124)) nil (25900 3272 123205 770000) 0 nil])
([nil nil ((4124 . 4133)) nil (25900 3272 123193 191000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4088) (t 25900 3272 129259 78000)) nil (25900 3284 223802 234000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4090)) nil (25900 3284 223801 588000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4127)) nil (25900 3284 223800 929000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4128)) nil (25900 3284 223800 415000) 0 nil])
([nil nil ((#("            else:
                G.add_bond(new_index, monomer_idx, monomer_to_atom={new_index: new_monomer_c_site,
" 0 9 (fontified t) 9 11 (fontified t) 11 12 (fontified t) 12 13 (face font-lock-keyword-face fontified t) 13 16 (face font-lock-keyword-face fontified t) 16 18 (fontified t) 18 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 63 (fontified t) 63 64 (fontified t) 64 67 (fontified t) 67 85 (fontified t) 85 86 (face (rainbow-delimiters-depth-2-face) fontified t) 86 93 (fontified t) 93 117 (fontified t)) . 4131) (undo-tree-id2071 . -34) (undo-tree-id2072 . -16) (undo-tree-id2073 . -34) (undo-tree-id2074 . -34) (undo-tree-id2075 . -16) (undo-tree-id2076 . -34) 4165) nil (25900 3284 223799 640000) 0 nil])
([nil nil ((#("                                                                    monomer_idx: monomer_atom})
" 0 2 (fontified t) 2 22 (fontified t) 22 30 (fontified t) 30 62 (fontified t) 62 93 (fontified t) 93 94 (face (rainbow-delimiters-unmatched-face) fontified t) 94 95 (face (rainbow-delimiters-unmatched-face) fontified t) 95 96 (fontified t)) . 4131) (undo-tree-id2061 . 96) (undo-tree-id2062 . -16) (undo-tree-id2063 . -68) (undo-tree-id2064 . -86) (undo-tree-id2065 . -79) (undo-tree-id2066 . -95) (undo-tree-id2067 . -68) (undo-tree-id2068 . -95) (undo-tree-id2069 . -67) (undo-tree-id2070 . -68) 4147) nil (25900 3284 223796 206000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 4181)) nil (25900 3284 223782 599000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4182)) nil (25900 3284 223778 57000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 3301) (t 25900 3284 229506 722000)) nil (25900 3293 379715 339000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 3301)) nil (25900 3293 379714 452000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3301)) nil (25900 3293 379713 955000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 3301)) nil (25900 3293 379713 384000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 3380)) nil (25900 3293 379712 866000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 3380)) nil (25900 3293 379712 224000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3380)) nil (25900 3293 379710 881000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 3380)) nil (25900 3293 379706 191000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 3877) (t 25900 3293 377694 93000)) nil (25900 3297 713068 132000) 0 nil])
([nil nil ((3877 . 3881)) nil (25900 3297 713063 137000) 0 nil])
([nil nil ((3916 . 3942) (#("                       " 0 23 (fontified t)) . 3916) (undo-tree-id2077 . -15) 3931 (t 25900 3297 717783 33000)) nil (25900 3302 368918 310000) 0 nil])
([nil nil ((4022 . 4025) 4008) nil (25900 3302 368911 559000) 0 nil])
([nil nil ((4059 . 4085) (#("                       " 0 23 (fontified t)) . 4059) 4098) nil (25900 3302 368910 679000) 0 nil])
([nil nil ((4103 . 4129) (#("                       " 0 23 (fontified t)) . 4103) 4133) nil (25900 3302 368909 37000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4092)) nil (25900 3302 368904 172000) 0 nil])
([nil nil ((3606 . 3613) (t 25900 3302 373878 482000)) nil (25900 3318 364899 363000) 0 nil])
([nil nil ((#("        new_mon_c_site = new_monomer.binding_sites[BindingSiteType.AMINO_C][0]
        new_mon_n_site = new_monomer.binding_sites[BindingSiteType.AMINO_N][0]
" 0 8 (fontified t) 8 15 (face font-lock-variable-name-face fontified t) 15 22 (face font-lock-variable-name-face fontified t) 22 35 (fontified t) 35 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-1-face) fontified t) 51 54 (fontified t) 54 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-1-face) fontified t) 75 76 (face (rainbow-delimiters-depth-1-face) fontified t) 76 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-1-face) fontified t) 78 79 (fontified t) 79 87 (fontified t) 87 94 (face font-lock-variable-name-face fontified t) 94 101 (face font-lock-variable-name-face fontified t) 101 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-1-face) fontified t) 130 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-1-face) fontified t) 154 155 (face (rainbow-delimiters-depth-1-face) fontified t) 155 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-1-face) fontified t) 157 158 (fontified t)) . 3286) (undo-tree-id2091 . -123) (undo-tree-id2092 . -44) (undo-tree-id2093 . -123) (undo-tree-id2094 . -123) (undo-tree-id2095 . -44) (undo-tree-id2096 . -123) (undo-tree-id2097 . -79) (undo-tree-id2098 . -123) 3409 (t 25900 3318 370206 641000)) nil (25900 3406 874975 988000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3384 . 3385) (3377 . 3535)) nil (25900 3406 874972 114000) 0 nil])
([nil nil ((3377 . 3385) (3377 . 3378) 3398) nil (25900 3406 874971 270000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3381) (undo-tree-id2090 . -4) 3385) nil (25900 3406 874969 891000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3377) (undo-tree-id2078 . -4) (undo-tree-id2079 . -4) (undo-tree-id2080 . -4) (undo-tree-id2081 . -4) (undo-tree-id2082 . -4) (undo-tree-id2083 . -4) (undo-tree-id2084 . -4) (undo-tree-id2085 . -4) (undo-tree-id2086 . -4) (undo-tree-id2087 . -4) (undo-tree-id2088 . -4) (undo-tree-id2089 . -4) 3381) nil (25900 3406 874965 508000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3286) (undo-tree-id2099 . 1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (t 25900 3406 884028 911000)) nil (25900 3408 428337 152000) 0 nil])
([nil nil ((3535 . 3543) (3535 . 3536) (t 25900 3408 436060 953000)) nil (25900 3413 726635 894000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3539) (undo-tree-id2156 . -4) (undo-tree-id2157 . -4) (undo-tree-id2158 . -4) (undo-tree-id2159 . -4) (undo-tree-id2160 . -4) (undo-tree-id2161 . -4) (undo-tree-id2162 . -4) (undo-tree-id2163 . -4) (undo-tree-id2164 . -4) (undo-tree-id2165 . -4) (undo-tree-id2166 . -4) (undo-tree-id2167 . -4) (undo-tree-id2168 . -4) (undo-tree-id2169 . -4) (undo-tree-id2170 . -4) (undo-tree-id2171 . -4) (undo-tree-id2172 . -4) (undo-tree-id2173 . -4) (undo-tree-id2174 . -4) (undo-tree-id2175 . -4) (undo-tree-id2176 . -4) (undo-tree-id2177 . -4) (undo-tree-id2178 . -4) (undo-tree-id2179 . -4) (undo-tree-id2180 . -4) (undo-tree-id2181 . -4) (undo-tree-id2182 . -4) (undo-tree-id2183 . -4) (undo-tree-id2184 . -4) (undo-tree-id2185 . -4) (undo-tree-id2186 . -4) 3543) nil (25900 3413 726633 924000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3535) (undo-tree-id2115 . -4) (undo-tree-id2116 . -4) (undo-tree-id2117 . -4) (undo-tree-id2118 . -4) (undo-tree-id2119 . -4) (undo-tree-id2120 . -4) (undo-tree-id2121 . -4) (undo-tree-id2122 . -4) (undo-tree-id2123 . -4) (undo-tree-id2124 . -4) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) (undo-tree-id2136 . -4) (undo-tree-id2137 . -4) (undo-tree-id2138 . -4) (undo-tree-id2139 . -4) (undo-tree-id2140 . -4) (undo-tree-id2141 . -4) (undo-tree-id2142 . -4) (undo-tree-id2143 . -4) (undo-tree-id2144 . -4) (undo-tree-id2145 . -4) (undo-tree-id2146 . -4) (undo-tree-id2147 . -4) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) (undo-tree-id2154 . -4) (undo-tree-id2155 . -4) 3539) nil (25900 3413 726619 233000) 0 nil])
([nil nil ((#("Dict[str, Any]" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 6 (face font-lock-builtin-face fontified t) 6 8 (face font-lock-builtin-face fontified t) 8 10 (fontified t) 10 11 (fontified t) 11 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t)) . 4229) (undo-tree-id2187 . -4) (t 25900 3413 736170 397000)) nil (25900 3528 902007 168000) 0 nil])
([nil nil ((4229 . 4250)) nil (25900 3528 901999 696000) 0 nil])
([nil nil ((4250 . 4251)) nil (25900 3528 901994 916000) 0 nil])
([nil nil ((#("                     'core_nodes': list(self.core_nodes)}
" 0 9 (fontified t) 9 21 (fontified t) 21 22 (face font-lock-string-face fontified t) 22 28 (face font-lock-string-face fontified t) 28 32 (face font-lock-string-face fontified t) 32 33 (face font-lock-string-face fontified t) 33 35 (fontified t) 35 36 (face font-lock-builtin-face fontified t) 36 39 (face font-lock-builtin-face fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 44 (face font-lock-keyword-face fontified t) 44 53 (fontified t) 53 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) fontified t) 56 57 (face (rainbow-delimiters-depth-1-face) fontified t) 57 58 (fontified t)) . 4653) (undo-tree-id2188 . -51) (undo-tree-id2189 . -51) (undo-tree-id2190 . -51) (undo-tree-id2191 . -51) (undo-tree-id2192 . -51) (undo-tree-id2193 . -51) (undo-tree-id2194 . -51) (undo-tree-id2195 . -51) (undo-tree-id2196 . -51) (undo-tree-id2197 . -51) (undo-tree-id2198 . -51) (undo-tree-id2199 . -51) (undo-tree-id2200 . -51) (undo-tree-id2201 . -51) (undo-tree-id2202 . -51) (undo-tree-id2203 . -51) (undo-tree-id2204 . -51) (undo-tree-id2205 . -51) (undo-tree-id2206 . -51) (undo-tree-id2207 . -51) (undo-tree-id2208 . -51) (undo-tree-id2209 . -51) (undo-tree-id2210 . -51) (undo-tree-id2211 . -51) (undo-tree-id2212 . -51) (undo-tree-id2213 . -51) (undo-tree-id2214 . -51) (undo-tree-id2215 . -51) (undo-tree-id2216 . -51) 4704 (t 25900 3528 906556 362000)) nil (25900 3581 733918 182000) 0 nil])
([nil nil ((4651 . 4652) (#("," 0 1 (fontified t)) . 4651)) nil (25900 3581 733889 379000) 0 nil])
([nil nil ((4788 . 4798) (t 25900 3581 739655 301000)) nil (25900 3596 314168 361000) 0 nil])
([nil nil ((4810 . 4811)) nil (25900 3596 314164 240000) 0 nil])
([nil nil ((4813 . 4844) (#(" " 0 1 (fontified nil)) . 4813) (4812 . 4813) (t 25900 3596 323959 92000)) nil (25900 3597 713293 84000) 0 nil])
([nil nil ((4340 . 4348) (t 25900 3597 719988 180000)) nil (25900 3641 747644 346000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 4348) (undo-tree-id2228 . 1)) nil (25900 3641 747643 665000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4348) (undo-tree-id2226 . 1) (undo-tree-id2227 . 1)) nil (25900 3641 747642 876000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4348) (undo-tree-id2224 . 1) (undo-tree-id2225 . 1)) nil (25900 3641 747641 682000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4348) (undo-tree-id2222 . 1) (undo-tree-id2223 . 1)) nil (25900 3641 747640 167000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 4348) (undo-tree-id2220 . 1) (undo-tree-id2221 . 1)) nil (25900 3641 747638 958000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4348) (undo-tree-id2218 . 1) (undo-tree-id2219 . 1)) nil (25900 3641 747637 466000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 4358)) nil (25900 3641 747635 141000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4358)) nil (25900 3641 747634 430000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 4358)) nil (25900 3641 747633 902000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 4358)) nil (25900 3641 747633 429000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4358)) nil (25900 3641 747632 856000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 4358)) nil (25900 3641 747632 442000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4358)) nil (25900 3641 747632 83000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 4358)) nil (25900 3641 747631 576000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4358)) nil (25900 3641 747631 155000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 4358)) nil (25900 3641 747630 630000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 4358)) nil (25900 3641 747630 59000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 4358) (undo-tree-id2217 . -1)) nil (25900 3641 747628 553000) 0 nil])
([nil nil ((4358 . 4359)) nil (25900 3806 128271 52000) 0 nil])
([nil nil ((#("    def to_json_dict(self) -> MonomerGraph_JSON_Dict:
        # test that from_json(to_json(self)) == self
        nodes = {monomer_id: self.monomer(monomer_id).to_json_dict()
                 for monomer_id in self}
        edges = [{'endpoints': edge_endpts,
                  'attributes': edge_attr}
                 for edge_endpts, edge_attr in self.edges.items()]
        json_dict = {'nodes': nodes,
                     'edges': edges}
        return json_dict

    @classmethod
    def from_json_dict(cls, record):
        graph = Graph()
        graph.add_nodes_from([(MonomerId(int(node_id)),
                               {'monomer': Monomer.from_json_dict(node_attr)})
                              for node_id, node_attr in record['nodes'].items()])

        def parsed_attributes(edge_attributes):
            new_attributes = copy.deepcopy(edge_attributes)
            new_attributes['monomer_to_atom'] = dict((int(monomer_id), atom_id)
                                                     for monomer_id, atom_id in edge_attributes['monomer_to_atom'].items())
            return new_attributes

        graph.add_edges_from([(edge['endpoints'][0], edge['endpoints'][1], parsed_attributes(edge['attributes']))
                              for edge in record['edges']])
        return cls(graph, core_nodes=record['core_nodes'])
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-function-name-face fontified t) 9 20 (face font-lock-function-name-face fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 25 (face font-lock-keyword-face fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 52 (fontified t) 52 54 (fontified t) 54 55 (fontified t) 55 62 (fontified t) 62 64 (face font-lock-comment-delimiter-face fontified t) 64 107 (face font-lock-comment-face fontified t) 107 115 (fontified t) 115 120 (face font-lock-variable-name-face fontified t) 120 123 (fontified t) 123 124 (face (rainbow-delimiters-depth-1-face) fontified t) 124 136 (fontified t) 136 140 (face font-lock-keyword-face fontified t) 140 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-2-face) fontified t) 149 156 (fontified t) 156 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-2-face) fontified t) 160 162 (fontified t) 162 173 (fontified t) 173 174 (face (rainbow-delimiters-depth-2-face) fontified t) 174 175 (face (rainbow-delimiters-depth-2-face) fontified t) 175 176 (fontified t) 176 193 (fontified t) 193 196 (face font-lock-keyword-face fontified t) 196 208 (fontified t) 208 210 (face font-lock-keyword-face fontified t) 210 211 (fontified t) 211 215 (face font-lock-keyword-face fontified t) 215 216 (face (rainbow-delimiters-depth-1-face) fontified t) 216 225 (fontified t) 225 230 (face font-lock-variable-name-face fontified t) 230 233 (fontified t) 233 234 (face (rainbow-delimiters-depth-1-face) fontified t) 234 235 (face (rainbow-delimiters-depth-2-face) fontified t) 235 236 (face font-lock-string-face fontified t) 236 245 (face font-lock-string-face fontified t) 245 246 (face font-lock-string-face fontified t) 246 248 (fontified t) 248 259 (fontified t) 259 261 (fontified t) 261 279 (fontified t) 279 280 (face font-lock-string-face fontified t) 280 290 (face font-lock-string-face fontified t) 290 291 (face font-lock-string-face fontified t) 291 298 (fontified t) 298 302 (fontified t) 302 303 (face (rainbow-delimiters-depth-2-face) fontified t) 303 304 (fontified t) 304 321 (fontified t) 321 324 (face font-lock-keyword-face fontified t) 324 348 (fontified t) 348 350 (face font-lock-keyword-face fontified t) 350 351 (fontified t) 351 355 (face font-lock-keyword-face fontified t) 355 358 (fontified t) 358 367 (fontified t) 367 368 (face (rainbow-delimiters-depth-2-face) fontified t) 368 369 (face (rainbow-delimiters-depth-2-face) fontified t) 369 370 (face (rainbow-delimiters-depth-1-face) fontified t) 370 371 (fontified t) 371 379 (fontified t) 379 388 (face font-lock-variable-name-face fontified t) 388 391 (fontified t) 391 392 (face (rainbow-delimiters-depth-1-face) fontified t) 392 393 (face font-lock-string-face fontified t) 393 398 (face font-lock-string-face fontified t) 398 399 (face font-lock-string-face fontified t) 399 408 (fontified t) 408 410 (fontified t) 410 429 (fontified t) 429 430 (face font-lock-string-face fontified t) 430 435 (face font-lock-string-face fontified t) 435 436 (face font-lock-string-face fontified t) 436 443 (fontified t) 443 444 (face (rainbow-delimiters-depth-1-face) fontified t) 444 445 (fontified t) 445 453 (fontified t) 453 459 (face font-lock-keyword-face fontified t) 459 469 (fontified t) 469 470 (fontified t) 470 476 (fontified t) 476 487 (face font-lock-builtin-face fontified t) 487 488 (fontified t) 488 492 (fontified t) 492 495 (face font-lock-keyword-face fontified t) 495 496 (fontified t) 496 500 (face font-lock-function-name-face fontified t) 500 510 (face font-lock-function-name-face fontified t) 510 511 (face (rainbow-delimiters-depth-1-face) fontified t) 511 522 (fontified t) 522 523 (face (rainbow-delimiters-depth-1-face) fontified t) 523 525 (fontified t) 525 533 (fontified t) 533 538 (face font-lock-variable-name-face fontified t) 538 540 (fontified t) 540 546 (fontified t) 546 547 (face (rainbow-delimiters-depth-1-face) fontified t) 547 548 (face (rainbow-delimiters-depth-1-face) fontified t) 548 549 (fontified t) 549 577 (fontified t) 577 578 (face (rainbow-delimiters-depth-1-face) fontified t) 578 579 (face (rainbow-delimiters-depth-2-face) fontified t) 579 580 (face (rainbow-delimiters-depth-3-face) fontified t) 580 589 (fontified t) 589 590 (face (rainbow-delimiters-depth-4-face) fontified t) 590 593 (face font-lock-builtin-face fontified t) 593 594 (face (rainbow-delimiters-depth-5-face) fontified t) 594 601 (fontified t) 601 602 (face (rainbow-delimiters-depth-5-face) fontified t) 602 603 (face (rainbow-delimiters-depth-4-face) fontified t) 603 636 (fontified t) 636 637 (face (rainbow-delimiters-depth-4-face) fontified t) 637 646 (face font-lock-string-face fontified t) 646 660 (fontified t) 660 670 (fontified t) 670 671 (face (rainbow-delimiters-depth-5-face) fontified t) 671 676 (fontified t) 676 680 (fontified t) 680 681 (face (rainbow-delimiters-depth-5-face) fontified t) 681 682 (face (rainbow-delimiters-depth-4-face) fontified t) 682 683 (face (rainbow-delimiters-depth-3-face) fontified t) 683 684 (fontified t) 684 714 (fontified t) 714 717 (face font-lock-keyword-face fontified t) 717 737 (fontified t) 737 739 (face font-lock-keyword-face fontified t) 739 745 (fontified t) 745 746 (fontified t) 746 747 (face (rainbow-delimiters-depth-3-face) fontified t) 747 754 (face font-lock-string-face fontified t) 754 755 (face (rainbow-delimiters-depth-3-face) fontified t) 755 761 (fontified t) 761 762 (face (rainbow-delimiters-depth-3-face) fontified t) 762 763 (face (rainbow-delimiters-depth-3-face) fontified t) 763 764 (face (rainbow-delimiters-depth-2-face) fontified t) 764 765 (face (rainbow-delimiters-depth-1-face) fontified t) 765 766 (fontified t) 766 775 (fontified t) 775 778 (face font-lock-keyword-face fontified t) 778 779 (fontified t) 779 788 (face font-lock-function-name-face fontified t) 788 796 (face font-lock-function-name-face fontified t) 796 797 (face (rainbow-delimiters-depth-1-face) fontified t) 797 812 (fontified t) 812 813 (face (rainbow-delimiters-depth-1-face) fontified t) 813 815 (fontified t) 815 827 (fontified t) 827 841 (face font-lock-variable-name-face fontified t) 841 855 (fontified t) 855 857 (fontified t) 857 858 (face (rainbow-delimiters-depth-1-face) fontified t) 858 873 (fontified t) 873 874 (face (rainbow-delimiters-depth-1-face) fontified t) 874 875 (fontified t) 875 887 (fontified t) 887 901 (face font-lock-variable-name-face fontified t) 901 902 (face (rainbow-delimiters-depth-1-face) fontified t) 902 919 (face font-lock-string-face fontified t) 919 920 (face (rainbow-delimiters-depth-1-face) fontified t) 920 923 (fontified t) 923 927 (face font-lock-builtin-face fontified t) 927 928 (face (rainbow-delimiters-depth-1-face) fontified t) 928 929 (face (rainbow-delimiters-depth-2-face) fontified t) 929 932 (face font-lock-builtin-face fontified t) 932 933 (face (rainbow-delimiters-depth-3-face) fontified t) 933 943 (fontified t) 943 944 (face (rainbow-delimiters-depth-3-face) fontified t) 944 953 (fontified t) 953 954 (face (rainbow-delimiters-depth-2-face) fontified t) 954 955 (fontified t) 955 987 (fontified t) 987 1008 (fontified t) 1008 1011 (face font-lock-keyword-face fontified t) 1011 1012 (fontified t) 1012 1025 (fontified t) 1025 1030 (fontified t) 1030 1032 (fontified t) 1032 1034 (face font-lock-keyword-face fontified t) 1034 1050 (fontified t) 1050 1051 (face (rainbow-delimiters-depth-2-face) fontified t) 1051 1068 (face font-lock-string-face fontified t) 1068 1069 (face (rainbow-delimiters-depth-2-face) fontified t) 1069 1075 (fontified t) 1075 1076 (face (rainbow-delimiters-depth-2-face) fontified t) 1076 1077 (face (rainbow-delimiters-depth-2-face) fontified t) 1077 1078 (face (rainbow-delimiters-depth-1-face) fontified t) 1078 1079 (fontified t) 1079 1091 (fontified t) 1091 1097 (face font-lock-keyword-face fontified t) 1097 1113 (fontified t) 1113 1142 (fontified t) 1142 1143 (face (rainbow-delimiters-depth-1-face) fontified t) 1143 1144 (face (rainbow-delimiters-depth-2-face) fontified t) 1144 1145 (face (rainbow-delimiters-depth-3-face) fontified t) 1145 1149 (fontified t) 1149 1150 (face (rainbow-delimiters-depth-4-face) fontified t) 1150 1161 (face font-lock-string-face fontified t) 1161 1162 (face (rainbow-delimiters-depth-4-face) fontified t) 1162 1163 (face (rainbow-delimiters-depth-4-face) fontified t) 1163 1164 (fontified t) 1164 1165 (face (rainbow-delimiters-depth-4-face) fontified t) 1165 1171 (fontified t) 1171 1172 (face (rainbow-delimiters-depth-4-face) fontified t) 1172 1183 (face font-lock-string-face fontified t) 1183 1184 (face (rainbow-delimiters-depth-4-face) fontified t) 1184 1185 (face (rainbow-delimiters-depth-4-face) fontified t) 1185 1186 (fontified t) 1186 1187 (face (rainbow-delimiters-depth-4-face) fontified t) 1187 1206 (fontified t) 1206 1207 (face (rainbow-delimiters-depth-4-face) fontified t) 1207 1211 (fontified t) 1211 1212 (face (rainbow-delimiters-depth-5-face) fontified t) 1212 1224 (face font-lock-string-face fontified t) 1224 1225 (face (rainbow-delimiters-depth-5-face) fontified t) 1225 1226 (face (rainbow-delimiters-depth-4-face) fontified t) 1226 1227 (face (rainbow-delimiters-depth-3-face) fontified t) 1227 1228 (fontified t) 1228 1258 (fontified t) 1258 1261 (face font-lock-keyword-face fontified t) 1261 1266 (fontified t) 1266 1267 (fontified t) 1267 1269 (face font-lock-keyword-face fontified t) 1269 1276 (fontified t) 1276 1277 (face (rainbow-delimiters-depth-3-face) fontified t) 1277 1284 (face font-lock-string-face fontified t) 1284 1285 (face (rainbow-delimiters-depth-3-face) fontified t) 1285 1286 (face (rainbow-delimiters-depth-2-face) fontified t) 1286 1287 (face (rainbow-delimiters-depth-1-face) fontified t) 1287 1288 (fontified t) 1288 1296 (fontified t) 1296 1302 (face font-lock-keyword-face fontified t) 1302 1306 (fontified t) 1306 1307 (face (rainbow-delimiters-depth-1-face) fontified t) 1307 1315 (fontified t) 1315 1331 (fontified t) 1331 1332 (face (rainbow-delimiters-depth-2-face) fontified t) 1332 1344 (face font-lock-string-face fontified t) 1344 1345 (face (rainbow-delimiters-depth-2-face) fontified t) 1345 1346 (face (rainbow-delimiters-depth-1-face) fontified t) 1346 1347 (fontified t)) . 4199) (undo-tree-id2364 . -1288) (undo-tree-id2365 . -215) (undo-tree-id2366 . -1288) (undo-tree-id2367 . -1288) (undo-tree-id2368 . -159) (undo-tree-id2369 . -471) (undo-tree-id2370 . -766) (undo-tree-id2371 . -1288) (undo-tree-id2372 . -470) (undo-tree-id2373 . -766) 5487) nil (25900 3838 803238 279000) 0 nil] [nil nil ((#("    def to_json_dict(self) -> MonomerGraph_JSON_Dict:
        # test that from_json(to_json(self)) == self
        nodes = {monomer_id: self.monomer(monomer_id).to_json_dict()
                 for monomer_id in self}
        edges = [{'endpoints': edge_endpts,
                  'attributes': edge_attr}
                 for edge_endpts, edge_attr in self.edges.items()]
        json_dict = {'nodes': nodes,
                     'edges': edges}
        return json_dict

    @classmethod
    def from_json_dict(cls, record):
        graph = Graph()
        graph.add_nodes_from([(MonomerId(int(node_id)),
                               {'monomer': Monomer.from_json_dict(node_attr)})
                              for node_id, node_attr in record['nodes'].items()])

        def parsed_attributes(edge_attributes):
            new_attributes = copy.deepcopy(edge_attributes)
            new_attributes['monomer_to_atom'] = dict((int(monomer_id), atom_id)
                                                     for monomer_id, atom_id in edge_attributes['monomer_to_atom'].items())
            return new_attributes

        graph.add_edges_from([(edge['endpoints'][0], edge['endpoints'][1], parsed_attributes(edge['attributes']))
                              for edge in record['edges']])
        return cls(graph, core_nodes=record['core_nodes'])

" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-function-name-face fontified t) 9 20 (face font-lock-function-name-face fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 25 (face font-lock-keyword-face fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 52 (fontified t) 52 54 (fontified t) 54 55 (fontified t) 55 62 (fontified t) 62 64 (face font-lock-comment-delimiter-face fontified t) 64 107 (face font-lock-comment-face fontified t) 107 115 (fontified t) 115 120 (face font-lock-variable-name-face fontified t) 120 123 (fontified t) 123 124 (face (rainbow-delimiters-depth-1-face) fontified t) 124 136 (fontified t) 136 140 (face font-lock-keyword-face fontified t) 140 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-2-face) fontified t) 149 156 (fontified t) 156 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-2-face) fontified t) 160 162 (fontified t) 162 173 (fontified t) 173 174 (face (rainbow-delimiters-depth-2-face) fontified t) 174 175 (face (rainbow-delimiters-depth-2-face) fontified t) 175 176 (fontified t) 176 193 (fontified t) 193 196 (face font-lock-keyword-face fontified t) 196 208 (fontified t) 208 210 (face font-lock-keyword-face fontified t) 210 211 (fontified t) 211 215 (face font-lock-keyword-face fontified t) 215 216 (face (rainbow-delimiters-depth-1-face) fontified t) 216 225 (fontified t) 225 230 (face font-lock-variable-name-face fontified t) 230 233 (fontified t) 233 234 (face (rainbow-delimiters-depth-1-face) fontified t) 234 235 (face (rainbow-delimiters-depth-2-face) fontified t) 235 236 (face font-lock-string-face fontified t) 236 245 (face font-lock-string-face fontified t) 245 246 (face font-lock-string-face fontified t) 246 248 (fontified t) 248 259 (fontified t) 259 261 (fontified t) 261 279 (fontified t) 279 280 (face font-lock-string-face fontified t) 280 290 (face font-lock-string-face fontified t) 290 291 (face font-lock-string-face fontified t) 291 298 (fontified t) 298 302 (fontified t) 302 303 (face (rainbow-delimiters-depth-2-face) fontified t) 303 304 (fontified t) 304 321 (fontified t) 321 324 (face font-lock-keyword-face fontified t) 324 348 (fontified t) 348 350 (face font-lock-keyword-face fontified t) 350 351 (fontified t) 351 355 (face font-lock-keyword-face fontified t) 355 358 (fontified t) 358 367 (fontified t) 367 368 (face (rainbow-delimiters-depth-2-face) fontified t) 368 369 (face (rainbow-delimiters-depth-2-face) fontified t) 369 370 (face (rainbow-delimiters-depth-1-face) fontified t) 370 371 (fontified t) 371 379 (fontified t) 379 388 (face font-lock-variable-name-face fontified t) 388 391 (fontified t) 391 392 (face (rainbow-delimiters-depth-1-face) fontified t) 392 393 (face font-lock-string-face fontified t) 393 398 (face font-lock-string-face fontified t) 398 399 (face font-lock-string-face fontified t) 399 408 (fontified t) 408 410 (fontified t) 410 429 (fontified t) 429 430 (face font-lock-string-face fontified t) 430 435 (face font-lock-string-face fontified t) 435 436 (face font-lock-string-face fontified t) 436 443 (fontified t) 443 444 (face (rainbow-delimiters-depth-1-face) fontified t) 444 445 (fontified t) 445 453 (fontified t) 453 459 (face font-lock-keyword-face fontified t) 459 469 (fontified t) 469 470 (fontified t) 470 476 (fontified t) 476 487 (face font-lock-builtin-face fontified t) 487 488 (fontified t) 488 492 (fontified t) 492 495 (face font-lock-keyword-face fontified t) 495 496 (fontified t) 496 510 (face font-lock-function-name-face fontified t) 510 511 (face (rainbow-delimiters-depth-1-face) fontified t) 511 522 (fontified t) 522 523 (face (rainbow-delimiters-depth-1-face) fontified t) 523 533 (fontified t) 533 538 (face font-lock-variable-name-face fontified t) 538 540 (fontified t) 540 546 (fontified t) 546 547 (face (rainbow-delimiters-depth-1-face) fontified t) 547 548 (face (rainbow-delimiters-depth-1-face) fontified t) 548 549 (fontified t) 549 577 (fontified t) 577 578 (face (rainbow-delimiters-depth-1-face) fontified t) 578 579 (face (rainbow-delimiters-depth-2-face) fontified t) 579 580 (face (rainbow-delimiters-depth-3-face) fontified t) 580 589 (fontified t) 589 590 (face (rainbow-delimiters-depth-4-face) fontified t) 590 593 (face font-lock-builtin-face fontified t) 593 594 (face (rainbow-delimiters-depth-5-face) fontified t) 594 601 (fontified t) 601 602 (face (rainbow-delimiters-depth-5-face) fontified t) 602 603 (face (rainbow-delimiters-depth-4-face) fontified t) 603 636 (fontified t) 636 637 (face (rainbow-delimiters-depth-4-face) fontified t) 637 646 (face font-lock-string-face fontified t) 646 660 (fontified t) 660 670 (fontified t) 670 671 (face (rainbow-delimiters-depth-5-face) fontified t) 671 676 (fontified t) 676 680 (fontified t) 680 681 (fontified t face (rainbow-delimiters-depth-5-face)) 681 682 (fontified t face (rainbow-delimiters-depth-4-face)) 682 683 (fontified t face (rainbow-delimiters-depth-3-face)) 683 684 (fontified t) 684 714 (fontified t) 714 717 (face font-lock-keyword-face fontified t) 717 737 (fontified t) 737 739 (face font-lock-keyword-face fontified t) 739 745 (fontified t) 745 746 (fontified t) 746 747 (face (rainbow-delimiters-depth-3-face) fontified t) 747 754 (face font-lock-string-face fontified t) 754 755 (face (rainbow-delimiters-depth-3-face) fontified t) 755 761 (fontified t) 761 762 (face (rainbow-delimiters-depth-3-face) fontified t) 762 763 (face (rainbow-delimiters-depth-3-face) fontified t) 763 764 (face (rainbow-delimiters-depth-2-face) fontified t) 764 765 (face (rainbow-delimiters-depth-1-face) fontified t) 765 766 (fontified t) 766 775 (fontified t) 775 778 (face font-lock-keyword-face fontified t) 778 779 (fontified t) 779 788 (face font-lock-function-name-face fontified t) 788 796 (face font-lock-function-name-face fontified t) 796 797 (face (rainbow-delimiters-depth-1-face) fontified t) 797 812 (fontified t) 812 813 (face (rainbow-delimiters-depth-1-face) fontified t) 813 815 (fontified t) 815 827 (fontified t) 827 841 (face font-lock-variable-name-face fontified t) 841 855 (fontified t) 855 857 (fontified t) 857 858 (face (rainbow-delimiters-depth-1-face) fontified t) 858 873 (fontified t) 873 874 (face (rainbow-delimiters-depth-1-face) fontified t) 874 875 (fontified t) 875 887 (fontified t) 887 901 (face font-lock-variable-name-face fontified t) 901 902 (face (rainbow-delimiters-depth-1-face) fontified t) 902 919 (face font-lock-string-face fontified t) 919 920 (face (rainbow-delimiters-depth-1-face) fontified t) 920 923 (fontified t) 923 927 (face font-lock-builtin-face fontified t) 927 928 (face (rainbow-delimiters-depth-1-face) fontified t) 928 929 (face (rainbow-delimiters-depth-2-face) fontified t) 929 932 (face font-lock-builtin-face fontified t) 932 933 (face (rainbow-delimiters-depth-3-face) fontified t) 933 943 (fontified t) 943 944 (face (rainbow-delimiters-depth-3-face) fontified t) 944 953 (fontified t) 953 954 (face (rainbow-delimiters-depth-2-face) fontified t) 954 955 (fontified t) 955 987 (fontified t) 987 1008 (fontified t) 1008 1011 (face font-lock-keyword-face fontified t) 1011 1012 (fontified t) 1012 1030 (fontified t) 1030 1032 (fontified t) 1032 1034 (face font-lock-keyword-face fontified t) 1034 1050 (fontified t) 1050 1051 (face (rainbow-delimiters-depth-2-face) fontified t) 1051 1068 (face font-lock-string-face fontified t) 1068 1069 (face (rainbow-delimiters-depth-2-face) fontified t) 1069 1075 (fontified t) 1075 1076 (face (rainbow-delimiters-depth-2-face) fontified t) 1076 1077 (face (rainbow-delimiters-depth-2-face) fontified t) 1077 1078 (face (rainbow-delimiters-depth-1-face) fontified t) 1078 1079 (fontified t) 1079 1091 (fontified t) 1091 1097 (face font-lock-keyword-face fontified t) 1097 1113 (fontified t) 1113 1142 (fontified t) 1142 1143 (face (rainbow-delimiters-depth-1-face) fontified t) 1143 1144 (face (rainbow-delimiters-depth-2-face) fontified t) 1144 1145 (face (rainbow-delimiters-depth-3-face) fontified t) 1145 1149 (fontified t) 1149 1150 (face (rainbow-delimiters-depth-4-face) fontified t) 1150 1161 (face font-lock-string-face fontified t) 1161 1162 (face (rainbow-delimiters-depth-4-face) fontified t) 1162 1163 (face (rainbow-delimiters-depth-4-face) fontified t) 1163 1164 (fontified t) 1164 1165 (face (rainbow-delimiters-depth-4-face) fontified t) 1165 1171 (fontified t) 1171 1172 (face (rainbow-delimiters-depth-4-face) fontified t) 1172 1183 (face font-lock-string-face fontified t) 1183 1184 (face (rainbow-delimiters-depth-4-face) fontified t) 1184 1185 (fontified t face (rainbow-delimiters-depth-4-face)) 1185 1186 (fontified t) 1186 1187 (fontified t face (rainbow-delimiters-depth-4-face)) 1187 1206 (fontified t) 1206 1207 (fontified t face (rainbow-delimiters-depth-4-face)) 1207 1211 (fontified t) 1211 1212 (fontified t face (rainbow-delimiters-depth-5-face)) 1212 1224 (fontified t face font-lock-string-face) 1224 1225 (fontified t face (rainbow-delimiters-depth-5-face)) 1225 1226 (fontified t face (rainbow-delimiters-depth-4-face)) 1226 1227 (fontified t face (rainbow-delimiters-depth-3-face)) 1227 1228 (fontified t) 1228 1258 (fontified t) 1258 1261 (face font-lock-keyword-face fontified t) 1261 1266 (fontified t) 1266 1267 (fontified t) 1267 1269 (face font-lock-keyword-face fontified t) 1269 1276 (fontified t) 1276 1277 (face (rainbow-delimiters-depth-3-face) fontified t) 1277 1284 (face font-lock-string-face fontified t) 1284 1285 (face (rainbow-delimiters-depth-3-face) fontified t) 1285 1286 (face (rainbow-delimiters-depth-2-face) fontified t) 1286 1287 (face (rainbow-delimiters-depth-1-face) fontified t) 1287 1288 (fontified t) 1288 1296 (fontified t) 1296 1302 (face font-lock-keyword-face fontified t) 1302 1306 (fontified t) 1306 1307 (face (rainbow-delimiters-depth-1-face) fontified t) 1307 1315 (fontified t) 1315 1331 (fontified t) 1331 1332 (face (rainbow-delimiters-depth-2-face) fontified t) 1332 1344 (face font-lock-string-face fontified t) 1344 1345 (face (rainbow-delimiters-depth-2-face) fontified t) 1345 1346 (face (rainbow-delimiters-depth-1-face) fontified t) 1346 1347 (fontified t) 1347 1348 (fontified t)) . 4199) (undo-tree-id2229 . -1347) (undo-tree-id2230 . -215) (undo-tree-id2231 . 1188) (undo-tree-id2232 . -52) (undo-tree-id2233 . -1347) (undo-tree-id2234 . -215) (undo-tree-id2235 . -1347) (undo-tree-id2236 . -159) (undo-tree-id2238 . -53) (undo-tree-id2240 . -765) (undo-tree-id2242 . -1078) (undo-tree-id2244 . -1227) (undo-tree-id2246 . -52) (undo-tree-id2247 . -1347) (undo-tree-id2249 . -1166) (undo-tree-id2251 . -1166) (undo-tree-id2253 . -1166) (undo-tree-id2255 . -1280) (undo-tree-id2257 . -1280) (undo-tree-id2259 . -1280) (undo-tree-id2261 . -1280) (undo-tree-id2263 . -1340) (undo-tree-id2265 . -1340) (undo-tree-id2267 . -1340) (undo-tree-id2269 . -1340) (undo-tree-id2271 . -1340) (undo-tree-id2273 . -1340) (undo-tree-id2275 . -1340) (undo-tree-id2277 . -1340) (undo-tree-id2279 . -1340) (undo-tree-id2281 . -1340) (undo-tree-id2283 . -1340) (undo-tree-id2285 . -1340) (undo-tree-id2287 . -1340) (undo-tree-id2289 . -1340) (undo-tree-id2291 . -1340) (undo-tree-id2293 . -1340) (undo-tree-id2295 . -1340) (undo-tree-id2297 . -1347) (undo-tree-id2299 . -1347) (undo-tree-id2301 . -1347) (undo-tree-id2303 . -1347) 5546 (t 25900 3641 752906 503000)) ((4199 . 5547)) (25900 3804 21438 626000) 0 nil])
([nil nil ((7543 . 7544) (#(";" 0 1 (fontified t)) . -7543) (undo-tree-id2363 . -1) 7544 (7541 . 7544)) nil (25900 3838 803231 951000) 0 nil])
([nil nil ((#("    def to_atomic_graph(self) -> Tuple[Dict[AtomExtId, AtomInfo], Dict[EdgeExtId, AtomicEdgeInfo]]:
        def get_monomer_indexed_atoms(monomer_idx: MonomerId) -> Dict[AtomExtId, AtomInfo]:
            monomer = self.nodes[monomer_idx]['monomer']
            return {(monomer_idx, atom_idx): monomer.atomic_graph.nodes[atom_idx]
                    for atom_idx in monomer.atomic_graph}

        def get_monomer_indexed_edges(monomer_idx: MonomerId) -> Dict[EdgeExtId, AtomicEdgeInfo]:
            return {((monomer_idx, edge_ends[0]), (monomer_idx, edge_ends[1])): edge_info
                    for edge_ends, edge_info in self.nodes[monomer_idx]['monomer'].atomic_graph.edges.items()}

        def join_dicts(dicts: Iterable[Dict[Any]]) -> Dict[Any]:
            return dict(chain(*(a_dict.items() for a_dict in dicts)))

        atoms = join_dicts(get_monomer_indexed_atoms(monomer_idx)
                           for monomer_idx in self.nodes)
        inside_edges = join_dicts(get_monomer_indexed_edges(monomer_idx)
                                  for monomer_idx in self.nodes)

        def monomer_edge_to_atomic_edge_ext(edge_info: MonomerEdgeInfo) -> Tuple[EdgeExtId, AtomicEdgeInfo]:
            atomic_edge_ends_ext = EdgeExtId(tuple(edge_info['monomer_to_atom'].items()))
            atomic_edge_info = AtomicEdgeInfo({key: value
                                               for key, value in edge_info.items()
                                               if key != 'monomer_to_atom'})
            return (atomic_edge_ends_ext, atomic_edge_info)

        boundary_edges = dict(monomer_edge_to_atomic_edge_ext(edge_info)
                              for u in self.adj
                              for v, edge_info in self.adj[u].items())

        return (atoms, join_dicts([inside_edges, boundary_edges]))
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 23 (face font-lock-function-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (face font-lock-keyword-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t) 44 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) fontified t) 64 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-2-face) fontified t) 97 98 (face (rainbow-delimiters-depth-1-face) fontified t) 98 99 (fontified t) 99 100 (fontified t) 100 107 (fontified t) 107 108 (fontified t) 108 111 (face font-lock-keyword-face fontified t) 111 112 (fontified t) 112 137 (face font-lock-function-name-face fontified t) 137 138 (face (rainbow-delimiters-depth-1-face) fontified t) 138 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-1-face) fontified t) 161 169 (fontified t) 169 170 (face (rainbow-delimiters-depth-1-face) fontified t) 170 189 (fontified t) 189 190 (face (rainbow-delimiters-depth-1-face) fontified t) 190 192 (fontified t) 192 204 (fontified t) 204 211 (face font-lock-variable-name-face fontified t) 211 214 (fontified t) 214 218 (face font-lock-keyword-face fontified t) 218 224 (fontified t) 224 225 (face (rainbow-delimiters-depth-1-face) fontified t) 225 231 (fontified t) 231 236 (fontified t) 236 237 (face (rainbow-delimiters-depth-1-face) fontified t) 237 238 (face (rainbow-delimiters-depth-1-face) fontified t) 238 247 (face font-lock-string-face fontified t) 247 248 (face (rainbow-delimiters-depth-1-face) fontified t) 248 249 (fontified t) 249 261 (fontified t) 261 265 (face font-lock-keyword-face fontified t) 265 267 (face font-lock-keyword-face fontified t) 267 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-1-face) fontified t) 269 270 (face (rainbow-delimiters-depth-2-face) fontified t) 270 291 (fontified t) 291 292 (face (rainbow-delimiters-depth-2-face) fontified t) 292 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-2-face) fontified t) 321 329 (fontified t) 329 330 (face (rainbow-delimiters-depth-2-face) fontified t) 330 331 (fontified t) 331 351 (fontified t) 351 354 (face font-lock-keyword-face fontified t) 354 364 (fontified t) 364 366 (face font-lock-keyword-face fontified t) 366 380 (fontified t) 380 387 (fontified t) 387 388 (face (rainbow-delimiters-depth-1-face) fontified t) 388 389 (fontified t) 389 390 (fontified t) 390 398 (fontified t) 398 401 (face font-lock-keyword-face fontified t) 401 402 (fontified t) 402 427 (face font-lock-function-name-face fontified t) 427 428 (face (rainbow-delimiters-depth-1-face) fontified t) 428 450 (fontified t) 450 451 (face (rainbow-delimiters-depth-1-face) fontified t) 451 459 (fontified t) 459 460 (face (rainbow-delimiters-depth-1-face) fontified t) 460 485 (fontified t) 485 486 (face (rainbow-delimiters-depth-1-face) fontified t) 486 500 (fontified t) 500 506 (face font-lock-keyword-face fontified t) 506 507 (fontified t) 507 508 (face (rainbow-delimiters-depth-1-face) fontified t) 508 509 (face (rainbow-delimiters-depth-2-face) fontified t) 509 510 (face (rainbow-delimiters-depth-3-face) fontified t) 510 532 (fontified t) 532 533 (face (rainbow-delimiters-depth-4-face) fontified t) 533 534 (fontified t) 534 535 (face (rainbow-delimiters-depth-4-face) fontified t) 535 536 (face (rainbow-delimiters-depth-3-face) fontified t) 536 538 (fontified t) 538 539 (face (rainbow-delimiters-depth-3-face) fontified t) 539 561 (fontified t) 561 562 (face (rainbow-delimiters-depth-4-face) fontified t) 562 563 (fontified t) 563 564 (face (rainbow-delimiters-depth-4-face) fontified t) 564 565 (face (rainbow-delimiters-depth-3-face) fontified t) 565 566 (face (rainbow-delimiters-depth-2-face) fontified t) 566 598 (fontified t) 598 600 (face font-lock-keyword-face fontified t) 600 601 (fontified t face font-lock-keyword-face) 601 623 (fontified t) 623 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t) 626 630 (fontified t face font-lock-keyword-face) 630 636 (fontified t) 636 637 (fontified t face (rainbow-delimiters-depth-2-face)) 637 648 (fontified t) 648 649 (fontified t face (rainbow-delimiters-depth-2-face)) 649 650 (fontified t face (rainbow-delimiters-depth-2-face)) 650 659 (fontified t face font-lock-string-face) 659 660 (fontified t face (rainbow-delimiters-depth-2-face)) 660 685 (fontified t) 685 686 (fontified t face (rainbow-delimiters-depth-2-face)) 686 687 (fontified t face (rainbow-delimiters-depth-2-face)) 687 688 (fontified t face (rainbow-delimiters-depth-1-face)) 688 689 (fontified t) 689 698 (fontified t) 698 701 (face font-lock-keyword-face fontified t) 701 702 (fontified t) 702 712 (face font-lock-function-name-face fontified t) 712 713 (face (rainbow-delimiters-depth-1-face) fontified t) 713 728 (fontified t) 728 729 (face (rainbow-delimiters-depth-2-face) fontified t) 729 733 (fontified t) 733 734 (face (rainbow-delimiters-depth-3-face) fontified t) 734 737 (fontified t) 737 738 (face (rainbow-delimiters-depth-3-face) fontified t) 738 739 (face (rainbow-delimiters-depth-2-face) fontified t) 739 740 (face (rainbow-delimiters-depth-1-face) fontified t) 740 748 (fontified t) 748 749 (face (rainbow-delimiters-depth-1-face) fontified t) 749 752 (fontified t) 752 753 (face (rainbow-delimiters-depth-1-face) fontified t) 753 755 (fontified t) 755 767 (fontified t) 767 773 (face font-lock-keyword-face fontified t) 773 774 (fontified t) 774 778 (face font-lock-builtin-face fontified t) 778 779 (face (rainbow-delimiters-depth-1-face) fontified t) 779 784 (fontified t) 784 785 (face (rainbow-delimiters-depth-2-face) fontified t) 785 786 (fontified t) 786 787 (face (rainbow-delimiters-depth-3-face) fontified t) 787 799 (fontified t) 799 800 (face (rainbow-delimiters-depth-4-face) fontified t) 800 801 (face (rainbow-delimiters-depth-4-face) fontified t) 801 802 (fontified t) 802 805 (face font-lock-keyword-face fontified t) 805 813 (fontified t) 813 815 (face font-lock-keyword-face fontified t) 815 821 (fontified t) 821 822 (face (rainbow-delimiters-depth-3-face) fontified t) 822 823 (face (rainbow-delimiters-depth-2-face) fontified t) 823 824 (face (rainbow-delimiters-depth-1-face) fontified t) 824 834 (fontified t) 834 839 (face font-lock-variable-name-face fontified t) 839 852 (fontified t) 852 853 (face (rainbow-delimiters-depth-1-face) fontified t) 853 878 (fontified t) 878 879 (face (rainbow-delimiters-depth-2-face) fontified t) 879 889 (fontified t) 889 890 (fontified t) 890 891 (face (rainbow-delimiters-depth-2-face) fontified t) 891 892 (fontified t) 892 919 (fontified t) 919 922 (face font-lock-keyword-face fontified t) 922 935 (fontified t) 935 937 (face font-lock-keyword-face fontified t) 937 938 (fontified t) 938 942 (face font-lock-keyword-face fontified t) 942 948 (fontified t) 948 949 (face (rainbow-delimiters-depth-1-face) fontified t) 949 950 (fontified t) 950 958 (fontified t) 958 970 (face font-lock-variable-name-face fontified t) 970 983 (fontified t) 983 984 (face (rainbow-delimiters-depth-1-face) fontified t) 984 1009 (fontified t) 1009 1010 (face (rainbow-delimiters-depth-2-face) fontified t) 1010 1021 (fontified t) 1021 1022 (face (rainbow-delimiters-depth-2-face) fontified t) 1022 1057 (fontified t) 1057 1060 (face font-lock-keyword-face fontified t) 1060 1073 (fontified t) 1073 1075 (face font-lock-keyword-face fontified t) 1075 1076 (fontified t) 1076 1080 (face font-lock-keyword-face fontified t) 1080 1086 (fontified t) 1086 1087 (face (rainbow-delimiters-depth-1-face) fontified t) 1087 1097 (fontified t) 1097 1100 (face font-lock-keyword-face fontified t) 1100 1101 (fontified t) 1101 1132 (face font-lock-function-name-face fontified t) 1132 1133 (face (rainbow-delimiters-depth-1-face) fontified t) 1133 1159 (fontified t) 1159 1160 (face (rainbow-delimiters-depth-1-face) fontified t) 1160 1169 (fontified t) 1169 1170 (face (rainbow-delimiters-depth-1-face) fontified t) 1170 1189 (fontified t) 1189 1195 (fontified t) 1195 1196 (fontified t face (rainbow-delimiters-depth-1-face)) 1196 1198 (fontified t) 1198 1210 (fontified t) 1210 1230 (face font-lock-variable-name-face fontified t) 1230 1242 (fontified t) 1242 1243 (face (rainbow-delimiters-depth-1-face) fontified t) 1243 1248 (face font-lock-builtin-face fontified t) 1248 1249 (face (rainbow-delimiters-depth-2-face) fontified t) 1249 1255 (fontified t) 1255 1258 (fontified t) 1258 1259 (face (rainbow-delimiters-depth-3-face) fontified t) 1259 1276 (face font-lock-string-face fontified t) 1276 1277 (face (rainbow-delimiters-depth-3-face) fontified t) 1277 1283 (fontified t) 1283 1284 (face (rainbow-delimiters-depth-3-face) fontified t) 1284 1285 (face (rainbow-delimiters-depth-3-face) fontified t) 1285 1286 (face (rainbow-delimiters-depth-2-face) fontified t) 1286 1287 (face (rainbow-delimiters-depth-1-face) fontified t) 1287 1288 (fontified t) 1288 1300 (fontified t) 1300 1316 (face font-lock-variable-name-face fontified t) 1316 1333 (fontified t) 1333 1334 (face (rainbow-delimiters-depth-1-face) fontified t) 1334 1335 (face (rainbow-delimiters-depth-2-face) fontified t) 1335 1392 (fontified t) 1392 1393 (fontified t) 1393 1396 (face font-lock-keyword-face fontified t) 1396 1408 (fontified t) 1408 1410 (face font-lock-keyword-face fontified t) 1410 1426 (fontified t) 1426 1427 (face (rainbow-delimiters-depth-3-face) fontified t) 1427 1428 (face (rainbow-delimiters-depth-3-face) fontified t) 1428 1429 (fontified t) 1429 1450 (fontified t) 1450 1476 (fontified t) 1476 1478 (face font-lock-keyword-face fontified t) 1478 1486 (fontified t) 1486 1503 (face font-lock-string-face fontified t) 1503 1504 (face (rainbow-delimiters-depth-2-face) fontified t) 1504 1505 (face (rainbow-delimiters-depth-1-face) fontified t) 1505 1506 (fontified t) 1506 1518 (fontified t) 1518 1524 (face font-lock-keyword-face fontified t) 1524 1525 (fontified t) 1525 1526 (face (rainbow-delimiters-depth-1-face) fontified t) 1526 1564 (fontified t) 1564 1565 (face (rainbow-delimiters-depth-1-face) fontified t) 1565 1575 (fontified t) 1575 1589 (face font-lock-variable-name-face fontified t) 1589 1592 (fontified t) 1592 1596 (face font-lock-builtin-face fontified t) 1596 1597 (face (rainbow-delimiters-depth-1-face) fontified t) 1597 1628 (fontified t) 1628 1629 (face (rainbow-delimiters-depth-2-face) fontified t) 1629 1638 (fontified t) 1638 1639 (face (rainbow-delimiters-depth-2-face) fontified t) 1639 1670 (fontified t) 1670 1673 (face font-lock-keyword-face fontified t) 1673 1676 (fontified t) 1676 1678 (face font-lock-keyword-face fontified t) 1678 1679 (fontified t) 1679 1683 (face font-lock-keyword-face fontified t) 1683 1698 (fontified t) 1698 1718 (fontified t) 1718 1721 (fontified t face font-lock-keyword-face) 1721 1735 (fontified t) 1735 1737 (fontified t face font-lock-keyword-face) 1737 1738 (fontified t) 1738 1742 (fontified t face font-lock-keyword-face) 1742 1746 (fontified t) 1746 1747 (fontified t face (rainbow-delimiters-depth-2-face)) 1747 1748 (fontified t) 1748 1749 (fontified t face (rainbow-delimiters-depth-2-face)) 1749 1755 (fontified t) 1755 1756 (fontified t face (rainbow-delimiters-depth-2-face)) 1756 1757 (fontified t face (rainbow-delimiters-depth-2-face)) 1757 1758 (fontified t face (rainbow-delimiters-depth-1-face)) 1758 1759 (fontified t) 1759 1768 (fontified t) 1768 1774 (face font-lock-keyword-face fontified t) 1774 1775 (fontified t) 1775 1776 (face (rainbow-delimiters-depth-1-face) fontified t) 1776 1788 (fontified t) 1788 1793 (fontified t) 1793 1794 (face (rainbow-delimiters-depth-2-face) fontified t) 1794 1795 (face (rainbow-delimiters-depth-3-face) fontified t) 1795 1823 (fontified t) 1823 1824 (face (rainbow-delimiters-depth-3-face) fontified t) 1824 1825 (face (rainbow-delimiters-depth-2-face) fontified t) 1825 1826 (face (rainbow-delimiters-depth-1-face) fontified t) 1826 1827 (fontified t)) . 4199) (undo-tree-id2331 . -1760) (undo-tree-id2332 . -1760) (undo-tree-id2333 . -1760) (undo-tree-id2334 . -1760) 5959) ((4199 . 6026)) (25900 3803 95110 59000) 0 nil] [nil nil ((#("


    
    # TODO: draw different core monomers in different colors?
    # the function is a mess... TODO: rewrite
" 0 12 (fontified t) 12 14 (face font-lock-comment-delimiter-face fontified t) 14 42 (face font-lock-comment-face fontified t) 42 70 (fontified t face font-lock-comment-face) 70 74 (fontified t) 74 76 (face font-lock-comment-delimiter-face fontified t) 76 116 (face font-lock-comment-face fontified t)) . 7424) (undo-tree-id2305 . -116) (undo-tree-id2306 . -116) (undo-tree-id2307 . -116) (undo-tree-id2309 . -7) (undo-tree-id2311 . -69) (undo-tree-id2313 . -1) (undo-tree-id2315 . -1) (undo-tree-id2317 . -1) (undo-tree-id2319 . -116) (undo-tree-id2320 . -116) (undo-tree-id2322 . -116) (undo-tree-id2324 . -116) (undo-tree-id2326 . -116) (undo-tree-id2328 . -116) 7540 (t 25900 3710 562344 486000)) ((7424 . 7540) (t 25900 3732 158796 481000)) (25900 3755 322358 521000) 0 nil])
([nil nil ((7544 . 7545) 7543) nil (25900 3838 803226 221000) 0 nil])
([nil nil ((nil rear-nonsticky nil 726 . 727) (723 . 2550)) ((#("    def to_atomic_graph(self) -> Tuple[Dict[AtomExtId, AtomInfo], Dict[EdgeExtId, AtomicEdgeInfo]]:
        def get_monomer_indexed_atoms(monomer_idx: MonomerId) -> Dict[AtomExtId, AtomInfo]:
            monomer = self.nodes[monomer_idx]['monomer']
            return {(monomer_idx, atom_idx): monomer.atomic_graph.nodes[atom_idx]
                    for atom_idx in monomer.atomic_graph}

        def get_monomer_indexed_edges(monomer_idx: MonomerId) -> Dict[EdgeExtId, AtomicEdgeInfo]:
            return {((monomer_idx, edge_ends[0]), (monomer_idx, edge_ends[1])): edge_info
                    for edge_ends, edge_info in self.nodes[monomer_idx]['monomer'].atomic_graph.edges.items()}

        def join_dicts(dicts: Iterable[Dict[Any]]) -> Dict[Any]:
            return dict(chain(*(a_dict.items() for a_dict in dicts)))

        atoms = join_dicts(get_monomer_indexed_atoms(monomer_idx)
                           for monomer_idx in self.nodes)
        inside_edges = join_dicts(get_monomer_indexed_edges(monomer_idx)
                                  for monomer_idx in self.nodes)

        def monomer_edge_to_atomic_edge_ext(edge_info: MonomerEdgeInfo) -> Tuple[EdgeExtId, AtomicEdgeInfo]:
            atomic_edge_ends_ext = EdgeExtId(tuple(edge_info['monomer_to_atom'].items()))
            atomic_edge_info = AtomicEdgeInfo({key: value
                                               for key, value in edge_info.items()
                                               if key != 'monomer_to_atom'})
            return (atomic_edge_ends_ext, atomic_edge_info)

        boundary_edges = dict(monomer_edge_to_atomic_edge_ext(edge_info)
                              for u in self.adj
                              for v, edge_info in self.adj[u].items())

        return (atoms, join_dicts([inside_edges, boundary_edges]))
" 0 3 (fontified nil) 3 4 (rear-nonsticky nil fontified nil) 4 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 23 (face font-lock-function-name-face fontified nil) 23 24 (face (rainbow-delimiters-depth-1-face) fontified nil) 24 27 (face font-lock-keyword-face fontified nil) 27 28 (face font-lock-keyword-face fontified nil) 28 29 (face (rainbow-delimiters-depth-1-face) fontified nil) 29 38 (fontified nil) 38 39 (face (rainbow-delimiters-depth-1-face) fontified nil) 39 43 (fontified nil) 43 44 (face (rainbow-delimiters-depth-2-face) fontified nil) 44 63 (fontified nil) 63 64 (face (rainbow-delimiters-depth-2-face) fontified nil) 64 70 (fontified nil) 70 71 (face (rainbow-delimiters-depth-2-face) fontified nil) 71 96 (fontified nil) 96 97 (face (rainbow-delimiters-depth-2-face) fontified nil) 97 98 (face (rainbow-delimiters-depth-1-face) fontified nil) 98 99 (fontified nil) 99 100 (fontified nil) 100 107 (fontified t) 107 108 (fontified t) 108 111 (face font-lock-keyword-face fontified t) 111 112 (fontified t) 112 137 (face font-lock-function-name-face fontified t) 137 138 (face (rainbow-delimiters-depth-1-face) fontified t) 138 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-1-face) fontified t) 161 169 (fontified t) 169 170 (face (rainbow-delimiters-depth-1-face) fontified t) 170 189 (fontified t) 189 190 (face (rainbow-delimiters-depth-1-face) fontified t) 190 192 (fontified t) 192 204 (fontified t) 204 211 (face font-lock-variable-name-face fontified t) 211 214 (fontified t) 214 218 (face font-lock-keyword-face fontified t) 218 224 (fontified t) 224 225 (face (rainbow-delimiters-depth-1-face) fontified t) 225 231 (fontified t) 231 236 (fontified t) 236 237 (face (rainbow-delimiters-depth-1-face) fontified t) 237 238 (face (rainbow-delimiters-depth-1-face) fontified t) 238 247 (face font-lock-string-face fontified t) 247 248 (face (rainbow-delimiters-depth-1-face) fontified t) 248 249 (fontified t) 249 261 (fontified t) 261 265 (face font-lock-keyword-face fontified t) 265 267 (face font-lock-keyword-face fontified t) 267 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-1-face) fontified t) 269 270 (face (rainbow-delimiters-depth-2-face) fontified t) 270 291 (fontified t) 291 292 (face (rainbow-delimiters-depth-2-face) fontified t) 292 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-2-face) fontified t) 321 329 (fontified t) 329 330 (face (rainbow-delimiters-depth-2-face) fontified t) 330 331 (fontified t) 331 351 (fontified t) 351 354 (face font-lock-keyword-face fontified t) 354 364 (fontified t) 364 366 (face font-lock-keyword-face fontified t) 366 380 (fontified t) 380 387 (fontified t) 387 388 (face (rainbow-delimiters-depth-1-face) fontified t) 388 389 (fontified t) 389 390 (fontified t) 390 398 (fontified t) 398 401 (face font-lock-keyword-face fontified t) 401 402 (fontified t) 402 427 (face font-lock-function-name-face fontified t) 427 428 (face (rainbow-delimiters-depth-1-face) fontified t) 428 450 (fontified t) 450 451 (face (rainbow-delimiters-depth-1-face) fontified t) 451 459 (fontified t) 459 460 (face (rainbow-delimiters-depth-1-face) fontified t) 460 485 (fontified t) 485 486 (face (rainbow-delimiters-depth-1-face) fontified t) 486 500 (fontified t) 500 506 (face font-lock-keyword-face fontified t) 506 507 (fontified t) 507 508 (face (rainbow-delimiters-depth-1-face) fontified t) 508 509 (face (rainbow-delimiters-depth-2-face) fontified t) 509 510 (face (rainbow-delimiters-depth-3-face) fontified t) 510 532 (fontified t) 532 533 (face (rainbow-delimiters-depth-4-face) fontified t) 533 534 (fontified t) 534 535 (face (rainbow-delimiters-depth-4-face) fontified t) 535 536 (face (rainbow-delimiters-depth-3-face) fontified t) 536 538 (fontified t) 538 539 (face (rainbow-delimiters-depth-3-face) fontified t) 539 561 (fontified t) 561 562 (face (rainbow-delimiters-depth-4-face) fontified t) 562 563 (fontified t) 563 564 (face (rainbow-delimiters-depth-4-face) fontified t) 564 565 (face (rainbow-delimiters-depth-3-face) fontified t) 565 566 (face (rainbow-delimiters-depth-2-face) fontified t) 566 578 (fontified t) 578 598 (fontified t) 598 600 (face font-lock-keyword-face fontified t) 600 601 (face font-lock-keyword-face fontified t) 601 623 (fontified t) 623 625 (face font-lock-keyword-face fontified t) 625 626 (fontified t) 626 630 (face font-lock-keyword-face fontified t) 630 636 (fontified t) 636 637 (face (rainbow-delimiters-depth-2-face) fontified t) 637 648 (fontified t) 648 649 (face (rainbow-delimiters-depth-2-face) fontified t) 649 650 (face (rainbow-delimiters-depth-2-face) fontified t) 650 659 (face font-lock-string-face fontified t) 659 660 (face (rainbow-delimiters-depth-2-face) fontified t) 660 685 (fontified t) 685 686 (face (rainbow-delimiters-depth-2-face) fontified t) 686 687 (face (rainbow-delimiters-depth-2-face) fontified t) 687 688 (face (rainbow-delimiters-depth-1-face) fontified t) 688 689 (fontified t) 689 698 (fontified t) 698 701 (face font-lock-keyword-face fontified t) 701 702 (fontified t) 702 712 (face font-lock-function-name-face fontified t) 712 713 (face (rainbow-delimiters-depth-1-face) fontified t) 713 728 (fontified t) 728 729 (face (rainbow-delimiters-depth-2-face) fontified t) 729 733 (fontified t) 733 734 (face (rainbow-delimiters-depth-3-face) fontified t) 734 737 (fontified t) 737 738 (face (rainbow-delimiters-depth-3-face) fontified t) 738 739 (face (rainbow-delimiters-depth-2-face) fontified t) 739 740 (face (rainbow-delimiters-depth-1-face) fontified t) 740 748 (fontified t) 748 749 (face (rainbow-delimiters-depth-1-face) fontified t) 749 752 (fontified t) 752 753 (face (rainbow-delimiters-depth-1-face) fontified t) 753 755 (fontified t) 755 767 (fontified t) 767 773 (face font-lock-keyword-face fontified t) 773 774 (fontified t) 774 778 (face font-lock-builtin-face fontified t) 778 779 (face (rainbow-delimiters-depth-1-face) fontified t) 779 784 (fontified t) 784 785 (face (rainbow-delimiters-depth-2-face) fontified t) 785 786 (fontified t) 786 787 (face (rainbow-delimiters-depth-3-face) fontified t) 787 799 (fontified t) 799 800 (face (rainbow-delimiters-depth-4-face) fontified t) 800 801 (face (rainbow-delimiters-depth-4-face) fontified t) 801 802 (fontified t) 802 805 (face font-lock-keyword-face fontified t) 805 813 (fontified t) 813 815 (face font-lock-keyword-face fontified t) 815 821 (fontified t) 821 822 (face (rainbow-delimiters-depth-3-face) fontified t) 822 823 (face (rainbow-delimiters-depth-2-face) fontified t) 823 824 (face (rainbow-delimiters-depth-1-face) fontified t) 824 834 (fontified t) 834 839 (face font-lock-variable-name-face fontified t) 839 852 (fontified t) 852 853 (face (rainbow-delimiters-depth-1-face) fontified t) 853 878 (fontified t) 878 879 (face (rainbow-delimiters-depth-2-face) fontified t) 879 889 (fontified t) 889 890 (fontified t) 890 891 (face (rainbow-delimiters-depth-2-face) fontified t) 891 892 (fontified t) 892 919 (fontified t) 919 922 (face font-lock-keyword-face fontified t) 922 935 (fontified t) 935 937 (face font-lock-keyword-face fontified t) 937 938 (fontified t) 938 942 (face font-lock-keyword-face fontified t) 942 948 (fontified t) 948 949 (face (rainbow-delimiters-depth-1-face) fontified t) 949 950 (fontified t) 950 958 (fontified t) 958 970 (face font-lock-variable-name-face fontified t) 970 983 (fontified t) 983 984 (face (rainbow-delimiters-depth-1-face) fontified t) 984 1009 (fontified t) 1009 1010 (face (rainbow-delimiters-depth-2-face) fontified t) 1010 1021 (fontified t) 1021 1022 (face (rainbow-delimiters-depth-2-face) fontified t) 1022 1057 (fontified t) 1057 1060 (face font-lock-keyword-face fontified t) 1060 1073 (fontified t) 1073 1075 (face font-lock-keyword-face fontified t) 1075 1076 (fontified t) 1076 1078 (face font-lock-keyword-face fontified t) 1078 1080 (face font-lock-keyword-face fontified t) 1080 1086 (fontified t) 1086 1087 (face (rainbow-delimiters-depth-1-face) fontified t) 1087 1088 (fontified t) 1088 1097 (fontified t) 1097 1100 (face font-lock-keyword-face fontified t) 1100 1101 (fontified t) 1101 1132 (face font-lock-function-name-face fontified t) 1132 1133 (face (rainbow-delimiters-depth-1-face) fontified t) 1133 1159 (fontified t) 1159 1160 (face (rainbow-delimiters-depth-1-face) fontified t) 1160 1169 (fontified t) 1169 1170 (face (rainbow-delimiters-depth-1-face) fontified t) 1170 1189 (fontified t) 1189 1195 (fontified t) 1195 1196 (face (rainbow-delimiters-depth-1-face) fontified t) 1196 1198 (fontified t) 1198 1210 (fontified t) 1210 1230 (face font-lock-variable-name-face fontified t) 1230 1242 (fontified t) 1242 1243 (face (rainbow-delimiters-depth-1-face) fontified t) 1243 1248 (face font-lock-builtin-face fontified t) 1248 1249 (face (rainbow-delimiters-depth-2-face) fontified t) 1249 1255 (fontified t) 1255 1258 (fontified t) 1258 1259 (face (rainbow-delimiters-depth-3-face) fontified t) 1259 1276 (face font-lock-string-face fontified t) 1276 1277 (face (rainbow-delimiters-depth-3-face) fontified t) 1277 1283 (fontified t) 1283 1284 (face (rainbow-delimiters-depth-3-face) fontified t) 1284 1285 (face (rainbow-delimiters-depth-3-face) fontified t) 1285 1286 (face (rainbow-delimiters-depth-2-face) fontified t) 1286 1287 (face (rainbow-delimiters-depth-1-face) fontified t) 1287 1288 (fontified t) 1288 1300 (fontified t) 1300 1316 (face font-lock-variable-name-face fontified t) 1316 1333 (fontified t) 1333 1334 (face (rainbow-delimiters-depth-1-face) fontified t) 1334 1335 (face (rainbow-delimiters-depth-2-face) fontified t) 1335 1392 (fontified t) 1392 1393 (fontified t) 1393 1396 (face font-lock-keyword-face fontified t) 1396 1408 (fontified t) 1408 1410 (face font-lock-keyword-face fontified t) 1410 1426 (fontified t) 1426 1427 (face (rainbow-delimiters-depth-3-face) fontified t) 1427 1428 (face (rainbow-delimiters-depth-3-face) fontified t) 1428 1429 (fontified t) 1429 1450 (fontified t) 1450 1476 (fontified t) 1476 1478 (face font-lock-keyword-face fontified t) 1478 1486 (fontified t) 1486 1503 (face font-lock-string-face fontified t) 1503 1504 (face (rainbow-delimiters-depth-2-face) fontified t) 1504 1505 (face (rainbow-delimiters-depth-1-face) fontified t) 1505 1506 (fontified t) 1506 1518 (fontified t) 1518 1524 (face font-lock-keyword-face fontified t) 1524 1525 (fontified t) 1525 1526 (face (rainbow-delimiters-depth-1-face) fontified t) 1526 1564 (fontified t) 1564 1565 (face (rainbow-delimiters-depth-1-face) fontified t) 1565 1575 (fontified t) 1575 1588 (face font-lock-variable-name-face fontified t) 1588 1589 (face font-lock-variable-name-face fontified t) 1589 1592 (fontified t) 1592 1596 (face font-lock-builtin-face fontified t) 1596 1597 (face (rainbow-delimiters-depth-1-face) fontified t) 1597 1628 (fontified t) 1628 1629 (face (rainbow-delimiters-depth-2-face) fontified t) 1629 1638 (fontified t) 1638 1639 (face (rainbow-delimiters-depth-2-face) fontified t) 1639 1640 (fontified t) 1640 1670 (fontified t) 1670 1673 (face font-lock-keyword-face fontified t) 1673 1676 (fontified t) 1676 1678 (face font-lock-keyword-face fontified t) 1678 1679 (fontified t) 1679 1683 (face font-lock-keyword-face fontified t) 1683 1698 (fontified t) 1698 1718 (fontified t) 1718 1721 (face font-lock-keyword-face fontified t) 1721 1735 (fontified t) 1735 1737 (face font-lock-keyword-face fontified t) 1737 1738 (fontified t) 1738 1742 (face font-lock-keyword-face fontified t) 1742 1746 (fontified t) 1746 1747 (face (rainbow-delimiters-depth-2-face) fontified t) 1747 1748 (fontified t) 1748 1749 (face (rainbow-delimiters-depth-2-face) fontified t) 1749 1755 (fontified t) 1755 1756 (face (rainbow-delimiters-depth-2-face) fontified t) 1756 1757 (face (rainbow-delimiters-depth-2-face) fontified t) 1757 1758 (face (rainbow-delimiters-depth-1-face) fontified t) 1758 1759 (fontified t) 1759 1768 (fontified t) 1768 1774 (face font-lock-keyword-face fontified t) 1774 1775 (fontified t) 1775 1776 (face (rainbow-delimiters-depth-1-face) fontified t) 1776 1788 (fontified t) 1788 1793 (fontified t) 1793 1794 (face (rainbow-delimiters-depth-2-face) fontified t) 1794 1795 (face (rainbow-delimiters-depth-3-face) fontified t) 1795 1823 (fontified t) 1823 1824 (face (rainbow-delimiters-depth-3-face) fontified t) 1824 1825 (face (rainbow-delimiters-depth-2-face) fontified t) 1825 1826 (face (rainbow-delimiters-depth-1-face) fontified t) 1826 1827 (fontified t)) . 723) (undo-tree-id2335 . -1827) (undo-tree-id2336 . -1826) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -5) (undo-tree-id2340 . -79) (undo-tree-id2341 . -99) (undo-tree-id2342 . -4) (undo-tree-id2343 . -99) (undo-tree-id2344 . -179) (undo-tree-id2345 . -191) (undo-tree-id2346 . -328) (undo-tree-id2347 . -330) (undo-tree-id2348 . -469) (undo-tree-id2349 . -487) (undo-tree-id2350 . -567) (undo-tree-id2351 . -577) (undo-tree-id2352 . -657) (undo-tree-id2353 . -688) (undo-tree-id2354 . -1168) (undo-tree-id2355 . -1197) (undo-tree-id2356 . -1277) (undo-tree-id2357 . -1287) (undo-tree-id2358 . -1425) (undo-tree-id2359 . -1428) (undo-tree-id2360 . -3) (undo-tree-id2361 . -4) (undo-tree-id2362 . -4) (nil rear-nonsticky t 726 . 727)) (25900 3803 94171 352000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 7359) (t 25900 3732 158796 481000)) ((7359 . 7360)) (25900 3754 981687 45000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7548 . 7549) (7545 . 8892)) nil (25900 3838 803225 592000) 0 nil])
nil
([nil nil ((#("1" 0 1 (fontified t)) . 7359)) ((7359 . 7360)) (25900 3754 669026 497000) 0 nil])
([nil nil ((8892 . 8895)) nil (25900 3838 803224 538000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 7359) (undo-tree-id2330 . -1)) ((7359 . 7360)) (25900 3754 668804 332000) 0 nil])
([nil nil ((nil fontified t 8895 . 8896) (nil face font-lock-string-face 8895 . 8896) (8895 . 8896)) nil (25900 3838 803220 690000) 0 nil])
nil
([nil nil ((#("I" 0 1 (fontified t)) . 5440) (t 25900 3838 809032 727000)) nil (25900 7698 446693 60000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 5440)) nil (25900 7698 446692 228000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4199) (undo-tree-id2375 . 1)) nil (25900 7698 446691 532000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . 4277) (undo-tree-id2374 . -1)) nil (25900 7698 446689 263000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4277)) nil (25900 7698 446676 106000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 4416) (t 25900 7698 456045 133000)) nil (25900 7737 177553 234000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4416)) nil (25900 7737 177552 565000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4416)) nil (25900 7737 177551 993000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4416)) nil (25900 7737 177551 504000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 4416)) nil (25900 7737 177550 863000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 4416)) nil (25900 7737 177549 902000) 0 nil])
([nil nil ((4416 . 4424)) nil (25900 7737 177549 10000) 0 nil])
([nil nil ((4435 . 4436)) nil (25900 7737 177545 509000) 0 nil])
([nil nil ((#("]['monomer']" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t) 1 2 (face (rainbow-delimiters-unmatched-face) fontified t) 2 11 (face font-lock-string-face fontified t) 11 12 (face (rainbow-delimiters-unmatched-face) fontified t)) . 4436) (undo-tree-id2376 . 12) (undo-tree-id2377 . -1) (undo-tree-id2378 . -12) (undo-tree-id2379 . -1) (undo-tree-id2380 . -11) (undo-tree-id2381 . -11) (undo-tree-id2382 . -11) (undo-tree-id2383 . -11) (undo-tree-id2384 . -11) (undo-tree-id2385 . -11) (undo-tree-id2386 . -11) (undo-tree-id2387 . -11) (undo-tree-id2388 . -11) (t 25900 7737 184866 476000)) nil (25900 7745 949352 273000) 0 nil])
([nil nil ((#("monomer" 0 7 (face font-lock-variable-name-face fontified t)) . 4401) (undo-tree-id2389 . -7) (t 25900 7745 953052 481000)) nil (25900 7765 457370 738000) 0 nil])
([nil nil ((4401 . 4413)) nil (25900 7765 457357 951000) 0 nil])
([nil nil ((4441 . 4454) (t 25900 7765 461466 400000)) nil (25900 7768 569385 74000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 4500) (t 25900 7768 569532 355000)) nil (25900 7778 127336 251000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4500)) nil (25900 7778 127335 685000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 4500)) nil (25900 7778 127335 296000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4500)) nil (25900 7778 127334 704000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 4500)) nil (25900 7778 127334 264000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4500)) nil (25900 7778 127333 698000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 4500)) nil (25900 7778 127333 55000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 4500)) nil (25900 7778 127332 182000) 0 nil])
([nil nil ((#("monomer" 0 7 (fontified t)) . 4565) (undo-tree-id2406 . -7) (undo-tree-id2407 . -7) (undo-tree-id2408 . -7) (undo-tree-id2409 . -7) (undo-tree-id2410 . -7) (undo-tree-id2411 . -7) (undo-tree-id2412 . -7) (undo-tree-id2413 . -7) (undo-tree-id2414 . -7) (undo-tree-id2415 . -7) (undo-tree-id2416 . -7) (undo-tree-id2417 . -7) (undo-tree-id2418 . -7) (undo-tree-id2419 . -7) (undo-tree-id2420 . -7) (undo-tree-id2421 . -7)) nil (25900 7778 127330 622000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 4565) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1)) nil (25900 7778 127318 229000) 0 nil])
([nil nil ((4293 . 4298) (t 25900 7778 133735 318000)) nil (25900 7858 787113 990000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 4293) (t 25900 7858 795447 874000)) nil (25900 7862 985135 970000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4293)) nil (25900 7862 985134 72000) 0 nil])
([nil nil ((4293 . 4294)) nil (25900 7862 985129 612000) 0 nil])
([nil nil ((4390 . 4394) (t 25900 7862 991536 995000)) nil (25900 7865 782782 747000) 0 nil])
([nil nil ((4317 . 4321) (t 25900 7865 791596 472000)) nil (25900 7934 829575 180000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-function-name-face fontified t)) . 4329)) nil (25900 7934 829574 526000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-function-name-face fontified t)) . 4329)) nil (25900 7934 829573 979000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-function-name-face fontified t)) . 4329)) nil (25900 7934 829573 583000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . 4329)) nil (25900 7934 829573 240000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-function-name-face fontified t)) . 4329)) nil (25900 7934 829572 878000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . 4329)) nil (25900 7934 829572 510000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-function-name-face fontified t)) . 4329)) nil (25900 7934 829571 996000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-function-name-face fontified t)) . 4329)) nil (25900 7934 829571 566000) 0 nil])
([nil nil ((4600 . 4604)) nil (25900 7934 829571 152000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-function-name-face fontified t)) . 4612)) nil (25900 7934 829570 549000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-function-name-face fontified t)) . 4612)) nil (25900 7934 829570 165000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-function-name-face fontified t)) . 4612)) nil (25900 7934 829569 676000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . 4612)) nil (25900 7934 829569 98000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-function-name-face fontified t)) . 4612)) nil (25900 7934 829568 551000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . 4612)) nil (25900 7934 829568 65000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-function-name-face fontified t)) . 4612)) nil (25900 7934 829567 123000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-function-name-face fontified t)) . 4612)) nil (25900 7934 829562 754000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . 4657) (t 25900 7934 833063 405000)) nil (25900 7942 893261 102000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4657)) nil (25900 7942 893255 941000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 4819) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (t 25900 7942 897234 799000)) nil (25900 7975 549872 524000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4819)) nil (25900 7975 549867 93000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4819)) nil (25900 7975 549866 402000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4819)) nil (25900 7975 549865 963000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 4819)) nil (25900 7975 549865 525000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 4819)) nil (25900 7975 549864 996000) 0 nil])
([nil nil ((4819 . 4827)) nil (25900 7975 549864 418000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 4838) (undo-tree-id2423 . -1)) nil (25900 7975 549863 665000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 4838)) nil (25900 7975 549861 786000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 4838)) nil (25900 7975 549861 313000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 4838)) nil (25900 7975 549860 730000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4838)) nil (25900 7975 549860 76000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 4838)) nil (25900 7975 549859 379000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 4838)) nil (25900 7975 549858 770000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 4838)) nil (25900 7975 549858 322000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4838) (undo-tree-id2422 . -1)) nil (25900 7975 549857 534000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 4838)) nil (25900 7975 549850 45000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . 4838)) nil (25900 7975 549849 437000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 4838)) nil (25900 7975 549847 725000) 0 nil])
([nil nil ((4838 . 4839)) nil (25900 7975 549843 154000) 0 nil])
([nil nil ((4726 . 4747) (#(" " 0 1 (fontified nil)) . 4725) (undo-tree-id2433 . -1) (4726 . 4727) (t 25900 7975 557929 76000)) nil (25900 7988 237704 356000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -4676) (undo-tree-id2440 . -12) (undo-tree-id2441 . -12) 4688 (4676 . 4688) (4676 . 4677) 4718 (t 25900 7988 238198 667000)) nil (25900 8014 716317 658000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4687 . 4688) (4676 . 4742)) nil (25900 8014 716315 896000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4742) (undo-tree-id2439 . 1)) nil (25900 8014 716315 177000) 0 nil])
([nil nil ((#("self" 0 4 (face font-lock-keyword-face fontified t)) . 4901) (undo-tree-id2438 . -4)) nil (25900 8014 716313 605000) 0 nil])
([nil nil ((#(".monomer(monomer_idx)" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t)) . 4901) (undo-tree-id2434 . -20) (undo-tree-id2435 . -1) (undo-tree-id2436 . -2) (undo-tree-id2437 . -1)) nil (25900 8014 716513 937000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 4901)) nil (25900 8015 912728 978000) 0 nil] [nil nil ((#(".atomic_graph" 0 13 (fontified t)) . 4901)) ((4901 . 4914)) (25900 8014 716296 152000) 0 nil])
([nil nil ((#("        def join_dicts(dicts: Iterable[Dict[Any]]) -> Dict[Any]:
            return dict(chain(*(a_dict.items() for a_dict in dicts)))
" 0 2 (fontified t) 2 8 (fontified t) 8 9 (face font-lock-keyword-face fontified t) 9 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 22 (face font-lock-function-name-face fontified t) 22 23 (face (rainbow-delimiters-depth-1-face) fontified t) 23 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-1-face) fontified t) 63 65 (fontified t) 65 77 (fontified t) 77 83 (face font-lock-keyword-face fontified t) 83 84 (fontified t) 84 88 (face font-lock-builtin-face fontified t) 88 89 (face (rainbow-delimiters-depth-1-face) fontified t) 89 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-2-face) fontified t) 95 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-3-face) fontified t) 97 109 (fontified t) 109 110 (face (rainbow-delimiters-depth-4-face) fontified t) 110 111 (face (rainbow-delimiters-depth-4-face) fontified t) 111 112 (fontified t) 112 115 (face font-lock-keyword-face fontified t) 115 123 (fontified t) 123 125 (face font-lock-keyword-face fontified t) 125 131 (fontified t) 131 132 (face (rainbow-delimiters-depth-3-face) fontified t) 132 133 (face (rainbow-delimiters-depth-2-face) fontified t) 133 134 (face (rainbow-delimiters-depth-1-face) fontified t) 134 135 (fontified t)) . 4930) (undo-tree-id2711 . -106) (undo-tree-id2712 . -41) (undo-tree-id2713 . -106) (undo-tree-id2714 . -106) (undo-tree-id2715 . -41) (undo-tree-id2716 . -106) 5036 (t 25900 8015 918787 262000)) nil (25900 8138 689528 345000) 0 nil])
nil
([nil nil ((341 . 342)) nil (25900 8138 689524 718000) 0 nil])
([nil nil ((341 . 357)) nil (25900 8138 689523 805000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -340) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (#("f" 0 1 (fontified t)) . -341) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (#("r" 0 1 (fontified t)) . -342) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (#("o" 0 1 (fontified t)) . -343) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (#("m" 0 1 (face font-lock-keyword-face fontified t)) . -344) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (#(" " 0 1 (fontified t)) . -345) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (#("s" 0 1 (fontified t)) . -346) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (#("r" 0 1 (fontified t)) . -347) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (#("c" 0 1 (fontified t)) . -348) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (#("." 0 1 (fontified t)) . -349) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (#("u" 0 1 (fontified t)) . -350) (undo-tree-id2704 . -1) (#("t" 0 1 (fontified t)) . -351) (undo-tree-id2705 . -1) (#("i" 0 1 (fontified t)) . -352) (undo-tree-id2706 . -1) (#("l" 0 1 (fontified t)) . -353) (undo-tree-id2707 . -1) (#("s" 0 1 (fontified t)) . -354) (undo-tree-id2708 . -1) (#("." 0 1 (fontified t)) . -355) (undo-tree-id2709 . -1) (#("m" 0 1 (fontified t)) . -356) (undo-tree-id2710 . -1) 357) nil (25900 8138 689513 445000) 0 nil])
([nil nil ((384 . 396) (t 25900 8138 689399 85000)) nil (25900 8146 830161 845000) 0 nil])
([nil nil ((#("import copy
from itertools import chain
" 0 6 (face font-lock-keyword-face fontified t) 6 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 27 (fontified t) 27 33 (face font-lock-keyword-face fontified t) 33 40 (fontified t)) . 397) (undo-tree-id2717 . -22) (undo-tree-id2718 . -10) (undo-tree-id2719 . -22) (undo-tree-id2720 . -22) (undo-tree-id2721 . -10) (undo-tree-id2722 . -22) 419 (t 25900 8146 837572 493000)) nil (25900 8151 695048 164000) 0 nil])
([nil nil ((#("    Any,
" 0 8 (fontified t) 8 9 (fontified t)) . 58) (undo-tree-id2724 . -7) 65 (t 25900 8151 701676 14000)) nil (25900 8164 30272 200000) 0 nil])
([nil nil ((#("    Union)
" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 11 (fontified t)) . 106) (undo-tree-id2723 . -7) 113) nil (25900 8164 30270 291000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 104)) nil (25900 8164 30261 101000) 0 nil])
([nil nil ((104 . 105)) nil (25900 8164 30257 251000) 0 nil])
([nil nil ((#("    Iterable,
" 0 13 (fontified t) 13 14 (fontified t)) . 68) (undo-tree-id2725 . -9) (undo-tree-id2726 . -9) (undo-tree-id2727 . -9) (undo-tree-id2728 . -9) (undo-tree-id2729 . -9) (undo-tree-id2730 . -9) (undo-tree-id2731 . -9) (undo-tree-id2732 . -9) (undo-tree-id2733 . -9) (undo-tree-id2734 . -9) (undo-tree-id2735 . -9) (undo-tree-id2736 . -9) (undo-tree-id2737 . -9) (undo-tree-id2738 . -9) (undo-tree-id2739 . -9) (undo-tree-id2740 . -9) (undo-tree-id2741 . -9) (undo-tree-id2742 . -9) 77 (t 25900 8164 37938 573000)) nil (25900 8170 697552 469000) 0 nil])
([nil nil ((#("AnyId = Any
" 0 2 (face font-lock-variable-name-face fontified t) 2 5 (face font-lock-variable-name-face fontified t) 5 12 (fontified t)) . 648) (undo-tree-id2832 . -9) 657 (t 25900 8170 706080 502000)) nil (25900 8207 695448 968000) 0 nil])
([nil nil ((643 . 650)) nil (25900 8207 695447 769000) 0 nil])
([nil nil ((#("NewTypeDict" 0 11 (fontified t)) . 643) (undo-tree-id2743 . 4) (undo-tree-id2744 . -7) (undo-tree-id2745 . -7) (undo-tree-id2746 . -7) (undo-tree-id2747 . -7) (undo-tree-id2748 . -7) (undo-tree-id2749 . -7) (undo-tree-id2750 . -7) (undo-tree-id2751 . -7) (undo-tree-id2752 . -11) (undo-tree-id2753 . -7) (undo-tree-id2754 . -7) (undo-tree-id2755 . -7) (undo-tree-id2756 . -7) (undo-tree-id2757 . -7) (undo-tree-id2758 . -7) (undo-tree-id2759 . -7) (undo-tree-id2760 . -7) (undo-tree-id2761 . -7) (undo-tree-id2762 . -7) (undo-tree-id2763 . -7) (undo-tree-id2764 . -7) (undo-tree-id2765 . -7) (undo-tree-id2766 . -7) (undo-tree-id2767 . -7) (undo-tree-id2768 . -7) (undo-tree-id2769 . -7) (undo-tree-id2770 . -11) (undo-tree-id2771 . -7) (undo-tree-id2772 . -7) (undo-tree-id2773 . -7) (undo-tree-id2774 . -7) (undo-tree-id2775 . -7) (undo-tree-id2776 . -7) (undo-tree-id2777 . -7) (undo-tree-id2778 . -7) (undo-tree-id2779 . -7) (undo-tree-id2780 . -7) (undo-tree-id2781 . -7) (undo-tree-id2782 . -7) (undo-tree-id2783 . -7) (undo-tree-id2784 . -7) (undo-tree-id2785 . -7) (undo-tree-id2786 . -7) (undo-tree-id2787 . -6) (undo-tree-id2788 . -6) (undo-tree-id2789 . -6) (undo-tree-id2790 . -6) (undo-tree-id2791 . -6) (undo-tree-id2792 . -6) (undo-tree-id2793 . -6) (undo-tree-id2794 . -6) (undo-tree-id2795 . -6) (undo-tree-id2796 . -6) (undo-tree-id2797 . -6) (undo-tree-id2798 . -6) (undo-tree-id2799 . -6) (undo-tree-id2800 . -6) (undo-tree-id2801 . -6) (undo-tree-id2802 . -6) (undo-tree-id2803 . -6) (undo-tree-id2804 . -6) (undo-tree-id2805 . -5) (undo-tree-id2806 . -5) (undo-tree-id2807 . -5) (undo-tree-id2808 . -5) (undo-tree-id2809 . -5) (undo-tree-id2810 . -5) (undo-tree-id2811 . -5) (undo-tree-id2812 . -5) (undo-tree-id2813 . -5) (undo-tree-id2814 . -5) (undo-tree-id2815 . -5) (undo-tree-id2816 . -5) (undo-tree-id2817 . -5) (undo-tree-id2818 . -5) (undo-tree-id2819 . -5) (undo-tree-id2820 . -5) (undo-tree-id2821 . -5) (undo-tree-id2822 . -5) (undo-tree-id2823 . -5) (undo-tree-id2824 . -5) (undo-tree-id2825 . -5) (undo-tree-id2826 . -5) (undo-tree-id2827 . -5) (undo-tree-id2828 . -5) (undo-tree-id2829 . -5) (undo-tree-id2830 . -5) (undo-tree-id2831 . -5)) nil (25900 8207 695444 287000) 0 nil])
([nil nil ((643 . 647)) nil (25900 8207 695395 646000) 0 nil])
([nil nil ((647 . 648) (t 25900 8207 702868 46000) 646) nil (25900 8244 280080 920000) 0 nil])
([nil nil ((648 . 654)) nil (25900 8244 280080 100000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -648) (undo-tree-id2833 . -1) (#("A" 0 1 (fontified t)) . -649) (undo-tree-id2834 . -1) (#("t" 0 1 (fontified t)) . -650) (undo-tree-id2835 . -1) (#("o" 0 1 (fontified t)) . -651) (undo-tree-id2836 . -1) (#("m" 0 1 (fontified t)) . -652) (undo-tree-id2837 . -1) (#("I" 0 1 (fontified t)) . -653) (undo-tree-id2838 . -1) 654) nil (25900 8244 280077 706000) 0 nil])
([nil nil ((648 . 663)) nil (25900 8244 280065 503000) 0 nil])
([nil nil ((663 . 667)) nil (25900 8244 280064 943000) 0 nil])
([nil nil ((667 . 668)) nil (25900 8244 280063 384000) 0 nil])
([nil nil ((668 . 687)) nil (25900 8244 280059 154000) 0 nil])
([nil nil ((#("MonomerEdgeInfo = dict
" 0 5 (face font-lock-variable-name-face fontified t) 5 15 (face font-lock-variable-name-face fontified t) 15 18 (fontified t) 18 22 (face font-lock-builtin-face fontified t) 22 23 (fontified t)) . 625) (undo-tree-id2839 . -18) (undo-tree-id2840 . -18) 643 (t 25900 8244 287646 953000)) nil (25900 8250 817821 796000) 0 nil])
([nil nil ((nil rear-nonsticky nil 664 . 665) (#("
" 0 1 (fontified nil)) . -687) (664 . 688) 663) nil (25900 8250 817806 890000) 0 nil])
([nil nil ((625 . 626) (t 25900 8250 827786 210000)) nil (25900 8253 739462 864000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t)) . 2844) (t 25900 8253 747848 388000)) nil (25900 8273 979664 174000) 0 nil])
([nil nil ((2844 . 2848)) nil (25900 8273 979659 226000) 0 nil])
([nil nil ((#("other" 0 5 (fontified t)) . 2712) (t 25900 8273 984279 308000)) nil (25900 8292 956778 256000) 0 nil])
([nil nil ((2712 . 2718)) nil (25900 8292 956773 959000) 0 nil])
([nil nil ((#("other" 0 5 (fontified t)) . 2817) (undo-tree-id2841 . -2) (undo-tree-id2842 . -2) (undo-tree-id2843 . -2) (undo-tree-id2844 . -2) (undo-tree-id2845 . -2) (undo-tree-id2846 . -2) (undo-tree-id2847 . -2) (undo-tree-id2848 . -2) (undo-tree-id2849 . -2) (undo-tree-id2850 . -2) (undo-tree-id2851 . -2) (undo-tree-id2852 . -2) (undo-tree-id2853 . -2) (undo-tree-id2854 . -2) (undo-tree-id2855 . -2) (undo-tree-id2856 . -2) (undo-tree-id2857 . -2) (undo-tree-id2858 . -2) (undo-tree-id2859 . -2) (undo-tree-id2860 . -2) (undo-tree-id2861 . -2) (undo-tree-id2862 . -2) (undo-tree-id2863 . -2) (undo-tree-id2864 . -2) (undo-tree-id2865 . -2) (undo-tree-id2866 . -2) (undo-tree-id2867 . -2) (undo-tree-id2868 . -2) (undo-tree-id2869 . -2) (undo-tree-id2870 . -2) (undo-tree-id2871 . -2) (undo-tree-id2872 . -2) (undo-tree-id2873 . -2) (undo-tree-id2874 . -2) (undo-tree-id2875 . -2) (undo-tree-id2876 . -2) (undo-tree-id2877 . -2) (undo-tree-id2878 . -2) (undo-tree-id2879 . -2) (undo-tree-id2880 . -2) (undo-tree-id2881 . -2) (undo-tree-id2882 . -2) (undo-tree-id2883 . -2) (undo-tree-id2884 . -2) (undo-tree-id2885 . -2) (undo-tree-id2886 . -2) (undo-tree-id2887 . -2) (undo-tree-id2888 . -2) (undo-tree-id2889 . -2) (t 25900 8292 964683 516000)) nil (25900 8296 763829 922000) 0 nil])
([nil nil ((2817 . 2823)) nil (25900 8296 763798 427000) 0 nil])
([nil nil ((666 . 667) 687 (t 25900 8296 772764 620000)) nil (25900 8353 846910 223000) 0 nil])
([nil nil ((666 . 679)) nil (25900 8353 846909 320000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . -675) (undo-tree-id2891 . -1) (#("n" 0 1 (fontified t)) . -676) (undo-tree-id2892 . -1) (#("f" 0 1 (fontified t)) . -677) (undo-tree-id2893 . -1) (#("o" 0 1 (fontified t)) . -678) (undo-tree-id2894 . -1) 679) nil (25900 8353 846908 253000) 0 nil])
([nil nil ((675 . 681)) nil (25900 8353 846904 964000) 0 nil])
([nil nil ((666 . 684) (#("AtomicEdgeInfoD" 0 15 (fontified t)) . -666) (undo-tree-id2890 . -15) 681) nil (25900 8353 846903 294000) 0 nil])
([nil nil ((684 . 691)) nil (25900 8353 846890 766000) 0 nil])
([nil nil ((#("AtomicEdgeInfoDict = dict
" 0 18 (face font-lock-variable-name-face fontified t) 18 21 (fontified t) 21 25 (face font-lock-builtin-face fontified t) 25 26 (fontified t)) . 666) (undo-tree-id2895 . 1) (undo-tree-id2896 . -25) (undo-tree-id2897 . -24) (undo-tree-id2898 . -25) (undo-tree-id2899 . -25) (undo-tree-id2900 . -25) (undo-tree-id2901 . -25) (undo-tree-id2902 . -25) (undo-tree-id2903 . -25) (undo-tree-id2904 . -25) (undo-tree-id2905 . -25) (undo-tree-id2906 . -25) (undo-tree-id2907 . -25) (undo-tree-id2908 . -25) (undo-tree-id2909 . -25) (undo-tree-id2910 . -25) (undo-tree-id2911 . -25) (undo-tree-id2912 . -25) (undo-tree-id2913 . -25) (undo-tree-id2914 . -25) (undo-tree-id2915 . -25) (undo-tree-id2916 . -25) (undo-tree-id2917 . -25) (undo-tree-id2918 . -25) (undo-tree-id2919 . -25) (undo-tree-id2920 . -25) (undo-tree-id2921 . -25) (undo-tree-id2922 . -25) (undo-tree-id2923 . -24) (undo-tree-id2924 . -24) (undo-tree-id2925 . -24) (undo-tree-id2926 . -24) (undo-tree-id2927 . -24) (undo-tree-id2928 . -24) (undo-tree-id2929 . -24) (undo-tree-id2930 . -24) (undo-tree-id2931 . -24) (undo-tree-id2932 . -24) (undo-tree-id2933 . -24) (undo-tree-id2934 . -24) (undo-tree-id2935 . -24) (undo-tree-id2936 . -24) (undo-tree-id2937 . -24) (undo-tree-id2938 . -24) (undo-tree-id2939 . -24) (undo-tree-id2940 . -24) (undo-tree-id2941 . -24) (undo-tree-id2942 . -24) (undo-tree-id2943 . -24) (undo-tree-id2944 . -24) (undo-tree-id2945 . -24) (undo-tree-id2946 . -24) (undo-tree-id2947 . -24) (undo-tree-id2948 . -24) (undo-tree-id2949 . -24) (undo-tree-id2950 . -24) (undo-tree-id2951 . -24) (undo-tree-id2952 . -24) (undo-tree-id2953 . -24) (undo-tree-id2954 . -24) (undo-tree-id2955 . -24) (undo-tree-id2956 . -24) (undo-tree-id2957 . -24) (undo-tree-id2958 . -24) (undo-tree-id2959 . -24) (undo-tree-id2960 . -24) (undo-tree-id2961 . -24) (undo-tree-id2962 . -24) (undo-tree-id2963 . -24) (undo-tree-id2964 . -24) (undo-tree-id2965 . -24) (undo-tree-id2966 . -24) (undo-tree-id2967 . -24) 690 (t 25900 8353 853980 404000)) nil (25900 8355 625625 594000) 0 nil])
([nil nil ((646 . 672) 664) nil (25900 8355 625531 604000) 0 nil])
([nil nil ((4960 . 4964) (t 25900 8355 634018 322000)) nil (25900 8404 469247 48000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 4971)) nil (25900 8404 469246 403000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 4971)) nil (25900 8404 469245 896000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 4971)) nil (25900 8404 469245 456000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4971)) nil (25900 8404 469244 968000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4971)) nil (25900 8404 469244 340000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 4971)) nil (25900 8404 469243 864000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4971)) nil (25900 8404 469243 324000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 4971)) nil (25900 8404 469242 422000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . 4598)) nil (25900 8404 469241 964000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-function-name-face fontified t)) . 4598)) nil (25900 8404 469241 495000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-function-name-face fontified t)) . 4598)) nil (25900 8404 469240 904000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-function-name-face fontified t)) . 4598)) nil (25900 8404 469239 458000) 0 nil])
([nil nil ((4606 . 4610)) nil (25900 8404 469234 896000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . 4315) (t 25900 8404 479058 882000)) nil (25900 8411 878631 399000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-function-name-face fontified t)) . 4315)) nil (25900 8411 878630 607000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-function-name-face fontified t)) . 4315)) nil (25900 8411 878629 921000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-function-name-face fontified t)) . 4315)) nil (25900 8411 878628 646000) 0 nil])
([nil nil ((4323 . 4325)) nil (25900 8411 878627 268000) 0 nil])
([nil nil ((4325 . 4327)) nil (25900 8411 878622 545000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4960) (t 25900 8411 887216 715000)) nil (25900 8419 476367 633000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 4960)) nil (25900 8419 476366 890000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 4960)) nil (25900 8419 476366 186000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 4960)) nil (25900 8419 476364 739000) 0 nil])
([nil nil ((4968 . 4972)) nil (25900 8419 476360 450000) 0 nil])
([nil nil ((#("indexed" 0 7 (fontified t)) . 5095) (t 25900 8419 483378 558000)) nil (25900 8426 459293 643000) 0 nil])
([nil nil ((5095 . 5098)) nil (25900 8426 459289 580000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4928) (t 25900 8426 467527 365000)) nil (25900 8447 479805 975000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . 5058)) nil (25900 8447 479805 347000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . 5058)) nil (25900 8447 479804 811000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 5058)) nil (25900 8447 479804 244000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 5058)) nil (25900 8447 479803 630000) 0 nil])
([nil nil ((5058 . 5062)) nil (25900 8447 479803 137000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -5061) (undo-tree-id2968 . -1) 5062) nil (25900 8447 479801 579000) 0 nil])
([nil nil ((5061 . 5064)) nil (25900 8447 479788 840000) 0 nil])
([nil nil ((5153 . 5155) 5134 (t 25900 8447 487975 251000)) nil (25900 8511 774506 23000) 0 nil])
([nil nil ((5215 . 5219)) nil (25900 8511 774501 644000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-function-name-face fontified t)) . 5230) (t 25900 8511 781310 815000)) nil (25900 8514 379610 620000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . 5230)) nil (25900 8514 379609 873000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-function-name-face fontified t)) . 5230)) nil (25900 8514 379608 715000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-function-name-face fontified t)) . 5230)) nil (25900 8514 379604 223000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . 5275) (t 25900 8514 385364 82000)) nil (25900 8524 276915 241000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 5275)) nil (25900 8524 276910 834000) 0 nil])
([nil nil ((4197 . 4201) (4197 . 4198) (t 25900 8524 281566 590000)) nil (25900 8751 323768 474000) 0 nil])
([nil nil ((4201 . 4222)) nil (25900 8751 323767 806000) 0 nil])
([nil nil ((4222 . 4223)) nil (25900 8751 323767 295000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-comment-face fontified t)) . -4220) (undo-tree-id2982 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -4221) (undo-tree-id2983 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -4222) (undo-tree-id2984 . -1) 4223) nil (25900 8751 323766 431000) 0 nil])
([nil nil ((4220 . 4224)) nil (25900 8751 323764 669000) 0 nil])
([nil nil ((4224 . 4234)) nil (25900 8751 323764 237000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-comment-face fontified t)) . -4225) (undo-tree-id2973 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -4226) (undo-tree-id2974 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -4227) (undo-tree-id2975 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -4228) (undo-tree-id2976 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -4229) (undo-tree-id2977 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -4230) (undo-tree-id2978 . -1) (#("f" 0 1 (face font-lock-comment-face fontified t)) . -4231) (undo-tree-id2979 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -4232) (undo-tree-id2980 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -4233) (undo-tree-id2981 . -1) 4234) nil (25900 8751 323762 652000) 0 nil])
([nil nil ((4225 . 4234)) nil (25900 8751 323757 611000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-comment-face fontified t)) . -4233) (undo-tree-id2972 . -1) 4234) nil (25900 8751 323756 973000) 0 nil])
([nil nil ((4233 . 4240)) nil (25900 8751 323755 761000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-comment-face fontified t)) . -4237) (undo-tree-id2969 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -4238) (undo-tree-id2970 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -4239) (undo-tree-id2971 . -1) 4240) nil (25900 8751 323754 130000) 0 nil])
([nil nil ((4237 . 4247)) nil (25900 8751 323743 856000) 0 nil])
([nil nil ((4247 . 4268)) nil (25900 8751 323742 516000) 0 nil])
([nil nil ((4268 . 4270)) nil (25900 8751 323738 349000) 0 nil])
([nil nil ((5781 . 5785) (t 25900 8751 330245 808000)) nil (25900 8853 393196 778000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5796)) nil (25900 8853 393196 163000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 5796)) nil (25900 8853 393195 512000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 5796)) nil (25900 8853 393194 350000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 5796)) nil (25900 8853 393188 909000) 0 nil])
([nil nil ((5843 . 5860) (t 25900 8853 404366 49000)) nil (25900 8878 673284 819000) 0 nil])
([nil nil ((#(" in self.adj
                              for v, edge_info in self.adj[u].items())
" 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 13 (fontified t) 13 23 (fontified t) 23 25 (fontified t) 25 43 (fontified t) 43 46 (face font-lock-keyword-face fontified t) 46 60 (fontified t) 60 62 (face font-lock-keyword-face fontified t) 62 63 (fontified t) 63 67 (face font-lock-keyword-face fontified t) 67 71 (fontified t) 71 72 (face (rainbow-delimiters-depth-2-face) fontified t) 72 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (face (rainbow-delimiters-depth-2-face) fontified t) 82 83 (face (rainbow-delimiters-depth-1-face) fontified t) 83 84 (fontified t)) . 5860) (undo-tree-id2985 . -83) (undo-tree-id2986 . 84) (undo-tree-id2987 . -83) (undo-tree-id2988 . -83) (undo-tree-id2989 . -83) (undo-tree-id2990 . -83) (undo-tree-id2991 . -84) (undo-tree-id2992 . -83) (undo-tree-id2993 . -65) (undo-tree-id2994 . -65) (undo-tree-id2995 . -65) (undo-tree-id2996 . -65) (undo-tree-id2997 . -65) (undo-tree-id2998 . -65) (undo-tree-id2999 . -65) (undo-tree-id3000 . -65) (undo-tree-id3001 . -65) (undo-tree-id3002 . -65) (undo-tree-id3003 . -65) (undo-tree-id3004 . -65) (undo-tree-id3005 . -65) (undo-tree-id3006 . -65) (undo-tree-id3007 . -65) (undo-tree-id3008 . -65) (undo-tree-id3009 . -65) (undo-tree-id3010 . -65) (undo-tree-id3011 . -65) (undo-tree-id3012 . -65) (undo-tree-id3013 . -65) (undo-tree-id3014 . -65) (undo-tree-id3015 . -65) (undo-tree-id3016 . -65) (undo-tree-id3017 . -65) (undo-tree-id3018 . -65) (undo-tree-id3019 . -65) (undo-tree-id3020 . -65) (undo-tree-id3021 . -65) (undo-tree-id3022 . -65) (undo-tree-id3023 . -65) (undo-tree-id3024 . -65) (undo-tree-id3025 . -65) (undo-tree-id3026 . -65) (undo-tree-id3027 . -65) (undo-tree-id3028 . -65) (undo-tree-id3029 . -65) (undo-tree-id3030 . -65) (undo-tree-id3031 . -65) (undo-tree-id3032 . -65) (undo-tree-id3033 . -65) (undo-tree-id3034 . -65) (undo-tree-id3035 . -65) (undo-tree-id3036 . -65) (undo-tree-id3037 . -65) (undo-tree-id3038 . -65) (undo-tree-id3039 . -65) (undo-tree-id3040 . -65) (undo-tree-id3041 . -65) (undo-tree-id3042 . -65) (undo-tree-id3043 . -13) (undo-tree-id3044 . -83) (undo-tree-id3045 . -83) (undo-tree-id3046 . -83) (undo-tree-id3047 . -83) (undo-tree-id3048 . -83) (undo-tree-id3049 . -83) (undo-tree-id3050 . -83) (undo-tree-id3051 . -83) (undo-tree-id3052 . -83) (undo-tree-id3053 . -83) (undo-tree-id3054 . -83) (undo-tree-id3055 . -83) (undo-tree-id3056 . -83) (undo-tree-id3057 . -83) (undo-tree-id3058 . -83) (undo-tree-id3059 . -83) (undo-tree-id3060 . -83) 5943) nil (25900 8878 673281 350000) 0 nil])
([nil nil ((5860 . 5861)) nil (25900 8878 673239 710000) 0 nil])
([nil nil ((5797 . 5808) (t 25900 8878 680892 344000)) nil (25900 8932 451919 574000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -5797) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (#("e" 0 1 (fontified t)) . -5798) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (#("l" 0 1 (fontified t)) . -5799) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (#("f" 0 1 (fontified t)) . -5800) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (#("." 0 1 (fontified t)) . -5801) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (#("e" 0 1 (fontified t)) . -5802) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (#("d" 0 1 (fontified t)) . -5803) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (#("g" 0 1 (fontified t)) . -5804) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (#("e" 0 1 (fontified t)) . -5805) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (#("s" 0 1 (fontified t)) . -5806) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -5807) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) 5808) nil (25900 8932 451907 913000) 0 nil])
([nil nil ((5842 . 5843) (t 25900 8932 458013 517000)) nil (25900 8941 118214 848000) 0 nil])
([nil nil ((5847 . 5848)) nil (25900 8941 118213 135000) 0 nil])
([nil nil ((5848 . 5859)) nil (25900 8941 118209 64000) 0 nil])
([nil nil ((5873 . 5881) (t 25900 8941 126194 414000)) nil (25900 8949 271578 674000) 0 nil])
([nil nil ((#("inside" 0 6 (fontified t)) . 5918) (t 25900 8949 282364 671000)) nil (25900 8958 338384 73000) 0 nil])
([nil nil ((5918 . 5927)) nil (25900 8958 338383 62000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -5925) (undo-tree-id3320 . -1) (#("r" 0 1 (fontified t)) . -5926) (undo-tree-id3321 . -1) 5927) nil (25900 8958 338381 447000) 0 nil])
([nil nil ((5925 . 5926)) nil (25900 8958 338366 961000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . 6045) (t 25900 8958 338553 760000)) nil (25900 9041 158150 119000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 6045)) nil (25900 9041 158149 41000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 6045)) nil (25900 9041 158147 105000) 0 nil])
([nil nil ((6045 . 6052)) nil (25900 9041 158142 451000) 0 nil])
([nil nil ((6064 . 6068) (t 25900 9041 168285 416000)) nil (25900 9053 885707 406000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t)) . 6112) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (t 25900 9053 896551 839000)) nil (25900 9090 405464 297000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . 6112) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1)) nil (25900 9090 405460 639000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 6112) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1)) nil (25900 9090 405457 605000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 6112) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1)) nil (25900 9090 405454 445000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 6112) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1)) nil (25900 9090 405450 491000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 6112) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1)) nil (25900 9090 405444 133000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . 6112)) nil (25900 9090 405427 391000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 6112)) nil (25900 9090 405426 955000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 6112)) nil (25900 9090 405426 199000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . 6112)) nil (25900 9090 405425 750000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 6112)) nil (25900 9090 405425 322000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 6112)) nil (25900 9090 405424 772000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6112) (undo-tree-id3328 . -1)) nil (25900 9090 405424 287000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . 6112)) nil (25900 9090 405423 204000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 6112)) nil (25900 9090 405422 566000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 6112)) nil (25900 9090 405421 882000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . 6112)) nil (25900 9090 405421 369000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 6112)) nil (25900 9090 405420 881000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 6112)) nil (25900 9090 405420 229000) 0 nil])
([nil nil ((6112 . 6119)) nil (25900 9090 405419 533000) 0 nil])
([nil nil ((6112 . 6122) (#("AtomicE" 0 7 (fontified t)) . -6112) (undo-tree-id3327 . -7) 6119) nil (25900 9090 405418 804000) 0 nil])
([nil nil ((6122 . 6123)) nil (25900 9090 405417 346000) 0 nil])
([nil nil ((6123 . 6128)) nil (25900 9090 405416 631000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -6123) (undo-tree-id3322 . -1) (#("g" 0 1 (fontified t)) . -6124) (undo-tree-id3323 . -1) (#("e" 0 1 (fontified t)) . -6125) (undo-tree-id3324 . -1) (#("E" 0 1 (fontified t)) . -6126) (undo-tree-id3325 . -1) (#("x" 0 1 (fontified t)) . -6127) (undo-tree-id3326 . -1) 6128) nil (25900 9090 405414 640000) 0 nil])
([nil nil ((6123 . 6125)) nil (25900 9090 405399 820000) 0 nil])
([nil nil ((6170 . 6252) (#(" " 0 1 (fontified nil)) . 6169) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (6170 . 6171) (t 25900 9090 413316 631000)) nil (25900 9111 384276 236000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . 6257) (t 25900 9111 389756 229000)) nil (25900 9115 993762 891000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 6257)) nil (25900 9115 993761 698000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 6257)) nil (25900 9115 993760 168000) 0 nil])
([nil nil ((6257 . 6264)) nil (25900 9115 993755 547000) 0 nil])
([nil nil ((4247 . 4253) (4246 . 4247) (4237 . 4246) (4235 . 4237) (4225 . 4235) (#("Name" 0 4 (fontified t)) . -4225) (undo-tree-id3480 . -4) 4229 (4222 . 4229) (#("t" 0 1 (face font-lock-type-face fontified t)) . -4222) (undo-tree-id3481 . -1) 4223 (4202 . 4223) (4201 . 4202) (4197 . 4201) (4197 . 4198) 4269 (t 25900 9116 1852 914000)) nil (25900 9245 444177 267000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4266 . 4267) (4238 . 4404) 4252) nil (25900 9245 444174 408000) 0 nil])
([nil nil ((#("        atoms: 
" 0 15 (fontified t) 15 16 (fontified t)) . 4404) (undo-tree-id3477 . 1) (undo-tree-id3478 . -14) (undo-tree-id3479 . -14) 4418) nil (25900 9245 444173 489000) 0 nil])
([nil nil ((#("                     " 0 20 (fontified t) 20 21 (rear-nonsticky t fontified t)) . -4246) (undo-tree-id3476 . -6) 4252) nil (25900 9245 444170 783000) 0 nil])
([nil nil ((#("                     " 0 21 (fontified t)) . -4292)) nil (25900 9245 444169 466000) 0 nil])
([nil nil ((#(") -> Tuple[Chem.rdchem.Mol," 0 1 (face (rainbow-delimiters-unmatched-face) fontified t) 1 10 (fontified t) 10 11 (face (rainbow-delimiters-unmatched-face) fontified t) 11 27 (fontified t)) . 4334) (undo-tree-id3472 . -27) (undo-tree-id3473 . -1) (undo-tree-id3474 . -27) (undo-tree-id3475 . -1)) nil (25900 9245 444168 606000) 0 nil])
([nil nil ((4334 . 4343) 4333) nil (25900 9245 444166 111000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4339) (undo-tree-id3470 . -4) (undo-tree-id3471 . -4) 4343) nil (25900 9245 444164 630000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4335) (undo-tree-id3468 . -4) (undo-tree-id3469 . -4) 4339) nil (25900 9245 444158 360000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 4282) (t 25900 9245 448570 27000)) nil (25900 9290 186219 69000) 0 nil])
([nil nil ((#("    class AtomicGraphRecord(NamedTuple):
        atoms: Dict[AtomExtId, AtomInfoDict]
        bonds: Dict[AtomicEdgeExt, AtomicEdgeInfo]
" 0 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 27 (face font-lock-type-face fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 41 (fontified t) 41 49 (fontified t) 49 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-1-face) fontified t) 61 68 (fontified t) 68 74 (fontified t) 74 84 (fontified t) 84 85 (face (rainbow-delimiters-depth-1-face) fontified t) 85 86 (fontified t) 86 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-1-face) fontified t) 106 119 (fontified t) 119 127 (fontified t) 127 135 (fontified t) 135 136 (face (rainbow-delimiters-depth-1-face) fontified t) 136 137 (fontified t)) . 4197) (undo-tree-id3528 . -125) (undo-tree-id3529 . -41) (undo-tree-id3530 . -136) (undo-tree-id3531 . -39) (undo-tree-id3532 . -125) (undo-tree-id3533 . -84) (undo-tree-id3534 . -125) (undo-tree-id3535 . -39) (undo-tree-id3536 . -125) 4322) nil (25900 9290 186218 392000) 0 nil])
([nil nil ((nil rear-nonsticky nil 718 . 719) (715 . 852)) nil (25900 9290 186214 324000) 0 nil])
([nil nil ((715 . 716) (715 . 716) 719) nil (25900 9290 186213 772000) 0 nil])
([nil nil ((#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -717)) nil (25900 9290 186212 965000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -758) 754) nil (25900 9290 186212 432000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -799)) nil (25900 9290 186211 738000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . -625) (undo-tree-id3527 . -1) 626 (625 . 626)) nil (25900 9290 186210 989000) 0 nil])
([nil nil ((565 . 581) (565 . 566)) nil (25900 9290 186209 869000) 0 nil])
([nil nil ((nil rear-nonsticky nil 629 . 630) (nil fontified nil 581 . 630) (581 . 630) 580) nil (25900 9290 186208 764000) 0 nil])
([nil nil ((#("EdgeExt = NewType('EdgeExtId', Tuple[AtomExtId, AtomExtId])
" 0 7 (face font-lock-variable-name-face fontified t) 7 16 (fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 27 (face font-lock-string-face fontified t) 27 29 (face font-lock-string-face fontified t) 29 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (fontified t) 38 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 60 (fontified t)) . 631) (undo-tree-id3482 . -58) (undo-tree-id3483 . -58) (undo-tree-id3484 . -58) (undo-tree-id3485 . -58) (undo-tree-id3486 . -58) (undo-tree-id3487 . -58) (undo-tree-id3488 . -58) (undo-tree-id3489 . -58) (undo-tree-id3490 . -58) (undo-tree-id3491 . -58) (undo-tree-id3492 . -58) (undo-tree-id3493 . -58) (undo-tree-id3494 . -58) (undo-tree-id3495 . -58) (undo-tree-id3496 . -58) (undo-tree-id3497 . -58) (undo-tree-id3498 . -58) (undo-tree-id3499 . -58) (undo-tree-id3500 . -58) (undo-tree-id3501 . -58) (undo-tree-id3502 . -58) (undo-tree-id3503 . -58) (undo-tree-id3504 . -58) (undo-tree-id3505 . -58) (undo-tree-id3506 . -58) (undo-tree-id3507 . -58) (undo-tree-id3508 . -58) (undo-tree-id3509 . -58) (undo-tree-id3510 . -58) (undo-tree-id3511 . -58) (undo-tree-id3512 . -58) (undo-tree-id3513 . -58) (undo-tree-id3514 . -58) (undo-tree-id3515 . -58) (undo-tree-id3516 . -58) (undo-tree-id3517 . -58) (undo-tree-id3518 . -58) (undo-tree-id3519 . -58) (undo-tree-id3520 . -58) (undo-tree-id3521 . -58) (undo-tree-id3522 . -58) (undo-tree-id3523 . -58) (undo-tree-id3524 . -58) (undo-tree-id3525 . -58) (undo-tree-id3526 . -58) 689) nil (25900 9290 186203 972000) 0 nil])
([nil nil ((68 . 72) (68 . 69) (t 25900 9290 185510 488000)) nil (25900 9302 6631 649000) 0 nil])
([nil nil ((72 . 76)) nil (25900 9302 6630 855000) 0 nil])
([nil nil ((72 . 82) (#("Name" 0 4 (fontified t)) . -72) (undo-tree-id3537 . -4) (undo-tree-id3538 . 4) (undo-tree-id3539 . -2) (undo-tree-id3540 . -2) (undo-tree-id3541 . -2) (undo-tree-id3542 . -2) (undo-tree-id3543 . -2) (undo-tree-id3544 . -2) (undo-tree-id3545 . -2) (undo-tree-id3546 . -3) (undo-tree-id3547 . -3) (undo-tree-id3548 . -3) (undo-tree-id3549 . -3) (undo-tree-id3550 . -3) (undo-tree-id3551 . -3) (undo-tree-id3552 . -3) (undo-tree-id3553 . -3) (undo-tree-id3554 . -4) (undo-tree-id3555 . -4) (undo-tree-id3556 . -4) (undo-tree-id3557 . -4) (undo-tree-id3558 . -4) (undo-tree-id3559 . -4) (undo-tree-id3560 . -4) (undo-tree-id3561 . -4) (undo-tree-id3562 . -4) (undo-tree-id3563 . -4) (undo-tree-id3564 . -4) (undo-tree-id3565 . -4) (undo-tree-id3566 . -4) (undo-tree-id3567 . -4) (undo-tree-id3568 . -4) (undo-tree-id3569 . -4) 76) nil (25900 9302 6628 532000) 0 nil])
([nil nil ((82 . 83)) nil (25900 9302 6601 984000) 0 nil])
([nil nil ((4872 . 4878) (t 25900 9302 13759 250000)) nil (25900 9376 291228 199000) 0 nil])
([nil nil ((5498 . 5504) (t 25900 9376 299322 526000)) nil (25900 9383 436786 511000) 0 nil])
([nil nil ((#("Tuple[Dict[AtomExtId, AtomInfo], Dict[EdgeExt, AtomicEdgeInfoDict]]" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t) 6 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-2-face)) 38 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 67 (fontified t face (rainbow-delimiters-depth-1-face))) . 4454) (undo-tree-id3572 . -61) (undo-tree-id3573 . -38) (undo-tree-id3574 . -46) (undo-tree-id3575 . -54) (undo-tree-id3576 . -54) (undo-tree-id3577 . -54) (undo-tree-id3578 . -54) (undo-tree-id3579 . -54) (undo-tree-id3580 . -54) (undo-tree-id3581 . -54) (undo-tree-id3582 . -5) (t 25900 9383 447473 31000)) nil (25900 9399 497027 85000) 0 nil])
([nil nil ((4454 . 4461)) nil (25900 9399 497020 81000) 0 nil])
([nil nil ((4454 . 4465) (#("AtomicG" 0 7 (fontified t)) . -4454) (undo-tree-id3571 . -7) 4461) nil (25900 9399 497019 149000) 0 nil])
([nil nil ((4465 . 4466)) nil (25900 9399 497016 420000) 0 nil])
([nil nil ((4454 . 4471) (#("AtomicGraphR" 0 12 (fontified t)) . -4454) (undo-tree-id3570 . -12) 4466) nil (25900 9399 497012 492000) 0 nil])
([nil nil ((4837 . 4903) (#(" " 0 1 (fontified nil)) . 4836) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (4837 . 4838) (t 25900 9399 499811 65000)) nil (25900 9406 417709 523000) 0 nil])
([nil nil ((4550 . 4616) (#(" " 0 1 (fontified nil)) . 4550) (4549 . 4550) (t 25900 9406 427956 980000)) nil (25900 9413 172678 916000) 0 nil])
([nil nil ((5595 . 5676) (#(" " 0 1 (fontified nil)) . 5595) (5594 . 5595) (t 25900 9413 184099 288000)) nil (25900 9417 449177 920000) 0 nil])
([nil nil ((5728 . 5734) (t 25900 9417 460189 363000)) nil (25900 9421 607421 133000) 0 nil])
([nil nil ((6229 . 6246) (#("AtomicGraphR" 0 12 (fontified t)) . -6229) (undo-tree-id3594 . -1) (undo-tree-id3595 . -12) 6241 (6229 . 6241) (t 25900 9421 616276 911000)) nil (25900 9440 360393 432000) 0 nil])
([nil nil ((6247 . 6253)) nil (25900 9440 360383 302000) 0 nil])
([nil nil ((6260 . 6293) (#(" " 0 1 (fontified nil)) . 6260) (6259 . 6260)) nil (25900 9440 360381 845000) 0 nil])
([nil nil ((6293 . 6299)) nil (25900 9440 360377 746000) 0 nil])
([nil nil ((6396 . 6426) (t 25900 9440 368671 987000) 6395) nil (25900 9460 759132 665000) 0 nil])
([nil nil ((6426 . 6438)) nil (25900 9460 759131 965000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -6436) (undo-tree-id3651 . -1) (#("d" 0 1 (fontified t)) . -6437) (undo-tree-id3652 . -1) 6438) nil (25900 9460 759131 328000) 0 nil])
([nil nil ((6436 . 6438)) nil (25900 9460 759130 61000) 0 nil])
([nil nil ((6438 . 6456)) nil (25900 9460 759129 537000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -6455) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) 6456) nil (25900 9460 759126 818000) 0 nil])
([nil nil ((6455 . 6458)) nil (25900 9460 759089 809000) 0 nil])
([nil nil ((6916 . 6929) (t 25900 9460 765101 803000)) nil (25900 9471 803573 554000) 0 nil])
([nil nil ((7103 . 7113) (t 25900 9471 809334 573000)) nil (25900 9483 479730 262000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -7112) (undo-tree-id3653 . -1) 7113) nil (25900 9483 479728 223000) 0 nil])
([nil nil ((7112 . 7116)) nil (25900 9483 479715 524000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 6524) (t 25900 9483 485580 694000)) nil (25900 9497 409527 188000) 0 nil])
([nil nil ((6524 . 6526)) nil (25900 9497 409525 766000) 0 nil])
([nil nil ((6526 . 6535)) nil (25900 9497 409508 38000) 0 nil])
([nil nil ((#("        
                             bonds: Dict[AtomicEdgeExt, AtomicEdgeInfo]) -> Tuple[Chem.rdchem.Mol,
                                                                                  Dict[AtomExtId, int]]:
" 0 8 (fontified t) 8 9 (fontified t) 9 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 63 (fontified t) 63 71 (fontified t) 71 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) fontified t) 80 81 (face (rainbow-delimiters-unmatched-face) fontified t) 81 90 (fontified t) 90 91 (face (rainbow-delimiters-unmatched-face) fontified t) 91 108 (fontified t) 108 112 (fontified t) 112 172 (fontified t) 172 194 (fontified t) 194 195 (face (rainbow-delimiters-depth-1-face) fontified t) 195 202 (fontified t) 202 206 (fontified t) 206 209 (face font-lock-builtin-face fontified t) 209 210 (face (rainbow-delimiters-depth-1-face) fontified t) 210 211 (face (rainbow-delimiters-unmatched-face) fontified t) 211 213 (fontified t)) . 6527) (undo-tree-id3654 . -115) (undo-tree-id3655 . 205) (undo-tree-id3656 . -7) (undo-tree-id3657 . -115) (undo-tree-id3658 . -8) (undo-tree-id3659 . -115) (undo-tree-id3660 . -23) (undo-tree-id3661 . -80) (undo-tree-id3662 . -81) (undo-tree-id3663 . -81) (undo-tree-id3664 . -107) (undo-tree-id3665 . -8) (undo-tree-id3666 . -88) (undo-tree-id3667 . -107) (undo-tree-id3668 . -38) (undo-tree-id3669 . -107) (undo-tree-id3670 . -38) (undo-tree-id3671 . -107) (undo-tree-id3672 . -187) (undo-tree-id3673 . -212) (undo-tree-id3674 . -190) (undo-tree-id3675 . -212) (undo-tree-id3676 . -190) (undo-tree-id3677 . -212) (undo-tree-id3678 . -7) (undo-tree-id3679 . -115) 6642 (t 25900 9497 417874 401000)) nil (25900 9550 40240 75000) 0 nil])
([nil nil ((6525 . 6537)) nil (25900 9550 40215 189000) 0 nil])
([nil nil ((6346 . 6350) (6346 . 6347) 6361 (t 25900 9550 50984 344000)) nil (25900 9662 175953 4000) 0 nil])
([nil nil ((6350 . 6351)) nil (25900 9662 175952 261000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -6350) (undo-tree-id3702 . -1) 6351) nil (25900 9662 175951 670000) 0 nil])
([nil nil ((6350 . 6361)) nil (25900 9662 175950 696000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -6360) (undo-tree-id3701 . -1) 6361) nil (25900 9662 175950 175000) 0 nil])
([nil nil ((6360 . 6369)) nil (25900 9662 175949 132000) 0 nil])
([nil nil ((6365 . 6375) (#("Name" 0 4 (fontified t)) . -6365) (undo-tree-id3700 . -4) 6369) nil (25900 9662 175948 531000) 0 nil])
([nil nil ((6375 . 6377)) nil (25900 9662 175947 368000) 0 nil])
([nil nil ((6377 . 6386)) nil (25900 9662 175946 929000) 0 nil])
([nil nil ((6386 . 6406)) nil (25900 9662 175946 165000) 0 nil])
([nil nil ((6403 . 6406) (#("Mol" 0 3 (fontified t)) . -6403) (undo-tree-id3699 . -3) 6406) nil (25900 9662 175945 427000) 0 nil])
([nil nil ((6406 . 6415)) nil (25900 9662 175942 585000) 0 nil])
([nil nil ((6415 . 6425)) nil (25900 9662 175942 84000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -6419) (undo-tree-id3693 . -1) (#("i" 0 1 (fontified t)) . -6420) (undo-tree-id3694 . -1) (#("n" 0 1 (fontified t)) . -6421) (undo-tree-id3695 . -1) (#("g" 0 1 (fontified t)) . -6422) (undo-tree-id3696 . -1) (#(":" 0 1 (fontified t)) . -6423) (undo-tree-id3697 . -1) (#(" " 0 1 (fontified t)) . -6424) (undo-tree-id3698 . -1) 6425) nil (25900 9662 175940 681000) 0 nil])
([nil nil ((6419 . 6424)) nil (25900 9662 175937 358000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6423) (undo-tree-id3692 . -1) 6424) nil (25900 9662 175936 703000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -6415) (undo-tree-id3684 . -1) (#("a" 0 1 (fontified t)) . -6416) (undo-tree-id3685 . -1) (#("p" 0 1 (face font-lock-builtin-face fontified t)) . -6417) (undo-tree-id3686 . -1) (#("p" 0 1 (fontified t)) . -6418) (undo-tree-id3687 . -1) (#("i" 0 1 (fontified t)) . -6419) (undo-tree-id3688 . -1) (#("n" 0 1 (fontified t)) . -6420) (undo-tree-id3689 . -1) (#("g" 0 1 (fontified t)) . -6421) (undo-tree-id3690 . -1) (#(":" 0 1 (fontified t)) . -6422) (undo-tree-id3691 . -1) 6423) nil (25900 9662 175934 503000) 0 nil])
([nil nil ((6415 . 6422)) nil (25900 9662 175929 672000) 0 nil])
([nil nil ((6422 . 6431)) nil (25900 9662 175929 107000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -6427) (undo-tree-id3680 . -1) (#("d" 0 1 (fontified t)) . -6428) (undo-tree-id3681 . -1) (#("e" 0 1 (fontified t)) . -6429) (undo-tree-id3682 . -1) (#("x" 0 1 (fontified t)) . -6430) (undo-tree-id3683 . -1) 6431) nil (25900 9662 175926 777000) 0 nil])
([nil nil ((6427 . 6430)) nil (25900 9662 175915 510000) 0 nil])
([nil nil ((6426 . 6430)) nil (25900 9662 175911 257000) 0 nil])
([nil nil ((6434 . 6455) (t 25900 9662 177350 578000)) nil (25900 9698 442335 717000) 0 nil])
([nil nil ((6455 . 6464)) nil (25900 9698 442334 751000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6460) (undo-tree-id3812 . -4) (undo-tree-id3813 . -4) (undo-tree-id3814 . -4) (undo-tree-id3815 . -4) (undo-tree-id3816 . -4) (undo-tree-id3817 . -4) (undo-tree-id3818 . -4) (undo-tree-id3819 . -4) (undo-tree-id3820 . -4) (undo-tree-id3821 . -4) (undo-tree-id3822 . -4) (undo-tree-id3823 . -4) (undo-tree-id3824 . -4) (undo-tree-id3825 . -4) (undo-tree-id3826 . -4) (undo-tree-id3827 . -4) (undo-tree-id3828 . -4) (undo-tree-id3829 . -4) (undo-tree-id3830 . -4) (undo-tree-id3831 . -4) (undo-tree-id3832 . -4) (undo-tree-id3833 . -4) (undo-tree-id3834 . -4) (undo-tree-id3835 . -4) (undo-tree-id3836 . -4) (undo-tree-id3837 . -4) (undo-tree-id3838 . -4) (undo-tree-id3839 . -4) (undo-tree-id3840 . -4) (undo-tree-id3841 . -4) (undo-tree-id3842 . -4) (undo-tree-id3843 . -4) (undo-tree-id3844 . -4) (undo-tree-id3845 . -4) (undo-tree-id3846 . -4) (undo-tree-id3847 . -4) (undo-tree-id3848 . -4) (undo-tree-id3849 . -4) (undo-tree-id3850 . -4) (undo-tree-id3851 . -4) (undo-tree-id3852 . -4) (undo-tree-id3853 . -4) (undo-tree-id3854 . -4) (undo-tree-id3855 . -4) (undo-tree-id3856 . -4) (undo-tree-id3857 . -4) (undo-tree-id3858 . -4) (undo-tree-id3859 . -4) (undo-tree-id3860 . -4) (undo-tree-id3861 . -4) (undo-tree-id3862 . -4) (undo-tree-id3863 . -4) (undo-tree-id3864 . -4) (undo-tree-id3865 . -4) (undo-tree-id3866 . -4) (undo-tree-id3867 . -4) (undo-tree-id3868 . -4) 6464) nil (25900 9698 442332 629000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6456) (undo-tree-id3703 . -4) (undo-tree-id3704 . -4) (undo-tree-id3705 . -4) (undo-tree-id3706 . -4) (undo-tree-id3707 . -4) (undo-tree-id3708 . -4) (undo-tree-id3709 . -4) (undo-tree-id3710 . -4) (undo-tree-id3711 . -4) (undo-tree-id3712 . -4) (undo-tree-id3713 . -4) (undo-tree-id3714 . -4) (undo-tree-id3715 . -4) (undo-tree-id3716 . -4) (undo-tree-id3717 . -4) (undo-tree-id3718 . -4) (undo-tree-id3719 . -4) (undo-tree-id3720 . -4) (undo-tree-id3721 . -4) (undo-tree-id3722 . -4) (undo-tree-id3723 . -4) (undo-tree-id3724 . -4) (undo-tree-id3725 . -4) (undo-tree-id3726 . -4) (undo-tree-id3727 . -4) (undo-tree-id3728 . -4) (undo-tree-id3729 . -4) (undo-tree-id3730 . -4) (undo-tree-id3731 . -4) (undo-tree-id3732 . -4) (undo-tree-id3733 . -4) (undo-tree-id3734 . -4) (undo-tree-id3735 . -4) (undo-tree-id3736 . -4) (undo-tree-id3737 . -4) (undo-tree-id3738 . -4) (undo-tree-id3739 . -4) (undo-tree-id3740 . -4) (undo-tree-id3741 . -4) (undo-tree-id3742 . -4) (undo-tree-id3743 . -4) (undo-tree-id3744 . -4) (undo-tree-id3745 . -4) (undo-tree-id3746 . -4) (undo-tree-id3747 . -4) (undo-tree-id3748 . -4) (undo-tree-id3749 . -4) (undo-tree-id3750 . -4) (undo-tree-id3751 . -4) (undo-tree-id3752 . -4) (undo-tree-id3753 . -4) (undo-tree-id3754 . -4) (undo-tree-id3755 . -4) (undo-tree-id3756 . -4) (undo-tree-id3757 . -4) (undo-tree-id3758 . -4) (undo-tree-id3759 . -4) (undo-tree-id3760 . -4) (undo-tree-id3761 . -4) (undo-tree-id3762 . -4) (undo-tree-id3763 . -4) (undo-tree-id3764 . -4) (undo-tree-id3765 . -4) (undo-tree-id3766 . -4) (undo-tree-id3767 . -4) (undo-tree-id3768 . -4) (undo-tree-id3769 . -4) (undo-tree-id3770 . -4) (undo-tree-id3771 . -4) (undo-tree-id3772 . -4) (undo-tree-id3773 . -4) (undo-tree-id3774 . -4) (undo-tree-id3775 . -4) (undo-tree-id3776 . -4) (undo-tree-id3777 . -4) (undo-tree-id3778 . -4) (undo-tree-id3779 . -4) (undo-tree-id3780 . -4) (undo-tree-id3781 . -4) (undo-tree-id3782 . -4) (undo-tree-id3783 . -4) (undo-tree-id3784 . -4) (undo-tree-id3785 . -4) (undo-tree-id3786 . -4) (undo-tree-id3787 . -4) (undo-tree-id3788 . -4) (undo-tree-id3789 . -4) (undo-tree-id3790 . -4) (undo-tree-id3791 . -4) (undo-tree-id3792 . -4) (undo-tree-id3793 . -4) (undo-tree-id3794 . -4) (undo-tree-id3795 . -4) (undo-tree-id3796 . -4) (undo-tree-id3797 . -4) (undo-tree-id3798 . -4) (undo-tree-id3799 . -4) (undo-tree-id3800 . -4) (undo-tree-id3801 . -4) (undo-tree-id3802 . -4) (undo-tree-id3803 . -4) (undo-tree-id3804 . -4) (undo-tree-id3805 . -4) (undo-tree-id3806 . -4) (undo-tree-id3807 . -4) (undo-tree-id3808 . -4) (undo-tree-id3809 . -4) (undo-tree-id3810 . -4) (undo-tree-id3811 . -4) 6460) nil (25900 9698 442292 86000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4346) (undo-tree-id3869 . -1) (t 25900 9698 450116 471000)) nil (25900 9709 219676 798000) 0 nil])
([nil nil ((6443 . 6446) (t 25900 9709 226344 51000)) nil (25900 9723 862647 369000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t)) . 6448)) nil (25900 9723 862646 534000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . 6448)) nil (25900 9723 862645 41000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 6448)) nil (25900 9723 862640 709000) 0 nil])
([nil nil ((7538 . 7541) (t 25900 9723 870653 343000)) nil (25900 9736 703484 566000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -7540) (undo-tree-id3870 . -1) 7541) nil (25900 9736 703482 861000) 0 nil])
([nil nil ((7540 . 7546)) nil (25900 9736 703469 738000) 0 nil])
([nil nil ((7547 . 7551) (t 25900 9736 710924 555000)) nil (25900 9738 578390 96000) 0 nil])
([nil nil ((7556 . 7580) (#(" " 0 1 (fontified nil)) . 7556) (7555 . 7556) (t 25900 9738 586964 182000)) nil (25900 9747 383180 979000) 0 nil])
([nil nil ((7580 . 7589)) nil (25900 9747 383179 757000) 0 nil])
([nil nil ((7589 . 7600)) nil (25900 9747 383175 293000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 7598) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (t 25900 9747 391150 161000)) nil (25900 9753 650031 431000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7598)) nil (25900 9753 650020 202000) 0 nil])
([nil nil ((7598 . 7599)) nil (25900 9753 650016 217000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 7724) (t 25900 9753 659282 574000)) nil (25900 9770 182985 677000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 7724)) nil (25900 9770 182984 643000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 7724)) nil (25900 9770 182983 330000) 0 nil])
([nil nil ((7724 . 7728)) nil (25900 9770 182979 48000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 7700) (t 25900 9770 191631 840000)) nil (25900 9874 278260 915000) 0 nil])
([nil nil ((#("    # ext == extended. This can be confused with external, need to change
    def to_atomic_graph(self) -> AtomicGraphRecord:
        def get_monomer_ext_atoms(monomer_idx: MonomerId) -> Dict[AtomExtId,
                                                                  AtomInfoDict]:
            atomic_graph = self.monomer(monomer_idx).atomic_graph
            return {(monomer_idx, atom_idx): atomic_graph.nodes[atom_idx]
                    for atom_idx in atomic_graph}

        def get_monomer_ext_edges(monomer_idx: MonomerId) -> Dict[AtomicEdgeExt,
                                                                  AtomicEdgeInfo]:
            atomic_graph = self.monomer(monomer_idx).atomic_graph
            return {((monomer_idx, edge_ends[0]),
                     (monomer_idx, edge_ends[1])): edge_info
                    for edge_ends, edge_info in atomic_graph.edges.items()}

        atoms = join_dicts(get_monomer_ext_atoms(monomer_idx)
                           for monomer_idx in self.nodes)
        interior_edges = join_dicts(get_monomer_ext_edges(monomer_idx)
                                    for monomer_idx in self.nodes)

        def monomer_edge_to_ext_atomic_edge(edge_info: MonomerEdgeInfo) -> Tuple[AtomicEdgeExt,
                                                                                 AtomicEdgeInfo]:
            atomic_edge_ends_ext = AtomicEdgeExt(tuple(edge_info['monomer_to_atom'].items()))
            atomic_edge_info = AtomicEdgeInfo({key: value
                                               for key, value in edge_info.items()
                                               if key != 'monomer_to_atom'})
            return (atomic_edge_ends_ext, atomic_edge_info)

        boundary_edges = dict(monomer_edge_to_ext_atomic_edge(edge_info)
                              for (u, v), edge_info in self.edges.items())
        return AtomicGraphRecord(atoms=atoms,
                                 bonds=join_dicts([interior_edges, boundary_edges]))

    class ChemWrap(NamedTuple):
        mol: Chem.rdchem.mol
        atom_id_to_mol_idx: Dict[AtomExtId, int]

    @classmethod
    def atomic_graph_to_chem(cls,
                             graph_record: AtomicGraphRecord,
                             atoms: Dict[AtomExtId, AtomInfoDict]) -> ChemWrap:
        # create empty editable mol object
        mol = Chem.RWMol()

        # add atoms to mol and keep track of index
        atom_id_to_index = {}
        for atom_id, atom_info in graph_record.atoms.items():
            atom_id_to_index[atom_id] = mol.AddAtom(Chem.Atom(atom_info['name']))

        # add bonds between adjacent atoms
        for (u, v), edge_attr in graph_record.bonds.items():
            # add relevant bond type (there are many more of these)
            if edge_attr['arity'] == 1:
                bond_type = Chem.rdchem.BondType.SINGLE
            elif edge_attr['arity'] == 2:
                bond_type = Chem.rdchem.BondType.DOUBLE
            else:
                raise ValueError('Unknown arity')
            mol.AddBond(atom_id_to_index[u], atom_id_to_index[v], bond_type)

        # Convert RWMol to Mol object
        mol = mol.GetMol()
        return ChemWrap(mol=mol,
                        atom_id_to_mol_idx=atom_id_to_index)

    def to_mol(self) -> Chem.rdchem.Mol:
        return self.atomic_graph_to_chem(self.to_atomic_graph()).mol

    @classmethod
    def isomorphic(cls, G1, G2):
        return Chem.CanonSmiles(Chem.MolToSmiles(G1.to_mol())) == Chem.CanonSmiles(Chem.MolToSmiles(G2.to_mol()))
" 0 4 (fontified t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 73 (face font-lock-comment-face fontified t) 73 74 (face font-lock-comment-face fontified t) 74 78 (fontified t) 78 81 (face font-lock-keyword-face fontified t) 81 82 (fontified t) 82 97 (face font-lock-function-name-face fontified t) 97 98 (face (rainbow-delimiters-depth-1-face) fontified t) 98 101 (face font-lock-keyword-face fontified t) 101 102 (face font-lock-keyword-face fontified t) 102 103 (face (rainbow-delimiters-depth-1-face) fontified t) 103 107 (fontified t) 107 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 133 (fontified t) 133 134 (fontified t) 134 137 (face font-lock-keyword-face fontified t) 137 138 (fontified t) 138 159 (face font-lock-function-name-face fontified t) 159 160 (face (rainbow-delimiters-depth-1-face) fontified t) 160 161 (fontified t) 161 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-1-face) fontified t) 183 191 (fontified t) 191 192 (face (rainbow-delimiters-depth-1-face) fontified t) 192 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-1-face) fontified t) 282 284 (fontified t) 284 296 (fontified t) 296 308 (face font-lock-variable-name-face fontified t) 308 311 (fontified t) 311 315 (face font-lock-keyword-face fontified t) 315 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-1-face) fontified t) 324 330 (fontified t) 330 335 (fontified t) 335 336 (face (rainbow-delimiters-depth-1-face) fontified t) 336 349 (fontified t) 349 350 (fontified t) 350 362 (fontified t) 362 366 (face font-lock-keyword-face fontified t) 366 368 (face font-lock-keyword-face fontified t) 368 369 (fontified t) 369 370 (face (rainbow-delimiters-depth-1-face) fontified t) 370 371 (face (rainbow-delimiters-depth-2-face) fontified t) 371 381 (fontified t) 381 392 (fontified t) 392 393 (face (rainbow-delimiters-depth-2-face) fontified t) 393 413 (fontified t) 413 414 (face (rainbow-delimiters-depth-2-face) fontified t) 414 422 (fontified t) 422 423 (face (rainbow-delimiters-depth-2-face) fontified t) 423 424 (fontified t) 424 444 (fontified t) 444 447 (face font-lock-keyword-face fontified t) 447 457 (fontified t) 457 459 (face font-lock-keyword-face fontified t) 459 464 (fontified t) 464 465 (fontified t) 465 472 (fontified t) 472 473 (face (rainbow-delimiters-depth-1-face) fontified t) 473 474 (fontified t) 474 475 (fontified t) 475 483 (fontified t) 483 486 (face font-lock-keyword-face fontified t) 486 487 (fontified t) 487 497 (face font-lock-function-name-face fontified t) 497 508 (face font-lock-function-name-face fontified t) 508 509 (face (rainbow-delimiters-depth-1-face) fontified t) 509 516 (fontified t) 516 531 (fontified t) 531 532 (face (rainbow-delimiters-depth-1-face) fontified t) 532 540 (fontified t) 540 541 (face (rainbow-delimiters-depth-1-face) fontified t) 541 547 (fontified t) 547 574 (fontified t) 574 636 (fontified t) 636 637 (fontified t face (rainbow-delimiters-depth-1-face)) 637 639 (fontified t) 639 650 (fontified t) 650 651 (fontified t rear-nonsticky t) 651 662 (face font-lock-variable-name-face fontified t) 662 663 (face font-lock-variable-name-face fontified t) 663 666 (fontified t) 666 670 (face font-lock-keyword-face fontified t) 670 678 (fontified t) 678 679 (face (rainbow-delimiters-depth-1-face) fontified t) 679 685 (fontified t) 685 690 (fontified t) 690 691 (face (rainbow-delimiters-depth-1-face) fontified t) 691 704 (fontified t) 704 705 (fontified t) 705 716 (fontified t) 716 717 (fontified t) 717 723 (face font-lock-keyword-face fontified t) 723 724 (fontified t) 724 725 (face (rainbow-delimiters-depth-1-face) fontified t) 725 726 (face (rainbow-delimiters-depth-2-face) fontified t) 726 727 (face (rainbow-delimiters-depth-3-face) fontified t) 727 749 (fontified t) 749 750 (face (rainbow-delimiters-depth-4-face) fontified t) 750 751 (fontified t) 751 752 (face (rainbow-delimiters-depth-4-face) fontified t) 752 753 (face (rainbow-delimiters-depth-3-face) fontified t) 753 754 (fontified t) 754 755 (fontified t) 755 758 (fontified t) 758 764 (fontified t) 764 776 (fontified t) 776 777 (face (rainbow-delimiters-depth-3-face) fontified t) 777 784 (fontified t) 784 799 (fontified t) 799 800 (face (rainbow-delimiters-depth-4-face) fontified t) 800 801 (fontified t) 801 802 (face (rainbow-delimiters-depth-4-face) fontified t) 802 803 (face (rainbow-delimiters-depth-3-face) fontified t) 803 804 (face (rainbow-delimiters-depth-2-face) fontified t) 804 816 (fontified t) 816 836 (fontified t) 836 838 (face font-lock-keyword-face fontified t) 838 839 (face font-lock-keyword-face fontified t) 839 845 (fontified t) 845 856 (fontified t) 856 861 (fontified t) 861 863 (face font-lock-keyword-face fontified t) 863 864 (fontified t) 864 876 (fontified t) 876 888 (fontified t) 888 889 (face (rainbow-delimiters-depth-2-face) fontified t) 889 890 (face (rainbow-delimiters-depth-2-face) fontified t) 890 891 (face (rainbow-delimiters-depth-1-face) fontified t) 891 892 (fontified t) 892 893 (fontified t) 893 898 (fontified t) 898 901 (fontified t) 901 906 (face font-lock-variable-name-face fontified t) 906 919 (fontified t) 919 920 (face (rainbow-delimiters-depth-1-face) fontified t) 920 941 (fontified t) 941 942 (face (rainbow-delimiters-depth-2-face) fontified t) 942 952 (fontified t) 952 953 (fontified t) 953 954 (face (rainbow-delimiters-depth-2-face) fontified t) 954 955 (fontified t) 955 982 (fontified t) 982 985 (face font-lock-keyword-face fontified t) 985 991 (fontified t) 991 998 (fontified t) 998 1000 (face font-lock-keyword-face fontified t) 1000 1001 (fontified t) 1001 1005 (face font-lock-keyword-face fontified t) 1005 1011 (fontified t) 1011 1012 (face (rainbow-delimiters-depth-1-face) fontified t) 1012 1013 (fontified t) 1013 1021 (fontified t) 1021 1035 (face font-lock-variable-name-face fontified t) 1035 1041 (fontified t) 1041 1046 (fontified t) 1046 1048 (fontified t) 1048 1049 (face (rainbow-delimiters-depth-1-face) fontified t) 1049 1053 (fontified t) 1053 1070 (fontified t) 1070 1071 (face (rainbow-delimiters-depth-2-face) fontified t) 1071 1082 (fontified t) 1082 1083 (face (rainbow-delimiters-depth-2-face) fontified t) 1083 1084 (fontified t) 1084 1087 (fontified t) 1087 1120 (fontified t) 1120 1123 (face font-lock-keyword-face fontified t) 1123 1136 (fontified t) 1136 1138 (face font-lock-keyword-face fontified t) 1138 1139 (fontified t) 1139 1141 (fontified t face font-lock-keyword-face) 1141 1143 (fontified t face font-lock-keyword-face) 1143 1149 (fontified t) 1149 1150 (fontified t face (rainbow-delimiters-depth-1-face)) 1150 1151 (fontified t) 1151 1152 (fontified t) 1152 1160 (fontified t) 1160 1163 (face font-lock-keyword-face fontified t) 1163 1164 (fontified t) 1164 1195 (face font-lock-function-name-face fontified t) 1195 1196 (face (rainbow-delimiters-depth-1-face) fontified t) 1196 1205 (fontified t) 1205 1222 (fontified t) 1222 1223 (face (rainbow-delimiters-depth-1-face) fontified t) 1223 1232 (fontified t) 1232 1233 (face (rainbow-delimiters-depth-1-face) fontified t) 1233 1239 (fontified t) 1239 1316 (fontified t) 1316 1337 (fontified t) 1337 1343 (fontified t) 1343 1344 (face (rainbow-delimiters-depth-1-face) fontified t) 1344 1346 (fontified t) 1346 1358 (fontified t) 1358 1378 (face font-lock-variable-name-face fontified t) 1378 1394 (fontified t) 1394 1395 (face (rainbow-delimiters-depth-1-face) fontified t) 1395 1400 (face font-lock-builtin-face fontified t) 1400 1401 (face (rainbow-delimiters-depth-2-face) fontified t) 1401 1403 (fontified t) 1403 1407 (fontified t) 1407 1409 (fontified t) 1409 1410 (fontified t) 1410 1411 (face (rainbow-delimiters-depth-3-face) fontified t) 1411 1428 (face font-lock-string-face fontified t) 1428 1429 (face (rainbow-delimiters-depth-3-face) fontified t) 1429 1435 (fontified t) 1435 1436 (face (rainbow-delimiters-depth-3-face) fontified t) 1436 1437 (face (rainbow-delimiters-depth-3-face) fontified t) 1437 1438 (face (rainbow-delimiters-depth-2-face) fontified t) 1438 1439 (face (rainbow-delimiters-depth-1-face) fontified t) 1439 1440 (fontified t) 1440 1452 (fontified t) 1452 1468 (face font-lock-variable-name-face fontified t) 1468 1479 (fontified t) 1479 1480 (fontified t) 1480 1482 (fontified t) 1482 1485 (fontified t) 1485 1486 (face (rainbow-delimiters-depth-1-face) fontified t) 1486 1487 (face (rainbow-delimiters-depth-2-face) fontified t) 1487 1498 (fontified t) 1498 1544 (fontified t) 1544 1545 (fontified t) 1545 1546 (face font-lock-keyword-face fontified t) 1546 1548 (face font-lock-keyword-face fontified t) 1548 1550 (fontified t) 1550 1560 (fontified t) 1560 1562 (face font-lock-keyword-face fontified t) 1562 1578 (fontified t) 1578 1579 (face (rainbow-delimiters-depth-3-face) fontified t) 1579 1580 (face (rainbow-delimiters-depth-3-face) fontified t) 1580 1581 (fontified t) 1581 1602 (fontified t) 1602 1604 (fontified t) 1604 1606 (fontified t) 1606 1628 (fontified t) 1628 1630 (face font-lock-keyword-face fontified t) 1630 1638 (fontified t) 1638 1651 (face font-lock-string-face fontified t) 1651 1655 (fontified t face font-lock-string-face) 1655 1656 (fontified t face (rainbow-delimiters-depth-2-face)) 1656 1657 (fontified t face (rainbow-delimiters-depth-1-face)) 1657 1658 (fontified t) 1658 1670 (fontified t) 1670 1676 (face font-lock-keyword-face fontified t) 1676 1677 (fontified t) 1677 1678 (face (rainbow-delimiters-depth-1-face) fontified t) 1678 1716 (fontified t) 1716 1717 (face (rainbow-delimiters-depth-1-face) fontified t) 1717 1718 (fontified t) 1718 1719 (fontified t) 1719 1727 (fontified t) 1727 1738 (face font-lock-variable-name-face fontified t) 1738 1740 (face font-lock-variable-name-face fontified t) 1740 1741 (face font-lock-variable-name-face fontified t) 1741 1742 (fontified t) 1742 1744 (fontified t) 1744 1748 (face font-lock-builtin-face fontified t) 1748 1749 (face (rainbow-delimiters-depth-1-face) fontified t) 1749 1780 (fontified t) 1780 1781 (face (rainbow-delimiters-depth-2-face) fontified t) 1781 1790 (fontified t) 1790 1791 (face (rainbow-delimiters-depth-2-face) fontified t) 1791 1792 (fontified t) 1792 1822 (fontified t) 1822 1825 (face font-lock-keyword-face fontified t) 1825 1826 (fontified t) 1826 1827 (face (rainbow-delimiters-depth-2-face) fontified t) 1827 1831 (fontified t) 1831 1832 (face (rainbow-delimiters-depth-2-face) fontified t) 1832 1843 (fontified t) 1843 1844 (fontified t) 1844 1846 (face font-lock-keyword-face fontified t) 1846 1847 (fontified t) 1847 1851 (face font-lock-keyword-face fontified t) 1851 1852 (fontified t) 1852 1863 (fontified t) 1863 1864 (face (rainbow-delimiters-depth-2-face) fontified t) 1864 1865 (face (rainbow-delimiters-depth-2-face) fontified t) 1865 1866 (face (rainbow-delimiters-depth-1-face) fontified t) 1866 1867 (fontified t) 1867 1875 (fontified t) 1875 1881 (face font-lock-keyword-face fontified t) 1881 1882 (fontified t) 1882 1899 (fontified t) 1899 1900 (face (rainbow-delimiters-depth-1-face) fontified t) 1900 1906 (fontified t) 1906 1913 (fontified t) 1913 1957 (fontified t) 1957 1962 (fontified t) 1962 1963 (face (rainbow-delimiters-depth-2-face) fontified t) 1963 1964 (face (rainbow-delimiters-depth-3-face) fontified t) 1964 1972 (fontified t) 1972 1994 (fontified t) 1994 1995 (face (rainbow-delimiters-depth-3-face) fontified t) 1995 1996 (face (rainbow-delimiters-depth-2-face) fontified t) 1996 1997 (face (rainbow-delimiters-depth-1-face) fontified t) 1997 1998 (fontified t) 1998 1999 (fontified t) 1999 2003 (fontified t) 2003 2008 (face font-lock-keyword-face fontified t) 2008 2009 (fontified t) 2009 2017 (face font-lock-type-face fontified t) 2017 2018 (face (rainbow-delimiters-depth-1-face) fontified t) 2018 2028 (fontified t) 2028 2029 (face (rainbow-delimiters-depth-1-face) fontified t) 2029 2031 (fontified t) 2031 2056 (fontified t) 2056 2060 (fontified t) 2060 2092 (fontified t) 2092 2093 (face (rainbow-delimiters-depth-1-face) fontified t) 2093 2104 (fontified t) 2104 2107 (face font-lock-builtin-face fontified t) 2107 2108 (face (rainbow-delimiters-depth-1-face) fontified t) 2108 2109 (fontified t) 2109 2110 (fontified t) 2110 2113 (fontified t) 2113 2115 (fontified t) 2115 2126 (face font-lock-builtin-face fontified t) 2126 2127 (fontified t) 2127 2128 (fontified t) 2128 2131 (fontified t) 2131 2134 (face font-lock-keyword-face fontified t) 2134 2135 (fontified t) 2135 2155 (face font-lock-function-name-face fontified t) 2155 2156 (face (rainbow-delimiters-depth-1-face) fontified t) 2156 2158 (fontified t) 2158 2160 (fontified t) 2160 2161 (fontified t) 2161 2222 (fontified t) 2222 2223 (fontified t) 2223 2263 (fontified t) 2263 2264 (face (rainbow-delimiters-depth-2-face) fontified t) 2264 2271 (fontified t) 2271 2277 (fontified t) 2277 2287 (fontified t) 2287 2288 (face (rainbow-delimiters-depth-2-face) fontified t) 2288 2289 (face (rainbow-delimiters-depth-1-face) fontified t) 2289 2301 (fontified t) 2301 2303 (fontified t) 2303 2307 (fontified t) 2307 2311 (fontified t) 2311 2313 (face font-lock-comment-delimiter-face fontified t) 2313 2336 (face font-lock-comment-face fontified t) 2336 2345 (face font-lock-comment-face fontified t) 2345 2346 (face font-lock-comment-face fontified t) 2346 2354 (fontified t) 2354 2357 (face font-lock-variable-name-face fontified t) 2357 2370 (fontified t) 2370 2371 (face (rainbow-delimiters-depth-1-face) fontified t) 2371 2372 (face (rainbow-delimiters-depth-1-face) fontified t) 2372 2381 (fontified t) 2381 2382 (fontified t) 2382 2384 (face font-lock-comment-delimiter-face fontified t) 2384 2411 (face font-lock-comment-face fontified t) 2411 2425 (face font-lock-comment-face fontified t) 2425 2429 (fontified t) 2429 2433 (fontified t) 2433 2447 (face font-lock-variable-name-face fontified t) 2447 2449 (face font-lock-variable-name-face fontified t) 2449 2452 (fontified t) 2452 2453 (face (rainbow-delimiters-depth-1-face) fontified t) 2453 2454 (face (rainbow-delimiters-depth-1-face) fontified t) 2454 2455 (fontified t) 2455 2463 (fontified t) 2463 2466 (face font-lock-keyword-face fontified t) 2466 2480 (fontified t) 2480 2486 (fontified t) 2486 2488 (face font-lock-keyword-face fontified t) 2488 2511 (fontified t) 2511 2513 (fontified t) 2513 2514 (face (rainbow-delimiters-depth-1-face) fontified t) 2514 2515 (face (rainbow-delimiters-depth-1-face) fontified t) 2515 2517 (fontified t) 2517 2529 (fontified t) 2529 2545 (face font-lock-variable-name-face fontified t) 2545 2546 (face (rainbow-delimiters-depth-1-face) fontified t) 2546 2553 (fontified t) 2553 2554 (face (rainbow-delimiters-depth-1-face) fontified t) 2554 2568 (fontified t) 2568 2569 (face (rainbow-delimiters-depth-1-face) fontified t) 2569 2578 (fontified t) 2578 2579 (face (rainbow-delimiters-depth-2-face) fontified t) 2579 2581 (fontified t) 2581 2588 (fontified t) 2588 2589 (face (rainbow-delimiters-depth-3-face) fontified t) 2589 2595 (face font-lock-string-face fontified t) 2595 2596 (face (rainbow-delimiters-depth-3-face) fontified t) 2596 2597 (face (rainbow-delimiters-depth-2-face) fontified t) 2597 2598 (face (rainbow-delimiters-depth-1-face) fontified t) 2598 2599 (fontified t) 2599 2600 (fontified t) 2600 2608 (fontified t) 2608 2609 (face font-lock-comment-delimiter-face fontified t) 2609 2610 (fontified t face font-lock-comment-delimiter-face) 2610 2627 (fontified t face font-lock-comment-face) 2627 2633 (fontified t face font-lock-comment-face) 2633 2643 (fontified t face font-lock-comment-face) 2643 2651 (fontified t) 2651 2654 (face font-lock-keyword-face fontified t) 2654 2655 (fontified t) 2655 2656 (face (rainbow-delimiters-depth-1-face) fontified t) 2656 2660 (fontified t) 2660 2661 (face (rainbow-delimiters-depth-1-face) fontified t) 2661 2673 (fontified t) 2673 2675 (face font-lock-keyword-face fontified t) 2675 2700 (fontified t) 2700 2701 (face (rainbow-delimiters-depth-1-face) fontified t) 2701 2702 (face (rainbow-delimiters-depth-1-face) fontified t) 2702 2704 (fontified t) 2704 2705 (fontified t) 2705 2716 (fontified t) 2716 2718 (face font-lock-comment-delimiter-face fontified t) 2718 2772 (face font-lock-comment-face fontified t) 2772 2784 (fontified t) 2784 2786 (face font-lock-keyword-face fontified t) 2786 2796 (fontified t) 2796 2797 (face (rainbow-delimiters-depth-1-face) fontified t) 2797 2803 (face font-lock-string-face fontified t) 2803 2804 (face font-lock-string-face fontified t) 2804 2805 (face (rainbow-delimiters-depth-1-face) fontified t) 2805 2812 (fontified t) 2812 2828 (fontified t) 2828 2829 (face font-lock-variable-name-face fontified t) 2829 2837 (face font-lock-variable-name-face fontified t) 2837 2846 (fontified t) 2846 2868 (fontified t) 2868 2872 (fontified t) 2872 2880 (fontified t) 2880 2884 (face font-lock-keyword-face fontified t) 2884 2894 (fontified t) 2894 2895 (face (rainbow-delimiters-depth-1-face) fontified t) 2895 2902 (face font-lock-string-face fontified t) 2902 2903 (face (rainbow-delimiters-depth-1-face) fontified t) 2903 2910 (fontified t) 2910 2926 (fontified t) 2926 2935 (face font-lock-variable-name-face fontified t) 2935 2951 (fontified t) 2951 2966 (fontified t) 2966 2978 (fontified t) 2978 2981 (face font-lock-keyword-face fontified t) 2981 2982 (face font-lock-keyword-face fontified t) 2982 2984 (fontified t) 2984 3000 (fontified t) 3000 3005 (face font-lock-keyword-face fontified t) 3005 3006 (fontified t) 3006 3016 (face font-lock-type-face fontified t) 3016 3017 (face (rainbow-delimiters-depth-1-face) fontified t) 3017 3030 (face font-lock-string-face fontified t) 3030 3032 (face font-lock-string-face fontified t) 3032 3033 (face (rainbow-delimiters-depth-1-face) fontified t) 3033 3034 (fontified t) 3034 3057 (fontified t) 3057 3058 (face (rainbow-delimiters-depth-1-face) fontified t) 3058 3074 (fontified t) 3074 3075 (face (rainbow-delimiters-depth-2-face) fontified t) 3075 3076 (fontified t) 3076 3077 (face (rainbow-delimiters-depth-2-face) fontified t) 3077 3095 (fontified t) 3095 3096 (face (rainbow-delimiters-depth-2-face) fontified t) 3096 3097 (fontified t) 3097 3098 (face (rainbow-delimiters-depth-2-face) fontified t) 3098 3099 (fontified t) 3099 3109 (fontified t) 3109 3110 (face (rainbow-delimiters-depth-1-face) fontified t) 3110 3111 (fontified t) 3111 3112 (fontified t) 3112 3113 (fontified t) 3113 3120 (fontified t) 3120 3122 (face font-lock-comment-delimiter-face fontified t) 3122 3143 (face font-lock-comment-face fontified t) 3143 3150 (fontified t face font-lock-comment-face) 3150 3156 (fontified t) 3156 3158 (fontified t) 3158 3161 (face font-lock-variable-name-face fontified t) 3161 3174 (fontified t) 3174 3175 (face (rainbow-delimiters-depth-1-face) fontified t) 3175 3176 (face (rainbow-delimiters-depth-1-face) fontified t) 3176 3177 (fontified t) 3177 3185 (fontified t) 3185 3191 (face font-lock-keyword-face fontified t) 3191 3200 (fontified t) 3200 3201 (face (rainbow-delimiters-depth-1-face) fontified t) 3201 3205 (fontified t) 3205 3210 (fontified t) 3210 3259 (fontified t) 3259 3269 (fontified t) 3269 3270 (face (rainbow-delimiters-depth-1-face) fontified t) 3270 3271 (fontified t) 3271 3276 (fontified t) 3276 3279 (face font-lock-keyword-face fontified t) 3279 3280 (fontified t) 3280 3286 (face font-lock-function-name-face fontified t) 3286 3287 (face (rainbow-delimiters-depth-1-face) fontified t) 3287 3291 (face font-lock-keyword-face fontified t) 3291 3292 (face (rainbow-delimiters-depth-1-face) fontified t) 3292 3313 (fontified t) 3313 3321 (fontified t) 3321 3327 (face font-lock-keyword-face fontified t) 3327 3328 (fontified t) 3328 3332 (face font-lock-keyword-face fontified t) 3332 3353 (fontified t) 3353 3354 (face (rainbow-delimiters-depth-1-face) fontified t) 3354 3358 (face font-lock-keyword-face fontified t) 3358 3366 (fontified t) 3366 3374 (fontified t) 3374 3375 (face (rainbow-delimiters-depth-2-face) fontified t) 3375 3376 (face (rainbow-delimiters-depth-2-face) fontified t) 3376 3377 (face (rainbow-delimiters-depth-1-face) fontified t) 3377 3381 (fontified t) 3381 3382 (fontified t) 3382 3388 (fontified t) 3388 3399 (face font-lock-builtin-face fontified t) 3399 3404 (fontified t) 3404 3407 (face font-lock-keyword-face fontified t) 3407 3408 (fontified t) 3408 3418 (face font-lock-function-name-face fontified t) 3418 3419 (face (rainbow-delimiters-depth-1-face) fontified t) 3419 3423 (fontified t) 3423 3430 (fontified t) 3430 3431 (face (rainbow-delimiters-depth-1-face) fontified t) 3431 3433 (fontified t) 3433 3441 (fontified t) 3441 3447 (face font-lock-keyword-face fontified t) 3447 3464 (fontified t) 3464 3465 (face (rainbow-delimiters-depth-1-face) fontified t) 3465 3481 (fontified t) 3481 3482 (face (rainbow-delimiters-depth-2-face) fontified t) 3482 3483 (fontified t) 3483 3484 (fontified t) 3484 3485 (fontified t) 3485 3491 (fontified t) 3491 3492 (face (rainbow-delimiters-depth-3-face) fontified t) 3492 3493 (face (rainbow-delimiters-depth-3-face) fontified t) 3493 3494 (face (rainbow-delimiters-depth-2-face) fontified t) 3494 3495 (face (rainbow-delimiters-depth-1-face) fontified t) 3495 3515 (fontified t) 3515 3516 (face (rainbow-delimiters-depth-1-face) fontified t) 3516 3521 (fontified t) 3521 3532 (fontified t) 3532 3533 (face (rainbow-delimiters-depth-2-face) fontified t) 3533 3542 (fontified t) 3542 3543 (face (rainbow-delimiters-depth-3-face) fontified t) 3543 3544 (face (rainbow-delimiters-depth-3-face) fontified t) 3544 3545 (face (rainbow-delimiters-depth-2-face) fontified t) 3545 3546 (face (rainbow-delimiters-depth-1-face) fontified t) 3546 3547 (fontified t)) . 4346) (undo-tree-id3873 . -3474) (undo-tree-id3874 . 166) (undo-tree-id3875 . -893) (undo-tree-id3876 . -41) (undo-tree-id3877 . -3474) (undo-tree-id3878 . -2056) (undo-tree-id3879 . -864) (undo-tree-id3880 . -107) (undo-tree-id3881 . -893) (undo-tree-id3882 . -893) (undo-tree-id3883 . -1998) (undo-tree-id3884 . -3354) (undo-tree-id3885 . -3474) (undo-tree-id3886 . -2223) (undo-tree-id3887 . -2303) (undo-tree-id3888 . -1906) (undo-tree-id3889 . -2303) (undo-tree-id3890 . -2062) (undo-tree-id3891 . -2062) (undo-tree-id3892 . -41) (undo-tree-id3893 . -3474) 7820) nil (25900 9874 278257 377000) 0 nil])
([nil nil ((#("AtomExtId = NewType('AtomExtId', Tuple[MonomerId, AtomId])
AtomicEdgeExt = NewType('EdgeExtId', Tuple[AtomExtId, AtomExtId])

AtomInfoDict = dict
AtomicEdgeInfoDict = dict
EdgeInfoDict = dict
MonomerEdgeInfo = dict


class AtomicGraphRecord(NamedTuple):
    atoms: Dict[AtomExtId, AtomInfoDict]
    bonds: Dict[AtomicEdgeExt, AtomicEdgeInfo]
" 0 9 (face font-lock-variable-name-face fontified t) 9 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 31 (face font-lock-string-face fontified t) 31 37 (fontified t) 37 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-2-face) fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (fontified t) 59 62 (face font-lock-variable-name-face fontified t) 62 72 (fontified t face font-lock-variable-name-face) 72 75 (fontified t) 75 82 (fontified t) 82 83 (fontified t face (rainbow-delimiters-depth-1-face)) 83 94 (fontified t face font-lock-string-face) 94 101 (fontified t) 101 102 (fontified t face (rainbow-delimiters-depth-2-face)) 102 122 (fontified t) 122 123 (fontified t face (rainbow-delimiters-depth-2-face)) 123 124 (fontified t face (rainbow-delimiters-depth-1-face) rear-nonsticky t) 124 125 (fontified t) 125 126 (fontified t) 126 138 (face font-lock-variable-name-face fontified t) 138 141 (fontified t) 141 145 (face font-lock-builtin-face fontified t) 145 146 (fontified t) 146 164 (face font-lock-variable-name-face fontified t) 164 167 (fontified t) 167 171 (face font-lock-builtin-face fontified t) 171 172 (fontified t) 172 184 (face font-lock-variable-name-face fontified t) 184 187 (fontified t) 187 191 (face font-lock-builtin-face fontified t) 191 192 (fontified t rear-nonsticky t) 192 197 (face font-lock-variable-name-face fontified t) 197 207 (face font-lock-variable-name-face fontified t) 207 210 (fontified t) 210 214 (face font-lock-builtin-face fontified t) 214 215 (fontified t) 215 216 (fontified t) 216 217 (fontified t) 217 222 (face font-lock-keyword-face fontified t) 222 223 (fontified t) 223 240 (face font-lock-type-face fontified t) 240 241 (face (rainbow-delimiters-depth-1-face) fontified t) 241 251 (fontified t) 251 252 (face (rainbow-delimiters-depth-1-face) fontified t) 252 254 (fontified t) 254 258 (fontified t) 258 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-1-face) fontified t) 270 277 (fontified t) 277 283 (fontified t) 283 293 (fontified t) 293 294 (face (rainbow-delimiters-depth-1-face) fontified t) 294 295 (fontified t) 295 310 (fontified t) 310 311 (face (rainbow-delimiters-depth-1-face) fontified t) 311 324 (fontified t) 324 332 (fontified t) 332 340 (fontified t) 340 341 (face (rainbow-delimiters-depth-1-face) fontified t) 341 342 (fontified t)) . 522) (undo-tree-id3894 . -295) (undo-tree-id3895 . -75) (undo-tree-id3896 . -123) (undo-tree-id3897 . -295) (undo-tree-id3898 . -214) (undo-tree-id3899 . -172) (undo-tree-id3900 . -342) (undo-tree-id3901 . -75) (undo-tree-id3902 . -295) (undo-tree-id3903 . -295) 817 (t 25900 9874 285831 694000)) nil (25900 10097 526155 956000) 0 nil])
([nil nil ((#("from src.utils.my_algorithms import to_dict, join_dicts
" 0 4 (face font-lock-keyword-face fontified t) 4 29 (fontified t) 29 35 (face font-lock-keyword-face fontified t) 35 55 (fontified t) 55 56 (fontified t)) . 323) (t 25900 10097 534553 112000)) nil (25900 10141 605795 615000) 0 nil])
([nil nil ((#("from rdkit import Chem
" 0 4 (face font-lock-keyword-face fontified t) 4 11 (fontified t) 11 17 (face font-lock-keyword-face fontified t) 17 23 (fontified t)) . 350)) nil (25900 10141 605794 185000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 350)) nil (25900 10141 605789 176000) 0 nil])
([nil nil ((#("    NamedTuple,
" 0 4 (fontified t) 4 15 (fontified t) 15 16 (fontified t)) . 68) (t 25900 10141 615485 803000)) nil (25900 10158 50577 160000) 0 nil])
([nil nil ((#("    AtomicEdgeInfo,
" 0 19 (fontified t) 19 20 (fontified t)) . 156)) nil (25900 10158 50572 352000) 0 nil])
([nil nil ((#("    AtomInfo,
" 0 14 (fontified t)) . 142) (undo-tree-id3904 . -14) (undo-tree-id3905 . -14) (undo-tree-id3906 . -14) (undo-tree-id3907 . -14) (undo-tree-id3908 . -14) (undo-tree-id3909 . -14) (undo-tree-id3910 . -14) (undo-tree-id3911 . -14) (undo-tree-id3912 . -14) (undo-tree-id3913 . -14) (undo-tree-id3914 . -14) (undo-tree-id3915 . -14) (undo-tree-id3916 . -14) (undo-tree-id3917 . -14) (undo-tree-id3918 . -14) (undo-tree-id3919 . -14) (undo-tree-id3920 . -14) (undo-tree-id3921 . -14) (undo-tree-id3922 . -14) (undo-tree-id3923 . -14) (undo-tree-id3924 . -14) (undo-tree-id3925 . -14) (undo-tree-id3926 . -14) (undo-tree-id3927 . -14) (undo-tree-id3928 . -14) (undo-tree-id3929 . -14) (undo-tree-id3930 . -14) (undo-tree-id3931 . -14) (undo-tree-id3932 . -14) (undo-tree-id3933 . -14) (undo-tree-id3934 . -14) (undo-tree-id3935 . -14) (undo-tree-id3936 . -14) (undo-tree-id3937 . -14) (undo-tree-id3938 . -14) (undo-tree-id3939 . -14) (undo-tree-id3940 . -14) (undo-tree-id3941 . -14) (undo-tree-id3942 . -14) (undo-tree-id3943 . -14) (undo-tree-id3944 . -14) (undo-tree-id3945 . -14) (undo-tree-id3946 . -14) (undo-tree-id3947 . -14) (undo-tree-id3948 . -14) (undo-tree-id3949 . -14) (undo-tree-id3950 . -14) (undo-tree-id3951 . -14) (undo-tree-id3952 . -14) (undo-tree-id3953 . -14) (undo-tree-id3954 . -14) (undo-tree-id3955 . -14) (undo-tree-id3956 . -14) (undo-tree-id3957 . -14) (undo-tree-id3958 . -14) (undo-tree-id3959 . -14) (undo-tree-id3960 . -14) (undo-tree-id3961 . -14) (undo-tree-id3962 . -14) (undo-tree-id3963 . -14) (undo-tree-id3964 . -14) (undo-tree-id3965 . -14) (undo-tree-id3966 . -14) (undo-tree-id3967 . -14) (undo-tree-id3968 . -14) (undo-tree-id3969 . -14) (undo-tree-id3970 . -14) (undo-tree-id3971 . -14) (undo-tree-id3972 . -14) (undo-tree-id3973 . -14) (undo-tree-id3974 . -14) (undo-tree-id3975 . -14) (undo-tree-id3976 . -14) (undo-tree-id3977 . -14) (undo-tree-id3978 . -14) (undo-tree-id3979 . -14) (undo-tree-id3980 . -14) (undo-tree-id3981 . -14) (undo-tree-id3982 . -14) (undo-tree-id3983 . -14) (undo-tree-id3984 . -14) (undo-tree-id3985 . -14) (undo-tree-id3986 . -14) (undo-tree-id3987 . -14) (undo-tree-id3988 . -14) (undo-tree-id3989 . -14) (undo-tree-id3990 . -14) (undo-tree-id3991 . -14) (undo-tree-id3992 . -14) (undo-tree-id3993 . -14) (undo-tree-id3994 . -14) (undo-tree-id3995 . -14) (undo-tree-id3996 . -14) (undo-tree-id3997 . -14) (undo-tree-id3998 . -14) (undo-tree-id3999 . -14) (undo-tree-id4000 . -14) (undo-tree-id4001 . -14) (undo-tree-id4002 . -14) (undo-tree-id4003 . -14) (undo-tree-id4004 . -14) (undo-tree-id4005 . -14) (t 25900 10158 59833 773000)) nil (25900 10163 974425 478000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 392) (undo-tree-id4006 . -1) (t 25900 10163 983959 134000)) nil (25900 10567 838426 245000) 0 nil])
([nil nil ((#("    # not quite like that now it is possible to add an AMINO bond with arity other than 1
    def add_bond(self,
                 monomer1_idx: MonomerId,
                 monomer2_idx: MonomerId,
                 monomer_to_atom: Dict[MonomerId, AtomId],
                 arity=1,
                 bondType='AMINO'):
        self.add_edge(monomer1_idx, monomer2_idx,
                      monomer_to_atom=monomer_to_atom,
                      bondType=bondType,
                      arity=arity)

" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 6 (face font-lock-comment-delimiter-face fontified t) 6 9 (face font-lock-comment-face fontified t) 9 12 (face font-lock-comment-face fontified t) 12 16 (face font-lock-comment-face fontified t) 16 23 (face font-lock-comment-face fontified t) 23 46 (face font-lock-comment-face fontified t) 46 52 (face font-lock-comment-face fontified t) 52 59 (face font-lock-comment-face fontified t) 59 60 (face font-lock-comment-face fontified t) 60 69 (face font-lock-comment-face fontified t) 69 70 (face font-lock-comment-face fontified t) 70 90 (face font-lock-comment-face fontified t) 90 94 (fontified t) 94 97 (face font-lock-keyword-face fontified t) 97 98 (fontified t) 98 106 (face font-lock-function-name-face fontified t) 106 107 (face (rainbow-delimiters-depth-1-face) fontified t) 107 111 (face font-lock-keyword-face fontified t) 111 113 (fontified t) 113 131 (fontified t) 131 155 (fontified t) 155 170 (fontified t) 170 190 (fontified t) 190 191 (fontified t) 191 194 (fontified t) 194 195 (fontified t) 195 197 (fontified t) 197 234 (fontified t) 234 235 (fontified t) 235 236 (face (rainbow-delimiters-depth-2-face) fontified t) 236 243 (fontified t) 243 251 (fontified t) 251 253 (fontified t) 253 254 (face (rainbow-delimiters-depth-2-face) fontified t) 254 256 (fontified t) 256 263 (fontified t) 263 269 (fontified t) 269 274 (fontified t) 274 282 (fontified t) 282 286 (fontified t) 286 287 (fontified t) 287 288 (fontified t) 288 308 (fontified t) 308 315 (fontified t face font-lock-string-face) 315 316 (fontified t face (rainbow-delimiters-depth-1-face)) 316 318 (fontified t) 318 326 (fontified t) 326 330 (face font-lock-keyword-face fontified t) 330 339 (fontified t) 339 340 (face (rainbow-delimiters-depth-1-face) fontified t) 340 365 (fontified t) 365 368 (fontified t) 368 388 (fontified t) 388 411 (fontified t) 411 423 (fontified t) 423 454 (fontified t) 454 455 (fontified t) 455 464 (fontified t) 464 497 (fontified t) 497 498 (face (rainbow-delimiters-depth-1-face) fontified t) 498 500 (fontified t)) . 605) (undo-tree-id4010 . -499) (undo-tree-id4011 . -499) (undo-tree-id4012 . -282) (undo-tree-id4013 . -499) (undo-tree-id4014 . -499) 1104 (t 25900 10567 845036 467000)) nil (25900 11101 440036 965000) 0 nil])
([nil nil ((92 . 148)) nil (25900 11101 440033 253000) 0 nil])
([nil nil ((#("compose, join_dicts" 0 19 (fontified t)) . 128) (undo-tree-id4007 . -19) (undo-tree-id4008 . -19) (undo-tree-id4009 . -19)) nil (25900 11101 440031 656000) 0 nil])
([nil nil ((128 . 135)) nil (25900 11101 440016 573000) 0 nil])
([nil nil ((#("    AtomId,
" 0 12 (fontified t)) . 174) (undo-tree-id4171 . -10) (undo-tree-id4172 . -10) (undo-tree-id4173 . -10) (undo-tree-id4174 . -10) (undo-tree-id4175 . -10) (undo-tree-id4176 . -10) (undo-tree-id4177 . -10) (undo-tree-id4178 . -10) (undo-tree-id4179 . -10) (undo-tree-id4180 . -10) (undo-tree-id4181 . -10) (undo-tree-id4182 . -10) (undo-tree-id4183 . -10) (undo-tree-id4184 . -10) (undo-tree-id4185 . -10) (undo-tree-id4186 . -10) (undo-tree-id4187 . -10) (undo-tree-id4188 . -10) (undo-tree-id4189 . -10) (undo-tree-id4190 . -10) (undo-tree-id4191 . -10) (undo-tree-id4192 . -10) (undo-tree-id4193 . -10) (undo-tree-id4194 . -10) (undo-tree-id4195 . -10) (undo-tree-id4196 . -10) (undo-tree-id4197 . -10) (undo-tree-id4198 . -10) (undo-tree-id4199 . -10) (undo-tree-id4200 . -10) (undo-tree-id4201 . -10) (undo-tree-id4202 . -10) (undo-tree-id4203 . -10) (undo-tree-id4204 . -10) (undo-tree-id4205 . -10) (undo-tree-id4206 . -4) (undo-tree-id4207 . -10) (undo-tree-id4208 . -10) (undo-tree-id4209 . -10) (undo-tree-id4210 . -10) (undo-tree-id4211 . -10) (undo-tree-id4212 . -10) (undo-tree-id4213 . -10) (undo-tree-id4214 . -10) (undo-tree-id4215 . -10) (undo-tree-id4216 . -10) (undo-tree-id4217 . -10) (undo-tree-id4218 . -10) (undo-tree-id4219 . -10) (undo-tree-id4220 . -10) (undo-tree-id4221 . -10) (undo-tree-id4222 . -10) (undo-tree-id4223 . -10) (undo-tree-id4224 . -10) 184 (t 25900 11101 452179 514000)) nil (25900 11111 935135 570000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 172)) nil (25900 11111 935018 367000) 0 nil])
([nil nil ((171 . 172) (#("     " 0 1 (fontified nil) 1 5 (fontified nil)) . 171) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (#("
" 0 1 (fontified t)) . -172) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) 171) nil (25900 11111 935013 757000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 190) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1)) nil (25900 11111 934955 475000) 0 nil])
([nil nil ((#("    Dict,
" 0 4 (fontified t) 4 9 (fontified t) 9 10 (fontified t)) . 58) (undo-tree-id4225 . -8) (undo-tree-id4226 . -8) (undo-tree-id4227 . -8) (undo-tree-id4228 . -8) (undo-tree-id4229 . -8) (undo-tree-id4230 . -8) (undo-tree-id4231 . -8) (undo-tree-id4232 . -8) (undo-tree-id4233 . -8) (undo-tree-id4234 . -8) (undo-tree-id4235 . -8) (undo-tree-id4236 . -8) (undo-tree-id4237 . -8) (undo-tree-id4238 . -8) (undo-tree-id4239 . -8) (undo-tree-id4240 . -8) (undo-tree-id4241 . -8) (undo-tree-id4242 . -8) 66 (t 25900 11111 944450 178000)) nil (25900 11120 383223 934000) 0 nil])
([nil nil ((186 . 204) (t 25900 11120 396667 700000)) nil (25910 33032 454523 474000) 0 nil])
([nil nil ((#("monomer" 0 7 (fontified t)) . 204) (undo-tree-id1 . 7) (undo-tree-id2 . -7) (t 25910 33032 459857 200000)) nil (25910 33391 250139 880000) 0 nil])
([nil nil ((204 . 215)) nil (25910 33391 250137 373000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -214) (undo-tree-id0 . -1) 215) nil (25910 33391 250135 677000) 0 nil])
([nil nil ((214 . 217)) nil (25910 33391 250109 953000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 296) (t 25910 33391 258328 250000)) nil (25910 33396 389716 831000) 0 nil])
([nil nil ((296 . 297)) nil (25910 33396 389712 126000) 0 nil])
([nil nil ((#("    Monomer)
" 0 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-unmatched-face)) 12 13 (fontified t)) . 298) (undo-tree-id3 . -11) 309 (t 25910 33396 394420 880000)) nil (25910 33408 39503 435000) 0 nil])
([nil nil ((298 . 299)) nil (25910 33408 39493 806000) 0 nil])
([nil nil ((298 . 319)) nil (25910 33408 39493 95000) 0 nil])
([nil nil ((319 . 340)) nil (25910 33408 39492 322000) 0 nil])
([nil nil ((340 . 341)) nil (25910 33408 39490 983000) 0 nil])
([nil nil ((341 . 343)) nil (25910 33408 39486 373000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 1552) (t 25910 33408 50631 101000)) nil (25910 33489 30589 265000) 0 nil])
([nil nil ((1552 . 1553)) nil (25910 33489 30585 32000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 1564) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (t 25910 33489 40091 775000)) nil (25910 33493 669414 880000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1564)) nil (25910 33493 669413 6000) 0 nil])
([nil nil ((1565 . 1566)) nil (25910 33493 669412 384000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -1564) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1565) (undo-tree-id15 . -1) 1566) nil (25910 33493 669410 481000) 0 nil])
([nil nil ((1564 . 1566)) nil (25910 33493 669396 467000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1566) (undo-tree-id18 . 1) (t 25910 33493 676175 384000)) nil (25910 33499 586138 737000) 0 nil])
([nil nil ((1565 . 1566)) nil (25910 33499 586129 231000) 0 nil])
([nil nil ((1567 . 1568) (t 25910 33499 592282 80000)) nil (25910 33500 519992 639000) 0 nil])
([nil nil ((1440 . 1441) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1440) (t 25910 33500 528298 961000)) nil (25910 33506 780600 395000) 0 nil])
([nil nil ((1452 . 1453) (#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 1452) (undo-tree-id19 . -1) (undo-tree-id20 . -1)) nil (25910 33506 780595 953000) 0 nil])
([nil nil ((#("other" 0 5 (fontified t)) . 2031) (t 25910 33506 788411 864000)) nil (25910 33537 611755 940000) 0 nil])
([nil nil ((2031 . 2037)) nil (25910 33537 611751 401000) 0 nil])
([nil nil ((1545 . 1566) (t 25910 33537 620967 936000)) nil (25910 58614 717390 536000) 0 nil])
([nil nil ((1566 . 1574)) nil (25910 58614 717384 692000) 0 nil])
([nil current ((#("monomer(monomer_idx)" 0 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-1-face))) . 1574) (undo-tree-id21 . 20) (undo-tree-id22 . -8) (undo-tree-id23 . -1) (undo-tree-id24 . -7) (undo-tree-id25 . -7) (t 25910 58614 727932 80000)) nil (25910 58616 854942 906000) 0 nil])
nil
