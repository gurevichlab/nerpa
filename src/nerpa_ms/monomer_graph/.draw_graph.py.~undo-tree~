(undo-tree-save-format-version . 1)
"751b06de13ae29d0e7ba1bdd4e1feb5c71d6dba5"
[nil nil nil nil (25911 60585 344537 986000) 0 nil]
([nil nil ((163 . 169) (t 25869 46611 788503 242000)) nil (25911 60585 344533 251000) 0 nil])
([nil nil ((119 . 137) (t 25911 60585 346875 80000)) nil (25912 5301 447877 841000) 0 nil])
([nil nil ((171 . 1283) (#("

def draw_graph(G: MonomerGraph, output_file):
    standard_aas = ['ala', 'arg', 'asn', 'asp', 'cys',
                    'gln', 'glu', 'gly', 'his', 'ile',
                    'leu', 'lys', 'met', 'phe', 'pro',
                    'ser', 'thr', 'trp', 'tyr', 'val']
    colors_pool = [(0.7 + r/10, 0.7 + g/10, 0.7 + b/10)
                   for r, g, b in product(range(4), repeat=3)
                   if not r == g == b]
    not_supported_color = (0.8, 0.8, 0.8)
    aa_color = defaultdict(lambda: not_supported_color,
                           dict(zip(standard_aas, colors_pool)))
    core_node_color = (0.8, 0.4, 0.4)

    atomic_graph_atoms, atomic_graph_edges = G.to_atomic_graph()
    mol, atom_id_to_index = G.atomic_graph_to_chem(atomic_graph_atoms, atomic_graph_edges)

    atom_colors = dict()
    bonds_to_highlight = list()
    atom_labels = dict()
    for monomer_id in G:
        monomer = G.nodes[monomer_id]['monomer']
        monomer_color = aa_color[monomer.name.lower()] if monomer_id not in G.core_nodes\\
        " 2 5 (face font-lock-keyword-face) 6 16 (face font-lock-function-name-face) 16 17 (face (rainbow-delimiters-depth-1-face)) 45 46 (face (rainbow-delimiters-depth-1-face)) 52 64 (face font-lock-variable-name-face) 67 68 (face (rainbow-delimiters-depth-1-face)) 68 73 (face font-lock-string-face) 75 80 (face font-lock-string-face) 82 87 (face font-lock-string-face) 89 94 (face font-lock-string-face) 96 101 (face font-lock-string-face) 123 128 (face font-lock-string-face) 130 135 (face font-lock-string-face) 137 142 (face font-lock-string-face) 144 149 (face font-lock-string-face) 151 156 (face font-lock-string-face) 178 183 (face font-lock-string-face) 185 190 (face font-lock-string-face) 192 197 (face font-lock-string-face) 199 204 (face font-lock-string-face) 206 211 (face font-lock-string-face) 233 238 (face font-lock-string-face) 240 245 (face font-lock-string-face) 247 252 (face font-lock-string-face) 254 259 (face font-lock-string-face) 261 266 (face font-lock-string-face) 266 267 (face (rainbow-delimiters-depth-1-face)) 272 283 (face font-lock-variable-name-face) 286 287 (face (rainbow-delimiters-depth-1-face)) 287 288 (face (rainbow-delimiters-depth-2-face)) 322 323 (face (rainbow-delimiters-depth-2-face)) 343 346 (face font-lock-keyword-face) 355 357 (face font-lock-keyword-face) 365 366 (face (rainbow-delimiters-depth-2-face)) 366 371 (face font-lock-builtin-face) 371 372 (face (rainbow-delimiters-depth-3-face)) 373 374 (face (rainbow-delimiters-depth-3-face)) 384 385 (face (rainbow-delimiters-depth-2-face)) 405 407 (face font-lock-keyword-face) 408 411 (face font-lock-keyword-face) 423 424 (face (rainbow-delimiters-depth-1-face)) 429 448 (face font-lock-variable-name-face) 451 452 (face (rainbow-delimiters-depth-1-face)) 465 466 (face (rainbow-delimiters-depth-1-face)) 471 479 (face font-lock-variable-name-face) 493 494 (face (rainbow-delimiters-depth-1-face)) 494 500 (face font-lock-keyword-face) 550 554 (face font-lock-builtin-face) 554 555 (face (rainbow-delimiters-depth-2-face)) 555 558 (face font-lock-builtin-face) 558 559 (face (rainbow-delimiters-depth-3-face)) 584 585 (face (rainbow-delimiters-depth-3-face)) 585 586 (face (rainbow-delimiters-depth-2-face)) 586 587 (face (rainbow-delimiters-depth-1-face)) 592 607 (face font-lock-variable-name-face) 610 611 (face (rainbow-delimiters-depth-1-face)) 624 625 (face (rainbow-delimiters-depth-1-face)) 631 649 (face font-lock-variable-name-face) 651 669 (face font-lock-variable-name-face) 689 690 (face (rainbow-delimiters-depth-1-face)) 690 691 (face (rainbow-delimiters-depth-1-face)) 696 699 (face font-lock-variable-name-face) 701 717 (face font-lock-variable-name-face) 742 743 (face (rainbow-delimiters-depth-1-face)) 781 782 (face (rainbow-delimiters-depth-1-face)) 788 799 (face font-lock-variable-name-face) 802 806 (face font-lock-builtin-face) 806 807 (face (rainbow-delimiters-depth-1-face)) 807 808 (face (rainbow-delimiters-depth-1-face)) 813 831 (face font-lock-variable-name-face) 834 838 (face font-lock-builtin-face) 838 839 (face (rainbow-delimiters-depth-1-face)) 839 840 (face (rainbow-delimiters-depth-1-face)) 845 856 (face font-lock-variable-name-face) 859 863 (face font-lock-builtin-face) 863 864 (face (rainbow-delimiters-depth-1-face)) 864 865 (face (rainbow-delimiters-depth-1-face)) 870 873 (face font-lock-keyword-face) 885 886 (face font-lock-keyword-face) 886 887 (face font-lock-keyword-face) 899 906 (face font-lock-variable-name-face) 916 917 (face (rainbow-delimiters-depth-1-face)) 927 928 (face (rainbow-delimiters-depth-1-face)) 928 929 (face (rainbow-delimiters-depth-1-face)) 929 938 (face font-lock-string-face) 938 939 (face (rainbow-delimiters-depth-1-face)) 948 961 (face font-lock-variable-name-face) 972 973 (face (rainbow-delimiters-depth-1-face)) 991 992 (face (rainbow-delimiters-depth-2-face)) 992 993 (face (rainbow-delimiters-depth-2-face)) 993 994 (face (rainbow-delimiters-depth-1-face)) 995 997 (face font-lock-keyword-face) 1009 1012 (face font-lock-keyword-face) 1013 1015 (face font-lock-keyword-face)) . 171) (undo-tree-id116 . -15) (undo-tree-id117 . 1022) (undo-tree-id118 . -2) (undo-tree-id119 . 990) (undo-tree-id120 . -15) (undo-tree-id121 . -15) (t 25911 65092 724807 308000)) nil (25912 5301 447876 721000) 0 nil])
([nil nil ((nil rear-nonsticky nil 888 . 889) (nil fontified nil 888 . 889) (888 . 889) (t 25911 65229 428583 273000)) nil (25912 5301 447872 300000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t rear-nonsticky t face font-lock-variable-name-face)) . 888)) nil (25912 5301 447871 298000) 0 nil])
([nil nil ((897 . 898) (876 . 897) (872 . 876) (872 . 873) 888) nil (25912 5301 447870 510000) 0 nil])
([nil nil ((#("to_atomic_graph(G)" 0 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-1-face))) . 944)) nil (25912 5301 447869 34000) 0 nil])
([nil nil ((nil rear-nonsticky nil 915 . 916) (nil fontified nil 898 . 916) (898 . 916) 897) nil (25912 5301 447868 304000) 0 nil])
([nil nil ((990 . 1036) (#(" " 0 1 (fontified nil)) . 990) (989 . 990) (984 . 989) (#("o" 0 1 (fontified t)) . -984) (undo-tree-id104 . -1) (#("t" 0 1 (fontified t)) . -985) (undo-tree-id105 . -1) 986 (982 . 986) (963 . 982) (#("atomic_graph_r" 0 14 (fontified t)) . -963) (undo-tree-id106 . -14) 977 (975 . 977) (963 . 975) (#("atomic_g" 0 8 (fontified t)) . -963) (undo-tree-id107 . -8) 971 (970 . 971) (966 . 970) (#("i" 0 1 (fontified t)) . -966) (undo-tree-id108 . -1) 967 (964 . 967) (#("m" 0 1 (fontified t)) . -964) (undo-tree-id109 . -1) 965 (962 . 965) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -962) (undo-tree-id110 . -1) 963 (962 . 963) (#("a" 0 1 (fontified t)) . -962) (undo-tree-id111 . -1) (#("t" 0 1 (fontified t)) . -963) (undo-tree-id112 . -1) (#("m" 0 1 (fontified t)) . -964) (undo-tree-id113 . -1) (#("o" 0 1 (fontified t)) . -965) (undo-tree-id114 . -1) (#("i" 0 1 (fontified t)) . -966) (undo-tree-id115 . -1) 967 (962 . 967) (961 . 962)) nil (25912 5301 447865 377000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1061 . 1062) (nil fontified nil 1036 . 1062) (1036 . 1062) 1035) nil (25912 5301 447857 465000) 0 nil])
([nil nil ((#("," 0 1 (fontified t rear-nonsticky t)) . 1061)) nil (25912 5301 447856 430000) 0 nil])
([nil nil ((#("atoms" 0 5 (fontified t)) . 1056) (undo-tree-id0 . -4) (undo-tree-id1 . -5) (undo-tree-id2 . -5) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -5) (undo-tree-id15 . -5) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -5) (undo-tree-id23 . -5) (undo-tree-id24 . -5) (undo-tree-id25 . -5) (undo-tree-id26 . -5) (undo-tree-id27 . -5) (undo-tree-id28 . -5) (undo-tree-id29 . -5) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -5) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) 1060) nil (25912 5301 447852 436000) 0 nil])
([nil nil ((1056 . 1062)) nil (25912 5349 28836 718000) 0 nil])
([nil nil ((#("(atomic_graph_record.atoms," 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 27 (fontified t)) . 962) (undo-tree-id459 . -1) (t 25912 5301 452358 199000)) nil (25912 5369 894512 224000) 0 nil] [nil nil ((#("(atomic_graph_record.atoms,
                                              atomic_graph_record.bonds)
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 28 (fontified t) 28 74 (fontified t) 74 99 (fontified t) 99 100 (fontified t face (rainbow-delimiters-depth-1-face)) 100 101 (fontified t)) . 962) (undo-tree-id128 . -100) (undo-tree-id129 . -100) (undo-tree-id130 . -26) (undo-tree-id131 . -100) (undo-tree-id132 . -74) (undo-tree-id133 . -94) (undo-tree-id134 . -1) (undo-tree-id135 . -74) (undo-tree-id136 . -26) (undo-tree-id137 . -26) (undo-tree-id138 . -26) (undo-tree-id139 . -26) (undo-tree-id140 . -26) (undo-tree-id141 . -26) (undo-tree-id142 . -26) (undo-tree-id143 . -26) (undo-tree-id144 . -26) (undo-tree-id145 . -26) (undo-tree-id146 . -26) (undo-tree-id147 . -26) (undo-tree-id148 . -26) (undo-tree-id149 . -26) (undo-tree-id150 . -26) (undo-tree-id151 . -26) (undo-tree-id152 . -26) (undo-tree-id153 . -26) (undo-tree-id154 . -26) (undo-tree-id155 . -26) (undo-tree-id156 . -26) (undo-tree-id157 . -26) (undo-tree-id158 . -26) (undo-tree-id159 . -26) (undo-tree-id160 . -26) (undo-tree-id161 . -26) (undo-tree-id162 . -26) (undo-tree-id163 . -26) (undo-tree-id164 . -26) (undo-tree-id165 . -26) (undo-tree-id166 . -26) (undo-tree-id167 . -26) (undo-tree-id168 . -26) (undo-tree-id169 . -26) (undo-tree-id170 . -26) (undo-tree-id171 . -26) (undo-tree-id172 . -26) (undo-tree-id173 . -26) (undo-tree-id174 . -26) (undo-tree-id175 . -26) (undo-tree-id176 . -26) (undo-tree-id177 . -26) (undo-tree-id178 . -26) (undo-tree-id179 . -26) (undo-tree-id180 . -26) (undo-tree-id181 . -26) (undo-tree-id182 . -26) (undo-tree-id183 . -26) (undo-tree-id184 . -26) (undo-tree-id185 . -26) (undo-tree-id186 . -26) (undo-tree-id187 . -26) (undo-tree-id188 . -26) (undo-tree-id189 . -26) (undo-tree-id190 . -26) (undo-tree-id191 . -26) (undo-tree-id192 . -26) (undo-tree-id193 . -26) (undo-tree-id194 . -26) (undo-tree-id195 . -26) (undo-tree-id196 . -101) (undo-tree-id197 . -100) (undo-tree-id198 . -73) (undo-tree-id199 . -73) (undo-tree-id200 . -73) (undo-tree-id201 . -73) (undo-tree-id202 . -73) (undo-tree-id203 . -28) (undo-tree-id204 . -100) (undo-tree-id205 . -100) (undo-tree-id206 . -100) (undo-tree-id207 . -100) (undo-tree-id208 . -100) (undo-tree-id209 . -100) (undo-tree-id210 . -100) (undo-tree-id211 . -100) (undo-tree-id212 . -100) (undo-tree-id213 . -100) (undo-tree-id214 . -100) (undo-tree-id215 . -100) (undo-tree-id216 . -100) (undo-tree-id217 . -100) (undo-tree-id218 . -100) (undo-tree-id219 . -100) (undo-tree-id220 . -100) (undo-tree-id221 . -100) (undo-tree-id222 . -100) (undo-tree-id223 . -100) 1062 (t 25912 5301 452358 199000)) ((962 . 1063)) (25912 5349 28170 586000) 0 nil] [nil nil ((921 . 924) (917 . 921) (917 . 918) 988 (t 25912 5301 452358 199000)) ((#("
" 0 1 (fontified nil face font-lock-doc-face)) . 917) (undo-tree-id122 . 1) (#("    " 0 4 (fontified nil)) . 917) (undo-tree-id123 . -4) (#("'''" 0 1 (fontified t syntax-table (15) face font-lock-doc-face) 1 3 (fontified t face font-lock-doc-face)) . 921) (undo-tree-id124 . -1) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -1)) (25912 5343 468628 212000) 0 nil])
([nil nil ((#("                                              atomic_graph_record.bonds)
" 0 46 (fontified t) 46 71 (fontified t) 71 72 (fontified t face (rainbow-delimiters-depth-1-face)) 72 73 (fontified t)) . 963) (undo-tree-id453 . -72) (undo-tree-id454 . -72) (undo-tree-id455 . -44) (undo-tree-id456 . -46) (undo-tree-id457 . -66) (undo-tree-id458 . -46) 1007) nil (25912 5369 894511 81000) 0 nil])
nil
nil
([nil nil ((#("to_atomic_graph(G)" 0 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 17 (fontified t) 17 18 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-1-face))) . 898)) nil (25912 5369 894507 556000) 0 nil])
([nil nil ((nil rear-nonsticky nil 961 . 962) (nil fontified nil 944 . 962) (944 . 962) 943) nil (25912 5369 894506 268000) 0 nil])
([nil nil ((#("    atomic_graph_record = 
" 0 4 (fontified t) 4 23 (fontified t face font-lock-variable-name-face) 23 26 (fontified t) 26 27 (fontified t)) . 872) (undo-tree-id224 . -25) (undo-tree-id225 . -26) (undo-tree-id226 . -26) (undo-tree-id227 . -26) (undo-tree-id228 . -26) (undo-tree-id229 . -26) (undo-tree-id230 . -26) (undo-tree-id231 . -26) (undo-tree-id232 . -26) (undo-tree-id233 . -26) (undo-tree-id234 . -26) (undo-tree-id235 . -26) (undo-tree-id236 . -26) (undo-tree-id237 . -26) (undo-tree-id238 . -26) (undo-tree-id239 . -26) (undo-tree-id240 . -25) (undo-tree-id241 . -25) (undo-tree-id242 . -25) (undo-tree-id243 . -25) (undo-tree-id244 . -25) (undo-tree-id245 . -25) (undo-tree-id246 . -25) (undo-tree-id247 . -25) (undo-tree-id248 . -25) (undo-tree-id249 . -25) (undo-tree-id250 . -25) (undo-tree-id251 . -25) (undo-tree-id252 . -25) (undo-tree-id253 . -25) (undo-tree-id254 . -25) (undo-tree-id255 . -25) (undo-tree-id256 . -25) (undo-tree-id257 . -25) (undo-tree-id258 . -25) (undo-tree-id259 . -4) (undo-tree-id260 . -26) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -26) (undo-tree-id265 . -26) (undo-tree-id266 . -4) (undo-tree-id267 . -26) (undo-tree-id268 . -26) (undo-tree-id269 . -26) (undo-tree-id270 . -26) (undo-tree-id271 . -4) (undo-tree-id272 . -26) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -26) (undo-tree-id277 . -26) (undo-tree-id278 . -4) (undo-tree-id279 . -26) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -26) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -26) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -26) (undo-tree-id291 . -4) (undo-tree-id292 . -26) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -26) (undo-tree-id298 . -26) (undo-tree-id299 . -26) (undo-tree-id300 . -4) (undo-tree-id301 . -26) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -26) (undo-tree-id306 . -26) (undo-tree-id307 . -4) (undo-tree-id308 . -26) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -26) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -26) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -26) (undo-tree-id320 . -26) (undo-tree-id321 . -4) (undo-tree-id322 . -26) (undo-tree-id323 . -26) (undo-tree-id324 . -4) (undo-tree-id325 . -26) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -26) (undo-tree-id330 . -26) (undo-tree-id331 . -4) (undo-tree-id332 . -26) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -26) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -26) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -26) (undo-tree-id344 . -4) (undo-tree-id345 . -26) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -26) (undo-tree-id351 . -26) (undo-tree-id352 . -26) (undo-tree-id353 . -4) (undo-tree-id354 . -26) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -26) (undo-tree-id359 . -26) (undo-tree-id360 . -4) (undo-tree-id361 . -26) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -26) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -26) (undo-tree-id368 . -27) (undo-tree-id369 . -25) (undo-tree-id370 . -26) (undo-tree-id371 . -25) (undo-tree-id372 . -25) (undo-tree-id373 . -25) (undo-tree-id374 . -25) (undo-tree-id375 . -25) (undo-tree-id376 . -4) (undo-tree-id377 . -26) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -26) (undo-tree-id382 . -26) (undo-tree-id383 . -4) (undo-tree-id384 . -26) (undo-tree-id385 . -26) (undo-tree-id386 . -4) (undo-tree-id387 . -26) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -26) (undo-tree-id392 . -26) (undo-tree-id393 . -4) (undo-tree-id394 . -26) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -26) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -26) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -26) (undo-tree-id406 . -4) (undo-tree-id407 . -26) (undo-tree-id408 . -4) (undo-tree-id409 . -4) (undo-tree-id410 . -4) (undo-tree-id411 . -4) (undo-tree-id412 . -26) (undo-tree-id413 . -26) (undo-tree-id414 . -26) (undo-tree-id415 . -4) (undo-tree-id416 . -26) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -26) (undo-tree-id421 . -26) (undo-tree-id422 . -4) (undo-tree-id423 . -26) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -26) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -26) (undo-tree-id430 . -27) (undo-tree-id431 . -25) (undo-tree-id432 . -25) (undo-tree-id433 . -25) (undo-tree-id434 . -25) (undo-tree-id435 . -25) (undo-tree-id436 . -25) (undo-tree-id437 . -25) (undo-tree-id438 . -25) (undo-tree-id439 . -25) (undo-tree-id440 . -25) (undo-tree-id441 . -25) (undo-tree-id442 . -25) (undo-tree-id443 . -25) (undo-tree-id444 . -25) (undo-tree-id445 . -25) (undo-tree-id446 . -25) (undo-tree-id447 . -25) (undo-tree-id448 . -25) (undo-tree-id449 . -25) (undo-tree-id450 . -25) (undo-tree-id451 . -25) (undo-tree-id452 . -25) 897) nil (25912 5369 894497 136000) 0 nil])
([nil nil ((985 . 986) (t 25912 5369 897865 977000)) nil (25912 5379 471760 63000) 0 nil])
([nil nil ((1025 . 1026) (t 25912 5379 474077 248000)) nil (25912 5380 744670 422000) 0 nil])
([nil nil ((985 . 988) (t 25912 5380 746105 319000)) nil (25912 5397 11866 173000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t)) . -986) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("o" 0 1 (fontified t)) . -987) (undo-tree-id464 . -1) (undo-tree-id465 . -1) 988) nil (25912 5397 11864 513000) 0 nil])
([nil nil ((986 . 998)) nil (25912 5397 11859 975000) 0 nil])
([nil nil ((985 . 1002) (#("AtomicGraphRe" 0 13 (fontified t)) . -985) (undo-tree-id460 . -13) (undo-tree-id461 . -13) 998) nil (25912 5397 11855 861000) 0 nil])
([nil nil ((207 . 208) (t 25912 5397 14464 432000)) nil (25912 5412 622232 568000) 0 nil])
([nil nil ((208 . 213)) nil (25912 5412 622231 608000) 0 nil])
([nil nil ((213 . 227)) nil (25912 5412 622230 818000) 0 nil])
([nil nil ((227 . 231)) nil (25912 5412 622229 536000) 0 nil])
([nil nil ((231 . 236)) nil (25912 5412 622224 351000) 0 nil])
([nil nil ((253 . 257) (#(" " 0 1 (fontified nil)) . 252) (undo-tree-id514 . -1) (253 . 254) (t 25912 5412 626809 264000)) nil (25912 5420 37615 8000) 0 nil])
([nil nil ((#("    atomic_graph_to_chem
" 0 25 (fontified t)) . 253) (undo-tree-id466 . -16) (undo-tree-id467 . 21) (undo-tree-id468 . -4) (undo-tree-id469 . -3) (undo-tree-id470 . -16) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -4) (undo-tree-id493 . -24) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) 256) nil (25912 5420 37611 723000) 0 nil])
([nil nil ((nil rear-nonsticky nil 235 . 236) (232 . 257)) nil (25912 5420 37577 798000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 276)) nil (25912 5420 37576 364000) 0 nil])
([nil nil ((276 . 277)) nil (25912 5420 37572 176000) 0 nil])
([nil nil ((256 . 257) (t 25912 5420 42973 133000)) nil (25912 5429 620670 453000) 0 nil])
([nil nil ((1244 . 1259) (1243 . 1244) (1235 . 1243) (1235 . 1236) 1243 (t 25912 5429 623184 883000)) nil (25912 5447 992573 159000) 0 nil])
([nil current ((nil rear-nonsticky nil 1288 . 1289) (nil fontified nil 1259 . 1289) (1259 . 1289) 1258) nil (25912 5447 992567 522000) 0 nil])
nil
